* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVUSTA
* :UID MSA
* :Mode S
* :CP
* :Date 20090919
* :Time 1350330
* <Natural Source Header /*<<RO>
*************************************
*       Редактирование списка       *
* кодификаторов статей пользовател  *
*************************************
DEFINE DATA
* GLOBAL USING UFROG
PARAMETER USING PRMNAVI
*
 LOCAL USING LCLMSGL
 LOCAL USING LCLSTAT
 LOCAL USING PRMHELP
 LOCAL USING LCLSTATI
 LOCAL USING PRMSTEDT
 LOCAL USING LCLSTSET
 LOCAL
1 SELFUN(A60) INIT<'Статьи аналитики'>
1 SELREG(A40)
1 OG_IDENT_G(N5) /* INIT <1000>  /* НЕОБХОДИМО ПРОИНИЦИАЛИЗИРОВАТЬ
*                                   КОД ОРГАНИЗАЦИИ !!
1 SHOWSHORT(A1) CONST <' '>      /* ПОКАЗЫВАТЬ КОРОТКИЕ ИМЕНА
1 WR-REC(B4) CONST <H'00000001'> /* ПРИЗНАК ЗАПИСИ В СТЕК
1 RD-REC(B4) CONST <H'00000000'> /* ПРИЗНАК ЧТЕНИЯ ИЗ СТЕКА
1 N_RELOADST(I4) /* IN GLOBAL
1 I_RELOADST(I4) /*   AREA
/*****************************
1 LISTOFID VIEW OF IBS-SYS-FILE
 2 OG-ST
/*****************************
1 OTBOR
 2 BS_SS(I4)
 2 NAME(A50)
1 OTBORSCR
 2 BS_SS(I4)
 2 NAME(A50)
/*****************************
1 ERRORID(I4)
/*****************************
1 MAXSCREEN(I2) CONST <17>
1 CURRSTACK(I4)
1 SCREEN(MAXSCREEN)
 2 SHORT(A5)
 2 HSHORT(C)
 2 NAME(A80)
1 POSIT(I4)
1 INFOSTRING(A75)
1 SCRSTR(I4)
1 CURRENTSCR(I4)
/*****************************
1 LENST(B4) CONST <86>
1 NUMST(B4) INIT <0>
1 COLST(B4)
1 MAXDATA(I4)
1 STSTACK(A86)
1 REDEFINE STSTACK
  2 SHORT(A5)
  2 NAME(A80)
  2 ACTION(A1)
1 STSTACKTMP(A86)
1 SEARCH(A5)
1 REDEFINE SEARCH
  2 SHORT(A5)
/*****************************
1 KEYSTFR(A16)
1 REDEFINE KEYSTFR
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTO(A16)
1 REDEFINE KEYSTTO
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTM(A16)
1 REDEFINE KEYSTTM
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
/*****************************
1 STARTSORT(B4)
1 ENDSORT(B4)
/*****************************
1 TMPB4(B4)
1 I(I4)
1 MESSAGE(A78)
1 SB(B4)
1 LB(B4)
1 MM(N4)
1 C-RW(C/17)
END-DEFINE
INCLUDE CCASKOG
*
 ASSIGN OG_IDENT_G = OG-IDENT-G
DEFINE WINDOW WINDOWOTBOR
 SIZE 7*55
 BASE 6/12
 TITLE 'Отбор таблиц по критери м'
 CONTROL SCREEN
 FRAMED POSITION OFF
 INCLUDE CCSETKEY ;
 PERFORM LOAD_DATA_FROM_FILE ;
 IF ERRORID NE 0 THEN
  PERFORM VIEWERRORINPROGRAM ;
  ESCAPE ROUTINE
 END-IF
 REPEAT
  IF ERRORID >= 0 THEN
   PERFORM STACK_TO_SCREEN ;
  END-IF
  INCLUDE CCSETKEY ;
  INPUT WITH TEXT INFOSTRING(CD=RE) MARK POSIT USING MAP 'MAPUSM01' ;
  POSIT := *CURS-FIELD
  CURRENTSCR := 0
  FOR I = 1 TO MAXSCREEN
   IF POSIT EQ POS(SCREEN.SHORT(I)) OR
            EQ POS(SCREEN.NAME(I)) THEN
    CURRENTSCR := I
    ESCAPE BOTTOM
   END-IF
  END-FOR
  ERRORID := 0
  RESET INFOSTRING;
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1'                        /* HELP
    INCLUDE CCHELP '235'
    ERRORID := -1
   VALUE 'PF2'                        /* EDIT
    PERFORM CHECK_SCREEN ;
    IF CURRENTSCR EQ 1 THRU MAXSCREEN THEN
     IF SCREEN.SHORT(CURRENTSCR) NE ' ' THEN
      RESET STEDITP ;
      STEDITP.OG_ID := OG_IDENT_G ;
      STEDITP.SHORT := SCREEN.SHORT(CURRENTSCR) ;
      PERFORM SPSTLSED STEDITP PRMNAV ;
      IF NOT STEDITP.RESULT OR
         STEDITP.RESULT_ID EQ 1 THRU MAXERRMSG THEN
       ERRORID := STEDITP.RESULT_ID
       INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
       ERRORID := -1
      END-IF
     END-IF
    END-IF
   VALUE 'PF3'                        /* QUIT
      PERFORM CLEAR_STACK ;
      ESCAPE ROUTINE
   VALUE 'PF4'                        /* SELECT
    SET CONTROL 'N'
    INPUT USING MAP 'MAPMAND2' NO ERASE
    MOVE BY NAME OTBOR TO OTBORSCR ;
    ERRORID := 0
    REPEAT
     SET WINDOW 'WINDOWOTBOR'
     INPUT WITH TEXT INFOSTRING(CD=RE) MARK POSIT USING MAP 'MAPUSM02' ;
     POSIT := *CURS-FIELD
     ERRORID := 0
     SET WINDOW OFF
     RESET INFOSTRING;
     IF *PF-KEY EQ 'PF3' THEN
      ESCAPE BOTTOM END-IF
     OTBORSCR.BS_SS := ABS(OTBORSCR.BS_SS)
     IF *PF-KEY EQ 'ENTR' THEN
      IF OTBORSCR.BS_SS NE OTBOR.BS_SS OR
         OTBORSCR.NAME  NE OTBOR.NAME THEN
       MOVE BY NAME OTBORSCR TO OTBOR ;
       PERFORM LOAD_DATA_FROM_FILE ;
       IF ERRORID NE 0 THEN
        PERFORM VIEWERRORINPROGRAM ;
        ESCAPE ROUTINE
       END-IF
      END-IF
      ESCAPE BOTTOM
     END-IF
    END-REPEAT
   VALUE 'PF5'                        /* NEW
    /* PERFORM CREATE_NEW_STAT ;
    IF ERRORID NE 0 THEN
     PERFORM VIEWERRORINPROGRAM ;
     ESCAPE ROUTINE
    END-IF
    PERFORM LOAD_DATA_FROM_FILE ;
    IF ERRORID NE 0 THEN
     PERFORM VIEWERRORINPROGRAM ;
     ESCAPE ROUTINE
    END-IF
   VALUE 'PF6'                        /* DEL
    /* PERFORM CREATE_NEW_STAT ;
    IF ERRORID NE 0 THEN
     PERFORM VIEWERRORINPROGRAM ;
     ESCAPE ROUTINE
    END-IF
    PERFORM LOAD_DATA_FROM_FILE ;
    IF ERRORID NE 0 THEN
     PERFORM VIEWERRORINPROGRAM ;
     ESCAPE ROUTINE
    END-IF
   VALUE 'PF7'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := CURRSTACK - MAXSCREEN
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF8'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := CURRSTACK + MAXSCREEN
    IF CURRSTACK > MAXDATA THEN
     CURRSTACK := MAXDATA - MAXSCREEN + 2
    END-IF
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF9'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := 1
   VALUE 'PF10'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := MAXDATA - MAXSCREEN + 2
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF12'                       /* SORT
    PERFORM CHECK_SCREEN ;
    IF CURRENTSCR EQ 1 THRU MAXSCREEN THEN
     DECIDE FOR FIRST CONDITION
      WHEN POSIT EQ POS(SCREEN.SHORT(CURRENTSCR))
       STARTSORT := 1
       ENDSORT   := 5
      WHEN POSIT EQ POS(SCREEN.NAME(CURRENTSCR))
       STARTSORT := 6
       ENDSORT   := 80
      WHEN NONE
       STARTSORT := 1
       ENDSORT   := 5
     END-DECIDE
     POSIT := 0
     CURRSTACK := 1
     CALL 'SRTX' STARTSORT ENDSORT NUMST ;
    END-IF
   NONE VALUE PERFORM CHECK_SCREEN ;
  END-DECIDE
 END-REPEAT
/********************************************************************
 DEFINE SUBROUTINE LOAD_DATA_FROM_FILE
  ERRORID := 0
  PERFORM CLEAR_STACK ;
  MAXDATA := 0
  COLST   := 1000;
  ASSIGN NUMST = MAX-NS
  CALL 'GTNX' NUMST ;
  CALL 'GTSX' LENST COLST NUMST ;
  IF NUMST EQ 0 THEN
   ERRORID := 999
   ESCAPE ROUTINE
  END-IF
  KEYSTFR.KEYOG := KEYSTTO.KEYOG := OG_IDENT_G
  MOVE ALL H'00' TO KEYSTFR.KEYST
  MOVE ALL H'FF' TO KEYSTTO.KEYST
  KEYSTFR.KEYCD := -1
  KEYSTTO.KEYCD := 1
H. HISTOGRAM LISTOFID OG-ST FROM KEYSTFR THRU KEYSTTO
    KEYSTTM := OG-ST
    IF KEYSTTM.KEYST EQ NAME_TABLE_STSETUPV THEN ESCAPE TOP END-IF
    SB := 1
    LB := 5
    CALL 'CMPXF' KEYSTTM.KEYST SB LB NUMST ;
    IF SB EQ 0 THEN
     ADD 1 TO MAXDATA
     IF MAXDATA > COLST THEN
      PERFORM RELOADATA ; END-IF
     RESET STSTACK ;
     STSTACK.SHORT   := KEYSTTM.KEYST
     TMPB4 := MAXDATA
     CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
    END-IF
  END-HISTOGRAM
  FOR I = 1 TO MAXDATA
   TMPB4 := I
   CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST
   KEYSTFR.KEYOG := OG_IDENT_G
   KEYSTFR.KEYST := STSTACK.SHORT
   KEYSTFR.KEYCD := -1
F. FIND (1) VIEWSTAT OG-ST = KEYSTFR
    STSTACK.NAME    := VIEWSTAT.NM-OG
    STSTACK.ACTION  := 'O'
   END-FIND
   CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
  END-FOR
  FOR I = 1 TO MAXSTATIC
   IF STSTATIC.SHORT(I) EQ ' ' THEN ESCAPE TOP END-IF
   SB := 1
   LB := 5
   STSTACK.SHORT := STSTATIC.SHORT(I)
   CALL 'CMPXF' STSTACK.SHORT SB LB NUMST ;
   IF SB EQ 0 THEN
    ADD 1 TO MAXDATA
    IF MAXDATA > COLST THEN
     PERFORM RELOADATA ; END-IF
    RESET STSTACK ;
    STSTACK.SHORT   := STSTATIC.SHORT(I)
    STSTACK.NAME    := STSTATIC.NAME(I)
    STSTACK.ACTION  := 'N'
    TMPB4 := MAXDATA
    CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
    END-IF
  END-FOR
  IF MAXDATA > 1 THEN
   STARTSORT := 6
   ENDSORT   := 80
   CALL 'SRTX' STARTSORT ENDSORT NUMST ;
  END-IF
  CURRSTACK := 1
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE CLEAR_STACK
  CALL 'FRSX' NUMST ;
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE STACK_TO_SCREEN
  RESET SCREEN(*) ;
  FOR I = 1 TO MAXSCREEN
   TMPB4 := CURRSTACK + I - 1 ;
   IF TMPB4 <= MAXDATA THEN
    CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST
    IF SHOWSHORT NE ' ' THEN
      SCREEN.HSHORT(I) := (AD=D)
     ELSE
      SCREEN.HSHORT(I) := (AD=NP)
    END-IF
    SCREEN.SHORT(I) := STSTACK.SHORT
    SCREEN.NAME(I)  := STSTACK.NAME
   END-IF
  END-FOR
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE VIEWERRORINPROGRAM /* +
  IF ERRORID EQ 1 THRU MAXERRMSG THEN
    INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
   ELSE
    INCLUDE CCMSG '"Ошибка при выполнении программы."'
  END-IF
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE CHECK_SCREEN
  FOR SCRSTR = 1 TO MAXSCREEN
   IF SCREEN.SHORT(SCRSTR) EQ ' ' AND SCREEN.NAME(SCRSTR) EQ ' ' THEN
    ESCAPE TOP
   END-IF
   TMPB4 := CURRSTACK + SCRSTR - 1;
   IF TMPB4 <= MAXDATA THEN
     CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST
     IF STSTACK.ACTION EQ 'N' OR
        SCREEN.NAME(SCRSTR) NE STSTACK.NAME THEN
      KEYSTFR.KEYOG := OG_IDENT_G
      KEYSTFR.KEYST := STSTACK.SHORT
      KEYSTFR.KEYCD := -1
U.    FIND (1) VIEWSTAT OG-ST = KEYSTFR
       IF NO RECORDS FOUND
         VIEWSTAT.OG-ID := OG_IDENT_G
         VIEWSTAT.ST-F  := SCREEN.SHORT(SCRSTR)
         VIEWSTAT.CT-F  := -1
         VIEWSTAT.NM-OG := SCREEN.NAME(SCRSTR)
         STORE VIEWSTAT ;
        ESCAPE BOTTOM
       END-NOREC
       VIEWSTAT.NM-OG := SCREEN.NAME(SCRSTR)
       UPDATE(U.)
      END-FIND
      END OF TRANSACTION
      STSTACK.NAME   := SCREEN.NAME(SCRSTR)
      STSTACK.ACTION := 'O'
      CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
     END-IF
    ELSE
    CALLNAT 'SBGTST' OG_IDENT_G SCREEN.SHORT(SCRSTR)
    ADD 1 TO MAXDATA
    IF MAXDATA > COLST THEN
     PERFORM RELOADATA ; END-IF
    RESET STSTACK ;
    STSTACK.SHORT   := SCREEN.SHORT(SCRSTR)
    STSTACK.NAME    := SCREEN.NAME(SCRSTR)
    STSTACK.ACTION  := 'O'
    TMPB4 := MAXDATA
    CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
    VIEWSTAT.OG-ID := OG_IDENT_G
    VIEWSTAT.ST-F  := SCREEN.SHORT(SCRSTR)
    VIEWSTAT.CT-F  := -1
    VIEWSTAT.NM-OG := SCREEN.NAME(SCRSTR)
    STORE VIEWSTAT ;
    END OF TRANSACTION
   END-IF
**********
  END-FOR
 END-SUBROUTINE
/********************************************************************
INCLUDE CCRLDST 'RELOADATA' 'LENST' 'COLST' 'NUMST' 'STSTACKTMP' ;
END
