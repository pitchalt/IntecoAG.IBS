* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVBNK
* :UID MSA
* :Mode S
* :CP
* :Date 20080102
* :Time 1212330
* <Natural Source Header /*<<RO>
*******************************
* ВЕДЕНИЕ КОДИФИКАТОРА БАНКОВ *
*******************************
DEFINE DATA
 PARAMETER USING PRMNAVI
* LOCAL USING PRMNAVBN
 PARAMETER USING PRMNAVBN
  LOCAL USING LCLFROL4
LOCAL
1 SELFUN(A60) INIT<'Ведение кодификатора банков'>
1 SELREG(A40)
1 IBS-KBN-FILE VIEW OF IBS-SYS-FILE      /* КОДИФИКАТОР БАНКОВ
  2 OG-ID
  2 BN-ID
  2 NM-BN
  2 AD-BN
  2 UT-ID
  2 PR-ID
  3 KR-OG(1:1)
  2 MF-ID
  2 AD-MK
  2 MF-SH
  2 MR-SH
  2 NA-F
  2 UP-DT
  2 UP-PG
  2 UP-ID
  2 UP-US
1 NUM_BANK VIEW IBS-SYS-FILE
 2 OG-ID
 2 KK-F
 2 KD-F
1 IBS-NAOR-FILE VIEW OF IBS-SYS-FILE
 2 OG-ID
 2 NM-OG /* НАЗВАНИЕ
/**************************************
1 KEYNAOR(B10)
1 REDEFINE KEYNAOR
  2 KEYOG(N5)
  2 KEYKD(N5)
1 KEYBN1(B13)
1 REDEFINE KEYBN1
  2 KEYOG(N5)
  2 KEYBN(N8)
1 KEYBN2(B13)
1 REDEFINE KEYBN2
  2 KEYOG(N5)
  2 KEYBN(N8)
1 KEYBN3(B13)
1 REDEFINE KEYBN3
  2 KEYOG(N5)
  2 KEYBN(N8)
1 KEYBN4(B13)
1 REDEFINE KEYBN4
  2 KEYOG(N5)
  2 KEYBN(N8)
/**************************************
1 NUMSTACK(B4) CONST <H'0000001E'>
1 LSTACK(B4)   CONST <H'00000113'>
1 COLSTACK(B4) INIT  <H'00000000'>
1 MAXDATA(N8) INIT <0>
1 DSTACK(A1/1:275)
1 REDEFINE DSTACK
 2 ISN_REC(P11)
 2 STATUS(A3)
 2 BN_ID(N8)
 2 BN_BIC(A15)
 2 KORR_SCH(A20)
 2 ADR_KORR(A40)
 2 UH_BN(A3)
 2 ADR_BN(A60)
 2 NM_BN(A60)
 2 ALT_NM(A60)
1 LMP(B4)
/**************************************
1 STARTLINE(N8)
1 SCREEN(5)
 2 NUM_ST(P10)
 2 STATUS(A3)
 2 BN_ID(N8)
 2 BN_BIC(A15)
 2 KORR_SCH(A20)
 2 ADR_KORR(A40)
 2 UH_BN(A3)
 2 ADR_BN(A60)
 2 NM_BN(A60)
 2 ALT_NM(A60)
/**************************************
1 WR-REC(B4) CONST <H'00000001'> /* ПРИЗНАК ЗАПИСИ В СТЕКА
1 RD-REC(B4) CONST <H'00000000'> /* ПРИЗНАК ЧТЕНИЯ ИЗ СТЕКА
/**************************************
1 TMP_B4(B4)
1 I(N5)
1 K(N5)
1 POSIT(I4)
1 CURRENTLINE(N3)
1 TITLEALT(A60)
1 TMP_ISN(P11)
1 MESSAGE(A70)
1 KODIF_BN_TMP
 2 OG_ID_G(N5)   /* КОД ОРГАНИЗАЦИИ
 2 BN_ID(N8)     /* КОД БАНКА / ВОЗВРАТ
 2 BN_BIC(A15)   /* БИК БАНКА / ВОЗВРАТ
 2 KORR_SCH(A20) /* КОРР. СЧЕТ БАНКА / ВОЗВРАТ
 2 NAME_BN(A70)  /* ИМЯ БАНКА / ВОЗВРАТ
 2 ADDR_BN(A70)  /* АДРЕС БАНКА / ВОЗВРАТ
 2 RES_BN(A1)
1 BB1(B4)  1 BB2(B4) 1 BB3(I4)
END-DEFINE
#OPSYS := *OPSYS
INCLUDE CCASKOG
*
DEFINE WINDOW ALT_NAME
       SIZE 5*66
       BASE 8/7
       TITLE TITLEALT
       CONTROL SCREEN
       FRAMED ON
 RESET KODIF_BN_TMP
 KODIF_BN.RES_BN := 'N' KODIF_BN.OG_ID_G := PRMNAV.OG-IDENT-G
 IF KODIF_BN.OG_ID_G <= 0 THEN
  RESET KODIF_BN ; KODIF_BN.RES_BN := 'E' ESCAPE ROUTINE END-IF
 KEYBN1.KEYOG := KEYBN2.KEYOG := KEYBN3.KEYOG := KEYNAOR.KEYOG :=
 KEYNAOR.KEYKD := KODIF_BN.OG_ID_G
 FIND (1) IBS-NAOR-FILE OG-KD = KEYNAOR
  IF NO RECORDS FOUND
   RESET KODIF_BN ; KODIF_BN.RES_BN := 'E' ESCAPE BOTTOM /* ROUTINE
  END-NOREC
  PRMNAV.OG-NM-G := IBS-NAOR-FILE.NM-OG
 END-FIND
 CALLNAT 'SBCNTR60' PRMNAV.OG-NM-G
REPEAT
 PRMNAV.REG-NM-G := '*** Составление запроса ***'
 CALLNAT 'SBCNTR40' PRMNAV.REG-NM-G
 REPEAT
  SET KEY ENTR PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
  INCLUDE INPPC '"NAVBNM1"' '"MAPVBNM1"'
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1'
    IGNORE
   VALUE 'PF3'
    RESET KODIF_BN ; KODIF_BN.RES_BN := 'N' ESCAPE ROUTINE
   VALUE 'PF12'
    RESET KODIF_BN.ADDR_BN
          KODIF_BN.BN_BIC
          KODIF_BN.BN_ID
          KODIF_BN.KORR_SCH
          KODIF_BN.NAME_BN ;
   VALUE 'ENTR'
    ESCAPE BOTTOM
   NONE VALUE IGNORE
  END-DECIDE
 END-REPEAT
 PERFORM LOAD_DATA
 BB1 := 10  BB2 := 8
 CALL 'SRTX' BB1 BB2 NUMSTACK
 IF MAXDATA EQ 0 THEN
  COLSTACK := 500 ;
  CALL 'GTSX' LSTACK COLSTACK NUMSTACK ;
  CALL 'NULX' ' ' NUMSTACK ; END-IF
 STARTLINE := 1
 REPEAT
  PERFORM LOADSCREEN
  SET KEY ENTR PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
  INCLUDE INPPC '"NAVBNM2"' '"MAPVBNM2"'
  POSIT := *CURS-FIELD
  CURRENTLINE := 0
  FOR I = 1 TO 5
   IF POSIT EQ POS(SCREEN.BN_ID(I)) OR
      POSIT EQ POS(SCREEN.BN_BIC(I)) OR
      POSIT EQ POS(SCREEN.KORR_SCH(I)) OR
      POSIT EQ POS(SCREEN.ADR_KORR(I)) OR
      POSIT EQ POS(SCREEN.UH_BN(I)) OR
      POSIT EQ POS(SCREEN.ADR_BN(I)) OR
      POSIT EQ POS(SCREEN.NM_BN(I)) THEN
    CURRENTLINE := I
    ESCAPE BOTTOM                END-IF
  END-FOR
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1'
    IGNORE
   VALUE 'PF2'
    PERFORM CHECK_SCREEN
    IF CURRENTLINE EQ 1 THRU 5 THEN
      SET CONTROL 'N'
      INPUT NO ERASE (IP=OFF)
      001T *DATX (AD=DLOFHT) 071T *LIBRARY-ID (AD=DLOFHT)/
      001T *TIMX (AD=DLOFHT) 071T *USER (AD=DLOFHT ) /
      //////////////////
 001T 'ВВОД---ПФ1---ПФ2---ПФ3---ПФ4---ПФ5---ПФ6---ПФ7---ПФ8---ПФ9'-
      '---ПФ10--ПФ11--ПФ12-' /
 001T '                   Вых                                    '-
      '                    '(I) ;
     REPEAT
      TITLEALT := SCREEN.NM_BN(CURRENTLINE)
      SET WINDOW 'ALT_NAME'
      IF #OPSYS = 'W'
        INPUT USING MAP 'NAVBNM3' SCREEN.ALT_NM(CURRENTLINE)
        ELSE
        INPUT USING MAP 'MAPVBNM3' SCREEN.ALT_NM(CURRENTLINE)
      END-IF
      SET WINDOW OFF
      IF *PF-KEY EQ 'PF3' THEN ESCAPE BOTTOM END-IF
     END-REPEAT
                               END-IF
    PERFORM CHECK_SCREEN
   VALUE 'PF3'
    IF KODIF_BN_TMP.RES_BN EQ 'Y' THEN
     KODIF_BN.OG_ID_G  := KODIF_BN_TMP.OG_ID_G
     KODIF_BN.BN_ID    := KODIF_BN_TMP.BN_ID
     KODIF_BN.BN_BIC   := KODIF_BN_TMP.BN_BIC
     KODIF_BN.KORR_SCH := KODIF_BN_TMP.KORR_SCH
     KODIF_BN.NAME_BN  := KODIF_BN_TMP.NAME_BN
     KODIF_BN.ADDR_BN  := KODIF_BN_TMP.ADDR_BN
     KODIF_BN.RES_BN := 'Y'
*     write '='KODIF_BN.RES_BN '='KODIF_BN.BN_ID
*     BN-IDENT-G := KODIF_BN.BN_ID   /* ДЛЯ ВЫБОРКИ БАНКА В ОРГ.ПОЛЬЗ.
    ELSE
     KODIF_BN.RES_BN := 'N'
    END-IF
    CALL 'FRSX' NUMSTACK ;
    ESCAPE ROUTINE
   VALUE 'PF4'
    PERFORM CHECK_SCREEN
  FIND NUM_BANK OG-ID = KODIF_BN.OG_ID_G AND KK-F = 'MB'
   IF NO RECORD FOUND
    ASSIGN NUM_BANK.OG-ID = KODIF_BN.OG_ID_G
    ASSIGN NUM_BANK.KK-F  = 'MB'
    ASSIGN NUM_BANK.KD-F  = 0
   END-NOREC
   ADD 1 TO NUM_BANK.KD-F
   ADD 1 TO MAXDATA
   IF MAXDATA > COLSTACK THEN
    ADD -1 TO MAXDATA
    REINPUT FULL WITH TEXT
   'Не хватает пам ти. Сохранитесь и продолжайте работу.'(CD=RE)
                   ALARM END-IF
   STARTLINE := MAXDATA
   TMP_B4 := MAXDATA
   DSTACK.ISN_REC  := 0
   DSTACK.STATUS   := 'NEW'
   DSTACK.BN_ID    := NUM_BANK.KD-F
   DSTACK.BN_BIC   := ' '
   DSTACK.KORR_SCH := ' '
   DSTACK.ADR_KORR := ' '
   DSTACK.UH_BN    := ' '
   DSTACK.ADR_BN   := ' '
   DSTACK.NM_BN    := ' '
   DSTACK.ALT_NM   := ' '
   CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
   IF *NUMBER = 0
     THEN STORE NUM_BANK
     ELSE UPDATE
   END-IF
   END OF TRANSACTION
  END-FIND
   VALUE 'PF5'
    PERFORM CHECK_SCREEN
    FOR I = 1 TO MAXDATA
     TMP_B4 := I
     CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
     DECIDE ON FIRST VALUE DSTACK.STATUS
      VALUE 'UPD'
L1.    GET IBS-KBN-FILE DSTACK.ISN_REC
        IBS-KBN-FILE.OG-ID := KODIF_BN.OG_ID_G
        IBS-KBN-FILE.BN-ID := DSTACK.BN_ID
        IBS-KBN-FILE.MF-ID := DSTACK.BN_BIC
        IBS-KBN-FILE.KR-OG(1) := DSTACK.KORR_SCH
        IBS-KBN-FILE.AD-MK := DSTACK.ADR_KORR
        IBS-KBN-FILE.UT-ID := DSTACK.UH_BN
        IBS-KBN-FILE.AD-BN := DSTACK.ADR_BN
        IBS-KBN-FILE.NM-BN := DSTACK.NM_BN
        IBS-KBN-FILE.NA-F  := DSTACK.ALT_NM
        IBS-KBN-FILE.UP-US := *USER
        IBS-KBN-FILE.UP-DT := *DATX
       UPDATE(L1.)
      VALUE 'NEW'
        IBS-KBN-FILE.OG-ID := KODIF_BN.OG_ID_G
        IBS-KBN-FILE.BN-ID := DSTACK.BN_ID
        IBS-KBN-FILE.MF-ID := DSTACK.BN_BIC
        IBS-KBN-FILE.KR-OG(1) := DSTACK.KORR_SCH
        IBS-KBN-FILE.AD-MK := DSTACK.ADR_KORR
        IBS-KBN-FILE.UT-ID := DSTACK.UH_BN
        IBS-KBN-FILE.AD-BN := DSTACK.ADR_BN
        IBS-KBN-FILE.NM-BN := DSTACK.NM_BN
        IBS-KBN-FILE.NA-F  := DSTACK.ALT_NM
        IBS-KBN-FILE.UP-US := *USER
        IBS-KBN-FILE.UP-DT := *DATX
        STORE IBS-KBN-FILE
      VALUE 'DEL'
L2.    GET IBS-KBN-FILE DSTACK.ISN_REC
       DELETE(L2.)
      NONE VALUE IGNORE
     END-DECIDE
     END OF TRANSACTION
    END-FOR
    CALL 'FRSX' NUMSTACK ;
    ESCAPE BOTTOM
   VALUE 'PF6'
    IF CURRENTLINE EQ 1 THRU 5 THEN
    REINPUT FULL WITH TEXT
    'Удаление невозможно. Код банка используетс .'(CD=RE)
     MARK *SCREEN.BN_BIC(CURRENTLINE) ALARM
     IF (SCREEN.BN_ID(CURRENTLINE) NE 0) THEN
     IF (SCREEN.STATUS(CURRENTLINE) EQ 'OLD' OR EQ 'UPD') THEN
      FIND (1) NUM_BANK OG-ID EQ KODIF_BN.OG_ID_G AND
                    BN-OG EQ SCREEN.BN_ID(CURRENTLINE)
    REINPUT FULL WITH TEXT
    'Удаление невозможно. Код банка используетс .'(CD=RE)
     MARK *SCREEN.BN_BIC(CURRENTLINE) ALARM
      END-FIND
    TMP_B4 := SCREEN.NUM_ST(CURRENTLINE)
    CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
    DSTACK.STATUS := 'DEL'
    CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;        ELSE
    IF SCREEN.NUM_ST(CURRENTLINE) NE 0 THEN
    TMP_B4 := SCREEN.NUM_ST(CURRENTLINE)
    CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
    DSTACK.ISN_REC  := 0
    DSTACK.STATUS   := ' '
    DSTACK.BN_ID    := 0
    DSTACK.BN_BIC   := ' '
    DSTACK.KORR_SCH := ' '
    DSTACK.ADR_KORR := ' '
    DSTACK.UH_BN    := ' '
    DSTACK.ADR_BN   := ' '
    DSTACK.NM_BN    := ' '
    DSTACK.ALT_NM   := ' '
    CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
                                        ELSE
    RESET SCREEN(CURRENTLINE)           END-IF END-IF END-IF END-IF
   VALUE 'PF7'
    PERFORM CHECK_SCREEN
    ADD -5 TO STARTLINE
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
   VALUE 'PF8'
    PERFORM CHECK_SCREEN
    ADD 5 TO STARTLINE
    IF STARTLINE > MAXDATA THEN STARTLINE := MAXDATA - 4 END-IF
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
   VALUE 'PF9'
    PERFORM CHECK_SCREEN
    STARTLINE := 1
   VALUE 'PF10'
    PERFORM CHECK_SCREEN
    STARTLINE := MAXDATA - 3
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
*   VALUE 'PF12'
*    IF POSIT EQ POS(SCREEN.BN_BIC(*))
*     BB1 := 18 BB2 := 15
*     CALL 'SRTX' BB1 BB2 NUMSTACK
*    END-IF
*    IF POSIT EQ POS(SCREEN.KORR_SCH(*))
*     BB1 := 33 BB2 := 20
*     CALL 'SRTX' BB1 BB2 NUMSTACK
*    END-IF
*    STARTLINE := 1
   NONE VALUE
    PERFORM CHECK_SCREEN
  END-DECIDE
 END-REPEAT
END-REPEAT
DEFINE SUBROUTINE CHECK_SCREEN
 K := 0
 FOR I = 1 TO 5
 IF SCREEN.BN_ID(I) NE 0 THEN
 IF SCREEN.NUM_ST(I) NE 0
  THEN TMP_B4 := SCREEN.NUM_ST(I)
  ELSE TMP_B4 := I + STARTLINE - 1 + K ; END-IF
 IF TMP_B4 <= COLSTACK THEN
 CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
 IF DSTACK.STATUS NE 'DEL' THEN
  IF SCREEN.STATUS(I) NE 'DEL' THEN
   KEYBN1.KEYBN := SCREEN.BN_ID(I)
   FIND IBS-KBN-FILE OG-BN EQ KEYBN1
    IF *ISN NE DSTACK.ISN_REC THEN
    REINPUT FULL WITH TEXT 'Дублирование кода банка.'(CD=RE)
     MARK *SCREEN.BN_BIC(I) ALARM END-IF
   END-FIND
   IF SCREEN.BN_BIC(I) EQ ' ' THEN
    REINPUT FULL WITH TEXT 'Введите БИК банка.'(CD=RE)
     MARK *SCREEN.BN_BIC(I) ALARM END-IF
*  KEYBN1.KEYBN := 0
*  KEYBN2.KEYBN := 99999999
*  KEYBN3.KEYBN := SCREEN.BN_ID(I)
*  L9. FIND NUMBER IBS-KBN-FILE
*           IBS-KBN-FILE.OG-BN EQ KEYBN1 THRU KEYBN2 BUT NOT KEYBN3 AND
*           IBS-KBN-FILE.MF-ID EQ SCREEN.BN_BIC(I)
*   IF *NUMBER(L9.) > 0 THEN
*    FIND (1) IBS-KBN-FILE
*          IBS-KBN-FILE.OG-BN EQ KEYBN1 THRU KEYBN2 BUT NOT KEYBN3 AND
*          IBS-KBN-FILE.MF-ID EQ SCREEN.BN_BIC(I)
*    MESSAGE := IBS-KBN-FILE.BN-ID
*    END-FIND
* COMPRESS 'БАНК С ТАКИМ БИКОМ УЖЕ ПРИСУТСТВУЕТ В БАЗЕ ПОД НОМЕРОМ :'
*                                         MESSAGE TO MESSAGE
*    REINPUT FULL WITH TEXT MESSAGE(CD=RE)
*     MARK *SCREEN.BN_BIC(I) ALARM END-IF
*    LMP := H'00000012'
*    CALL 'CMPXF' SCREEN.BN_BIC(I) LMP H'0000000F' NUMSTACK
*    IF LMP NE 0 AND  LMP NE SCREEN.NUM_ST(I) THEN
*     REINPUT FULL WITH TEXT 'БАНК С ТАКИМ БИКОМ УЖЕ ВВЕДЕН.'(CD=RE)
*      MARK *SCREEN.BN_BIC(I) ALARM
*                END-IF
*   IF SCREEN.KORR_SCH(I) EQ ' ' THEN
*    REINPUT FULL WITH TEXT
*    'Введите корреспондентский счет банка.'(CD=RE)
*     MARK *SCREEN.KORR_SCH(I) ALARM END-IF
   IF SCREEN.NM_BN(I) EQ ' ' THEN
    REINPUT FULL WITH TEXT
    'Введите наименование банка.'(CD=RE)
     MARK *SCREEN.NM_BN(I) ALARM END-IF
   IF SCREEN.ADR_BN(I) EQ ' ' THEN
    REINPUT FULL WITH TEXT
    'Введите адрес банка.'(CD=RE)
     MARK *SCREEN.ADR_BN(I) ALARM END-IF
                       END-IF
DSTACK.STATUS   := SCREEN.STATUS(I)
IF DSTACK.BN_ID NE SCREEN.BN_ID(I) OR
   DSTACK.BN_BIC NE SCREEN.BN_BIC(I) OR
   DSTACK.KORR_SCH NE SCREEN.KORR_SCH(I) OR
   DSTACK.ADR_KORR NE SCREEN.ADR_KORR(I) OR
   DSTACK.UH_BN NE SCREEN.UH_BN(I) OR
   DSTACK.ADR_BN NE SCREEN.ADR_BN(I) OR
   DSTACK.NM_BN NE SCREEN.NM_BN(I) OR
   DSTACK.ALT_NM NE SCREEN.ALT_NM(I) THEN
   DECIDE ON FIRST VALUE DSTACK.STATUS
    VALUE 'OLD'
     DSTACK.STATUS := 'UPD'
    VALUE 'UPD'
     IGNORE
    VALUE 'DEL'
     IGNORE
    NONE VALUE
     DSTACK.STATUS := 'NEW'
   END-DECIDE
 DSTACK.BN_ID    := SCREEN.BN_ID(I)
 DSTACK.BN_BIC   := SCREEN.BN_BIC(I)
 DSTACK.KORR_SCH := SCREEN.KORR_SCH(I)
 DSTACK.ADR_KORR := SCREEN.ADR_KORR(I)
 DSTACK.UH_BN    := SCREEN.UH_BN(I)
 DSTACK.ADR_BN   := SCREEN.ADR_BN(I)
 DSTACK.NM_BN    := SCREEN.NM_BN(I)
 DSTACK.ALT_NM   := SCREEN.ALT_NM(I)
END-IF
IF *PF-KEY EQ 'ENTR' AND CURRENTLINE EQ I THEN
 KODIF_BN_TMP.BN_ID    := SCREEN.BN_ID(I)
 KODIF_BN_TMP.BN_BIC   := SCREEN.BN_BIC(I)
 KODIF_BN_TMP.KORR_SCH := SCREEN.KORR_SCH(I)
 KODIF_BN_TMP.NAME_BN  := SCREEN.NM_BN(I)
 KODIF_BN_TMP.ADDR_BN  := SCREEN.ADR_BN(I)
 KODIF_BN_TMP.RES_BN   := 'Y'
                     END-IF
 IF TMP_B4 > MAXDATA THEN MAXDATA := TMP_B4 END-IF
 CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
                           ELSE
  ADD -1 TO I ; ADD 1 TO K END-IF
                       ELSE
 RESET SCREEN(I:5) ADD -1 TO MAXDATA
 REINPUT FULL WITH TEXT
 'Не хватает пам ти. Сохранитесь и продолжайте работу.'(CD=RE)
 MARK *SCREEN.BN_BIC(I) ALARM END-IF
  END-IF
 END-FOR
END-SUBROUTINE
DEFINE SUBROUTINE LOADSCREEN
 RESET SCREEN(*)
 K := 0
 FOR I = 1 TO 5
  TMP_B4 := I + STARTLINE - 1 + K ;
  IF TMP_B4 <= MAXDATA THEN
   CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
   IF DSTACK.STATUS NE 'DEL' THEN
   SCREEN.NUM_ST(I)   := TMP_B4
   SCREEN.STATUS(I)   := DSTACK.STATUS
   SCREEN.BN_ID(I)    := DSTACK.BN_ID
   SCREEN.BN_BIC(I)   := DSTACK.BN_BIC
   SCREEN.KORR_SCH(I) := DSTACK.KORR_SCH
   SCREEN.ADR_KORR(I) := DSTACK.ADR_KORR
   SCREEN.UH_BN(I)    := DSTACK.UH_BN
   SCREEN.ADR_BN(I)   := DSTACK.ADR_BN
   SCREEN.NM_BN(I)    := DSTACK.NM_BN
   SCREEN.ALT_NM(I)   := DSTACK.ALT_NM
                             ELSE
   ADD -1 TO I ; ADD 1 TO K  END-IF
                       END-IF
 END-FOR
END-SUBROUTINE
DEFINE SUBROUTINE LOAD_DATA
MAXDATA  := 0
COLSTACK := 0
KEYBN1.KEYBN := 0 KEYBN2.KEYBN := 99999999
 DECIDE FOR FIRST CONDITION
  WHEN KODIF_BN.BN_ID EQ 0 AND KODIF_BN.BN_BIC EQ ' ' AND KODIF_BN.KORR_SCH NE ' '
   FIND IBS-KBN-FILE KR-OG EQ KODIF_BN.KORR_SCH AND OG-BN EQ KEYBN1 THRU KEYBN2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID EQ 0 AND KODIF_BN.BN_BIC NE ' ' AND KODIF_BN.KORR_SCH EQ ' '
   FIND IBS-KBN-FILE MF-ID EQ KODIF_BN.BN_BIC AND OG-BN EQ KEYBN1 THRU KEYBN2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID EQ 0 AND KODIF_BN.BN_BIC NE ' ' AND KODIF_BN.KORR_SCH NE ' '
   FIND IBS-KBN-FILE MF-ID EQ KODIF_BN.BN_BIC AND KR-OG EQ KODIF_BN.KORR_SCH AND
                     OG-BN EQ KEYBN1 THRU KEYBN2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID NE 0 AND KODIF_BN.BN_BIC EQ ' ' AND KODIF_BN.KORR_SCH EQ ' '
   KEYBN1.KEYBN := KODIF_BN.BN_ID
   FIND IBS-KBN-FILE OG-BN EQ KEYBN1 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID NE 0 AND KODIF_BN.BN_BIC EQ ' ' AND KODIF_BN.KORR_SCH NE ' '
   KEYBN1.KEYBN := KODIF_BN.BN_ID
   FIND IBS-KBN-FILE OG-BN EQ KEYBN1 AND KR-OG EQ KODIF_BN.KORR_SCH ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID NE 0 AND KODIF_BN.BN_BIC NE ' ' AND KODIF_BN.KORR_SCH EQ ' '
   KEYBN1.KEYBN := KODIF_BN.BN_ID
   FIND IBS-KBN-FILE MF-ID EQ KODIF_BN.BN_BIC AND OG-BN EQ KEYBN1 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_BN.BN_ID NE 0 AND KODIF_BN.BN_BIC NE ' ' AND KODIF_BN.KORR_SCH NE ' '
   KEYBN1.KEYBN := KODIF_BN.BN_ID
   FIND IBS-KBN-FILE MF-ID EQ KODIF_BN.BN_BIC AND KR-OG EQ KODIF_BN.KORR_SCH AND
                     OG-BN EQ KEYBN1 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN NONE
   FIND IBS-KBN-FILE OG-BN EQ KEYBN1 THRU KEYBN2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
 END-DECIDE
END-SUBROUTINE
DEFINE SUBROUTINE DATA2STACK
 IF MAXDATA EQ 0 THEN
  CALL 'GTSX' LSTACK COLSTACK NUMSTACK ;
  CALL 'NULX' ' ' NUMSTACK
                  END-IF
IF KODIF_BN.BN_ID NE 0 THEN
 IF KODIF_BN.BN_ID NE IBS-KBN-FILE.BN-ID THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_BN.BN_BIC NE ' ' THEN
 IF KODIF_BN.BN_BIC NE IBS-KBN-FILE.MF-ID THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_BN.KORR_SCH NE ' ' THEN
 IF KODIF_BN.KORR_SCH NE IBS-KBN-FILE.KR-OG(1) THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_BN.NAME_BN  NE ' ' THEN
 IF IBS-KBN-FILE.NM-BN NE SCAN KODIF_BN.NAME_BN THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_BN.ADDR_BN  NE ' ' THEN
 IF IBS-KBN-FILE.AD-BN NE SCAN KODIF_BN.ADDR_BN THEN
   ESCAPE ROUTINE END-IF END-IF
 DSTACK.ISN_REC  := TMP_ISN
 DSTACK.STATUS   := 'OLD'
 DSTACK.BN_ID    := IBS-KBN-FILE.BN-ID
 DSTACK.BN_BIC   := IBS-KBN-FILE.MF-ID
 DSTACK.KORR_SCH := IBS-KBN-FILE.KR-OG(1)
 DSTACK.ADR_KORR := IBS-KBN-FILE.AD-MK
 DSTACK.UH_BN    := IBS-KBN-FILE.UT-ID
 DSTACK.ADR_BN   := IBS-KBN-FILE.AD-BN
 DSTACK.NM_BN    := IBS-KBN-FILE.NM-BN
 DSTACK.ALT_NM   := IBS-KBN-FILE.NA-F
 ADD 1 TO MAXDATA
 TMP_B4 := MAXDATA
 CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
END-SUBROUTINE
END

