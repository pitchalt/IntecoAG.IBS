* >Natural Source Header 000000 /*<RO>>
* :NatName CHECKCMD
* :UID NIMI_MS
* :Mode S
* :CP
* :Date 20011022
* :Time 1756330
* <Natural Source Header /*<<RO>
                      /************************************
                      /*   Âñå ñëîæíûå ñèñòåìû ñòðåì òñ
                      /*   ê íå ðàáî÷åìó ñîñòî íèþ.
                      /*                      ÒÍÀ
                      /************************************
DEFINE DATA
PARAMETER USING LCONVERT
LOCAL /**** Îïèñàíèå äîñòóïíûõ îïåðàòîðîâ è ôóíêöèé
1 NOPER(I1) CONST <6>
1 OPERATOR
 2 STR(A10/1:NOPER) CONST <'+','-','*','/','%','^'> /* NOT CHANGE, ADD ONLY
1 NFUNC(I1) CONST <1>
1 CFUNCTION(NFUNC)
 2 STR(A4) CONST <'ABS'>
 2 NPR(I1) CONST <  1>
1 NRAZDEL(I1) CONST <2>
1 RAZDEL
 2 STR(A1/1:NRAZDEL) CONST <'(',')'>
LOCAL /****
1 I(I4) /*
1 M(I4) /*
1 J(I4)
1 D(I4)
1 G(I4)
1 G1(I4)
1 K(I4)
1 N(I4)
1 S(I4)
1 E(I4)
1 Y(I4)
1 Z(I4)
1 X(I4)
1 X1(I4)
1 A(A253)
1 P(P15.6)
/************************************************************
1 CMDTMP(A100)
1 REDEFINE CMDTMP
  2 CMDTMP_A(A1/1:100)
/************************************************************
1 NPART(I4)
1 PART(A70/1:100)
1 PARTMAP(100)
 2 TYPE(I1)
 2 POINT(I1)
 2 DATA(P15.6)
/************************************************************
1 SUBPART
 2 START(I1)
 2 END(I1)
/************************************************************
1 STRLEN
 2 LENGTH(I4)
 2 STRING(A253)
/************************************************************
1 MAXVAR(I4) CONST <20>
1 NVAR(I4)
1 LISTVAR(MAXVAR)
 2 VARNAME(A10)
/************************************************************
1 MAXFUN(I4) CONST <5>
1 NFUN(I4)
1 LISTFUN(MAXFUN)
 2 FUNNAME(A10)
/************************************************************
END-DEFINE
RESET LCONVERT.ERROR
RESET LCONVERT.ERROR_CODE
RESET LCONVERT.VARCOUNT
RESET LCONVERT.VARIABLE(*)
RESET LCONVERT.FUNCOUNT
RESET LCONVERT.FUNCTION(*)
RESET LCONVERT.RESULT
RESET LCONVERT.COM_TURN(*)
IF LCONVERT.CMD EQ ' ' THEN
 INCLUDE CHECKERR '2'
END-IF
MOVE LEFT LCONVERT.CMD TO CMDTMP
/* ÏÐÎÂÅÐÊÀ ÏÀÐÍÎÑÒÈ ÑÊÎÁÎÊ
K := 0
S := 0
FOR I = 1 TO 100
 IF K < 0 THEN
  INCLUDE CHECKERR '9'
 END-IF
 DECIDE ON FIRST VALUE CMDTMP.CMDTMP_A(I)
  VALUE '('
   ADD 1 TO K
  VALUE ')'
   ADD -1 TO K
  ANY VALUES
   ADD 1 TO S
  NONE VALUES IGNORE
 END-DECIDE
END-FOR
DECIDE FOR FIRST CONDITION
 WHEN K > 0
  INCLUDE CHECKERR '4'
 WHEN K < 0
  INCLUDE CHECKERR '5'
 WHEN NONE IGNORE
END-DECIDE
/* ÐÀÇËÎÆÅÍÈÅ CMD
RESET A;
SEPARATE LCONVERT.CMD LEFT JUSTIFIED INTO PART(1:100) REMAINDER A
 WITH RETAINED  DELIMITERS GIVING NUMBER IN NPART;
IF A NE ' ' THEN
 INCLUDE CHECKERR '3'
END-IF
/* Î×ÈÑÒÈÒÜ ÑÏÈÑÎÊ ËÅÊÑÅÌ ÎÒ ÏÐÎÁÅËÎÂ
K := 0
FOR I = 1 TO NPART
 IF PART(I) EQ ' ' THEN
  S := I
  FOR N = I TO NPART
   IF PART(N) NE ' ' THEN ESCAPE BOTTOM END-IF
  END-FOR
  FOR J = N TO NPART
   PART(S) := PART(J)
   PART(J) := ' '
   ADD 1 TO S
  END-FOR
 END-IF
 IF PART(I) NE ' ' THEN
  ADD 1 TO K
 END-IF
END-FOR
NPART := K
IF NPART < 1 THEN
 INCLUDE CHECKERR '11'
END-IF
NVAR := 0
NFUN := 0
FOR I = 1 TO NPART
 IF PART(I) EQ OPERATOR.STR(1:NOPER) THEN /* OPERATOR
  EXAMINE OPERATOR.STR(1:NOPER) FOR PART(I) GIVING INDEX J
  K := I - 1
  IF K EQ 1 THRU NPART THEN
    IF PART(K) EQ '.' OR EQ ',' THEN
     INCLUDE CHECKERR '6'
    END-IF
    IF PARTMAP.TYPE(K) = 13 OR = 31 OR = 52
    OR PARTMAP.TYPE(K) = 21 THRU 26 THEN
     INCLUDE CHECKERR '6'
    END-IF
    IF PART(I) NE '-' THEN
     IF PARTMAP.TYPE(K) = 11 THEN
      INCLUDE CHECKERR '6'
     END-IF
    END-IF
    IF I EQ NPART THEN
     INCLUDE CHECKERR '6'
    END-IF
   ELSE
    IF K EQ 0 AND (PART(I) NE '+' AND PART(I) NE '-') THEN
     INCLUDE CHECKERR '6'
    END-IF
  END-IF
  PARTMAP.TYPE(I)  := 20 + J
  PARTMAP.POINT(I) := 0
  PARTMAP.DATA(I)  := 0
  ESCAPE TOP
 END-IF
 IF PART(I) EQ RAZDEL.STR(1:NRAZDEL) THEN  /* SKOBKI
  EXAMINE RAZDEL.STR(1:NRAZDEL) FOR PART(I) GIVING INDEX J
  K := I - 1
  IF NPART < 3 THEN
   INCLUDE CHECKERR '6'
  END-IF
  IF (I EQ NPART) AND PART(I) EQ '(' THEN
   INCLUDE CHECKERR '6'
  END-IF
  IF K EQ 1 THRU NPART THEN
   IF PART(K) EQ '.' THEN
    INCLUDE CHECKERR '6'
   END-IF
   IF PART(I) EQ '(' THEN
    IF PARTMAP.TYPE(K) = 1 OR = 12 OR = 51 THEN
     INCLUDE CHECKERR '6'
    END-IF
   END-IF
   IF PART(I) EQ ')' THEN
    IF PARTMAP.TYPE(K) = 31 OR = 52
    OR PARTMAP.TYPE(K) = 21 THRU 26 THEN
     INCLUDE CHECKERR '6'
    END-IF
    IF PARTMAP.TYPE(K) = 11 THEN
     K := K - 1
     IF K EQ 1 THRU NPART THEN
       IF PARTMAP.TYPE(K) NE 52 THEN
        INCLUDE CHECKERR '14'
       END-IF
      ELSE
       INCLUDE CHECKERR '14'
     END-IF
    END-IF
   END-IF
  END-IF
  PARTMAP.TYPE(I)  := 10 + J
  PARTMAP.POINT(I) := 0
  PARTMAP.DATA(I)  := 0
  ESCAPE TOP
 END-IF
 IF PART(I) EQ CFUNCTION.STR(1:NFUNC) THEN /* INTERNAL FUNCTION
  FOR J = 1 TO NFUNC
   IF PART(I) EQ CFUNCTION.STR(J) THEN ESCAPE BOTTOM END-IF
  END-FOR
  IF J EQ 1 THRU NFUNC THEN
   K := I - 1
   IF K EQ 1 THRU NPART THEN
    IF PARTMAP.TYPE(K) = 1 OR = 12 OR = 31
    OR PARTMAP.TYPE(K) = 51 THRU 52 THEN
     INCLUDE CHECKERR '6'
    END-IF
   END-IF
   K := I + 1
   IF K EQ 1 THRU NPART THEN
     IF PART(K) NE '(' THEN
      INCLUDE CHECKERR '6'
     END-IF
    ELSE
     INCLUDE CHECKERR '6'
   END-IF
  END-IF
  PARTMAP.TYPE(I)  := 30 + J
  PARTMAP.POINT(I) := 0
  PARTMAP.DATA(I)  := 0
  ESCAPE TOP
 END-IF
 IF PART(I) IS (I4) THEN /* ÍÀÉÒÈ ÊÎÍÑÒÀÍÒÛ È ÑÆÀÒÜ PART(*)
  N := 0
  STRLEN.STRING := PART(I)
  CALLNAT 'STRLEN' STRLEN
  IF STRLEN.LENGTH EQ 0 OR
     STRLEN.LENGTH > 15 THEN
   INCLUDE CHECKERR '7'
  END-IF
  K := I - 1
  IF K EQ 1 THRU NPART THEN
   IF PART(K) EQ ')' OR
      PART(K) EQ '.' THEN
    INCLUDE CHECKERR '6'
   END-IF
   IF PARTMAP.TYPE(K) = 1 OR = 12 OR = 31 OR = 51 OR = 52 THEN
    INCLUDE CHECKERR '6'
   END-IF
  END-IF
  MOVE LEFT PART(I) TO A
  K := I + 1
  IF K EQ 1 THRU NPART THEN
   IF PART(K) EQ '.' THEN
    ADD 1 TO N
    COMPRESS A '.' TO A LEAVING NO
    ADD 1 TO K
    IF K EQ 1 THRU NPART THEN
     IF PART(K) IS (I4) THEN
      STRLEN.STRING := PART(K)
      CALLNAT 'STRLEN' STRLEN
      IF STRLEN.LENGTH EQ 0 OR
         STRLEN.LENGTH > 6 THEN
       INCLUDE CHECKERR '7'
      END-IF
      ADD 1 TO N
      COMPRESS A PART(K) TO A LEAVING NO
     END-IF
    END-IF
   END-IF
  END-IF
  IF A IS (P15.6) THEN
   P := VAL(A)   ELSE
   INCLUDE CHECKERR '1'
  END-IF
  S := I
  IF N NE 0 THEN S := I + 1 END-IF
  PART(I) := ' '
  PARTMAP.TYPE(I)  := 1
  PARTMAP.POINT(I) := 0
  PARTMAP.DATA(I) := P
  PERFORM CHECKCMD_SXLOP /* S - START; N - COUNT; K,Y
  K := I + 1
  IF K EQ 1 THRU NPART THEN
   IF PART(K) EQ '(' OR EQ '.' THEN
    INCLUDE CHECKERR '6'
   END-IF
  END-IF
  ESCAPE TOP
 END-IF
/* ÂÛÁÐÀÒÜ ÏÅÐÅÌÅÍÍÛÅ È ÔÓÍÊÖÈÈ, ÏÐÎÂÅÐÈÒÜ ÏÐÀÂÈËÜÍÎÑÒÜ ÈÌÅÍ
IF PART(I) NE ',' THEN
 STRLEN.STRING := PART(I)
 CALLNAT 'STRLEN' STRLEN
 IF STRLEN.LENGTH EQ 0 OR
    STRLEN.LENGTH > 10 THEN
  INCLUDE CHECKERR '8'
 END-IF
 IF I < NPART THEN
  K := I + 1
  IF PART(K) EQ '(' THEN
   ADD 1 TO NFUN
   IF NFUN > MAXFUN THEN
    INCLUDE CHECKERR '10'
   END-IF
   K := I - 1
   IF K EQ 1 THRU NPART THEN
    IF PARTMAP.TYPE(K) = 1 OR = 12 OR = 31 OR = 51 OR = 52 THEN
     INCLUDE CHECKERR '6'
    END-IF
   END-IF
   J := NFUN - 1 ;
   FOR K = J TO 1 STEP -1
    MOVE BY NAME LISTFUN(K) TO LISTFUN(K + 1)
   END-FOR
   MOVE LEFT PART(I) TO LISTFUN.FUNNAME(1);
   FOR K = 1 TO NPART
    IF PARTMAP.TYPE(K) EQ 52 THEN
     ADD 1 TO PARTMAP.POINT(K)
    END-IF
   END-FOR
   PARTMAP.TYPE(I)  := 52
   PARTMAP.POINT(I) := 1
   PARTMAP.DATA(I)  := 0
   ESCAPE TOP
  END-IF
 END-IF
 K := I - 1
 IF K EQ 1 THRU NPART THEN
  IF PARTMAP.TYPE(K) = 1 OR = 12 OR = 31 OR = 51 OR = 52 THEN
   INCLUDE CHECKERR '6'
  END-IF
 END-IF
 IF NFUN > 1 THEN
  IF PART(I) EQ LISTFUN.FUNNAME(1:NFUN) THEN
   FOR K = 1 TO NFUN
    IF PART(I) EQ LISTFUN.FUNNAME(K) THEN
     PARTMAP.TYPE(I)  := 52
     PARTMAP.POINT(I) := K
     PARTMAP.DATA(I)  := 0
     K := -23
     ESCAPE BOTTOM
    END-IF
   END-FOR
   IF K EQ -23 THEN ESCAPE TOP END-IF
  END-IF
 END-IF
 IF PART(I) EQ LISTVAR.VARNAME(1:MAXVAR) THEN
   FOR K = 1 TO NVAR
    IF PART(I) EQ LISTVAR.VARNAME(K) THEN
     PARTMAP.TYPE(I)  := 51
     PARTMAP.POINT(I) := K
     PARTMAP.DATA(I)  := 0
     K := -23
     ESCAPE BOTTOM
    END-IF
   END-FOR
   IF K EQ -23 THEN ESCAPE TOP END-IF
  ELSE
   ADD 1 TO NVAR
   IF NVAR > MAXVAR THEN
    INCLUDE CHECKERR '10'
   END-IF
   MOVE LEFT PART(I) TO LISTVAR.VARNAME(NVAR);
   PARTMAP.TYPE(I)  := 51
   PARTMAP.POINT(I) := NVAR
   PARTMAP.DATA(I)  := 0
 END-IF
END-IF
END-FOR
/* ÎÁÐÀÁÎÒÀÒÜ ÏÀÐÀÌÅÒÐÛ ÏÎËÜÇÎÂÀÒÅËÜÑÊÈÕ ÔÓÍÊÖÈÉ
IF NFUN > 0 THEN
 LCONVERT.FUNCOUNT := NFUN
 LCONVERT.FUNNAME(1:NFUN) := LISTFUN.FUNNAME(1:NFUN)
 FOR I = 1 TO NFUN
  FOR J = 1 TO NPART
   IF PARTMAP.TYPE(J) EQ 52 AND
      PARTMAP.POINT(J) EQ I THEN
    K := J + 1
    IF K EQ 1 THRU NPART
     IF PARTMAP.TYPE(K) EQ 11 THEN
      S := K /* START
      N := 0 /* ÄËÈÍÀ ÎÏÐÅÄÅËÅÍÈß
      M := 0 /* ÊÎË-ÂÎ ÏÀÐÀÌÅÒÐÎÂ
      E := S /* END
      Y := 0
      G := S - 1 ;
      G1 := S ;
      FOR D = S TO NPART
       IF PART(D) EQ ',' THEN
        ADD 1 TO M
        ADD 1 TO G1
        IF (G - G1 + 1) > 40 THEN
         INCLUDE CHECKERR '13'
        END-IF
        X := 1
        LCONVERT.FUNPVARCOUNT(I,M) := 0
        FOR Z = G1 TO G /* COPY TO LCONVERT
         LCONVERT.FUNVARTYPE(I,M,X)  := PARTMAP.TYPE(Z)
         LCONVERT.FUNVARPOINT(I,M,X) := PARTMAP.POINT(Z)
         LCONVERT.FUNVARDATA(I,M,X)  := PARTMAP.DATA(Z)
         IF PARTMAP.TYPE(Z) EQ 51 THEN
          IF PARTMAP.POINT(Z) EQ LCONVERT.FUNPVAR(I,M,*) THEN IGNORE
           ELSE
            ADD 1 TO LCONVERT.FUNPVARCOUNT(I,M)
            X1 := LCONVERT.FUNPVARCOUNT(I,M)
            LCONVERT.FUNPVAR(I,M,X1) := PARTMAP.POINT(Z)
          END-IF
         END-IF
         ADD 1 TO X
        END-FOR
        G := D - 1;
        G1 := D;
       END-IF
       ADD 1 TO N
       ADD 1 TO G
       E := D
       IF Y < 0 THEN
        INCLUDE CHECKERR '6'
       END-IF
       DECIDE ON FIRST VALUE PARTMAP.TYPE(D)
        VALUE 11
         ADD 1 TO Y
        VALUE 12
         ADD -1 TO Y
        NONE VALUE IGNORE
       END-DECIDE
       IF Y EQ 0 THEN ESCAPE BOTTOM END-IF
      END-FOR
      IF (G - G1) > 1 THEN
        ADD 1 TO M
        ADD 1 TO G1
        ADD -1 TO G
        IF (G - G1 + 1) > 40 THEN
         INCLUDE CHECKERR '13'
        END-IF
        X := 1
        LCONVERT.FUNPVARCOUNT(I,M) := 0
        FOR Z = G1 TO G /* COPY TO LCONVERT
         LCONVERT.FUNVARTYPE(I,M,X)  := PARTMAP.TYPE(Z)
         LCONVERT.FUNVARPOINT(I,M,X) := PARTMAP.POINT(Z)
         LCONVERT.FUNVARDATA(I,M,X)  := PARTMAP.DATA(Z)
         IF PARTMAP.TYPE(Z) EQ 51 THEN
          IF PARTMAP.POINT(Z) EQ LCONVERT.FUNPVAR(I,M,*) THEN IGNORE
           ELSE
            ADD 1 TO LCONVERT.FUNPVARCOUNT(I,M)
            X1 := LCONVERT.FUNPVARCOUNT(I,M)
            LCONVERT.FUNPVAR(I,M,X1) := PARTMAP.POINT(Z)
          END-IF
         END-IF
         ADD 1 TO X
        END-FOR
        G := 0
        G1 := D
      END-IF
      IF Y NE 0 OR
         N EQ 0 THEN
        INCLUDE CHECKERR '6'
       ELSE
        LCONVERT.FUNPARCOUNT(I) := M
        PERFORM CHECKCMD_SXLOP;
      END-IF
     END-IF
    END-IF
   END-IF
  END-FOR
 END-FOR
END-IF
IF NPART > 50 THEN
 INCLUDE CHECKERR '3'
END-IF
FOR I = 1 TO NPART
 IF PARTMAP.TYPE(I) EQ 0 THEN
  INCLUDE CHECKERR '12'
 END-IF
END-FOR
IF NVAR > 0 THEN
 LCONVERT.VARCOUNT := NVAR
 LCONVERT.VARNAME(1:NVAR) := LISTVAR.VARNAME(1:NVAR)
END-IF
IF NPART > 0 THEN
 MOVE BY NAME PARTMAP(1:NPART) TO LCONVERT.COM_TURN(1:NPART)
END-IF
LCONVERT.ERROR := FALSE
RESET LCONVERT.ERROR_CODE
ESCAPE ROUTINE
DEFINE SUBROUTINE CHECKCMD_SXLOP
 /* S - START; N - COUNT; K,Y
IF N > 0 THEN
 Y := S + N
 K := NPART - N
 IF K >= S THEN
  MOVE PART(Y:NPART) TO PART(S:K)
  MOVE BY NAME PARTMAP(Y:NPART) TO PARTMAP(S:K)
 END-IF
 ADD 1 TO K
 RESET PART(K:NPART)
 RESET PARTMAP(K:NPART)
 NPART := NPART - N
END-IF
END-SUBROUTINE
ON ERROR
 INCLUDE CHECKERR '1'
 ESCAPE ROUTINE
END-ERROR
END
