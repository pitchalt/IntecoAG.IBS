* >Natural Source Header 000000 /*<RO>>
* :NatName TT2
* :UID AERO
* :Mode S
* :CP
* :Date 20041208
* :Time 1347330
* <Natural Source Header /*<<RO>
/**************************************
/*    ПОДРОГРАММА ВЕДЕНИЯ
/*    КОДИФИКАТОРА ВНЕШНИХ ОРГАНИЗАЦИЙ
/*    ИСПОЛЬЗУЕТСЯ СТЕК N-21         V.1
/**************************************
DEFINE DATA
 PARAMETER USING PRMNAVI
 LOCAL  USING PRMNAVBN
 LOCAL  USING PRMNAVVO
 LOCAL  USING PRMHELP
 LOCAL
1 OG_NM_G(A60)
1 SYS_NM_G(A60)
1 FUN_NM_G(A60)
1 REG_NM_G(A40)
/**************************************
1 IBS-KVO-FILE VIEW OF IBS-SYS-FILE
  2 OG-ID
  2 VO-ID
  2 NM-OG /* NFVT
  2 AD-OG /* ADDRES
  2 NN-ID /* ИНН
  2 RE-OG /*
  2 NA-F
  2 VO-DI(1:5)
  2 NM-PL
  2 UP-DT
  2 UP-PG
  2 UP-ID
  2 UP-US
1 BANK-VO VIEW OF IBS-SYS-FILE
  2 OG-ID
  2 VO-ID
  2 C*PR-ID /* СЧЕТЧИК К-ВА БАНКОВ
  2 C*RS-OG(1:15) /* СЧЕТЧИК К-ВА Р/СЧЕТОВ
  2 C*RS-VA(1:15)
  2 PR-ID(1:15)
    3 BN-OG
    3 RS-OG(1:15)
    3 RS-VA(1:15)
  2 NN-ID /* ИНН
  2 UP-DT
  2 UP-PG
  2 UP-ID
  2 UP-US
1 IBS-BANK VIEW OF IBS-SYS-FILE
 2 OG-ID /* КОД ОРГАНИЗАЦИИ
 2 BN-ID /* КОД БАНКА
 2 NM-BN /* ИМЯ БАНКА
 2 AD-BN /* АДРЕС БАНКА
 2 PR-ID
  3 KR-OG(1:1) /* КОРР. СЧЕТ
 2 UT-ID /* УЧАСТНИК
 2 MF-ID /* БИК БАНКА
 2 MK-ID
 2 AD-MK /* АДРЕС КОРР. СЧЕТА
 2 MF-SH
 2 MR-SH
 2 NA-F /* АЛЬТЕРН. ИМЯ
 2 UP-DT /* *DATX
 2 UP-PG
 2 UP-ID /* *USER
 2 UP-US
1 IBS-NAOR-FILE VIEW OF IBS-SYS-FILE
 2 OG-ID
 2 NM-OG /* НАЗВАНИЕ
1 IBS-KK-FILE VIEW OF IBS-SYS-FILE
 2 OG-ID
 2 KK-F
 2 KD-F
 2 UP-DT
 2 UP-PG
 2 UP-ID
 2 UP-US
/**************************************
1 KEYNAOR(B10)
1 REDEFINE KEYNAOR
  2 KEYOG(N5)
  2 KEYKD(N5)
1 KEYVO1(B10)
1 REDEFINE KEYVO1
  2 KEYOG(N5)
  2 KEYVO(N5)
1 KEYVO2(B10)
1 REDEFINE KEYVO2
  2 KEYOG(N5)
  2 KEYVO(N5)
1 KEYVO3(B10)
1 REDEFINE KEYVO3
  2 KEYOG(N5)
  2 KEYVO(N5)
1 KEYBN1(B13)
1 REDEFINE KEYBN1
  2 KEYOG(N5)
  2 KEYBN(N8)
1 KEYBIC(A20)
1 REDEFINE KEYBIC
  2 KEYOG(N5)
  2 KEYBN(A15)
/**************************************
1 NUMSTACK(B4) CONST <H'00000015'>
1 LSTACK(B4)   CONST <H'00000129'>
1 COLSTACK(B4) INIT  <H'00000000'>
1 MAXDATA(N8) INIT <0>
1 DSTACK(A1/1:297)
1 REDEFINE DSTACK
 2 ISN_REC(P11)
 2 STATUS(A3)
 2 VO_ID(N5)
 2 VO_INN(A15)
 2 VO_NAME(A70)
 2 VO_ADDR(A70)
 2 REGION(N3)
 2 KPP(A10)
 2 DOP_INFO
   3 DOGOVOR(A40)
   3 SHORT_INFO(A15/1:5)
1 LMP(B4)
/**************************************
1 STARTLINE(N8)
1 SCREEN(5)
 2 NUM_ST(P10)
 2 STATUS(A3)
 2 VO_ID(N5)
 2 VO_INN(A15)
 2 VO_NAME(A70)
 2 VO_ADDR(A70)
 2 REGION(N3)
 2 KPP(A10)
 2 DOP_INFO
   3 DOGOVOR(A40)
   3 SHORT_INFO(A15/1:5)
 2 VO_DOPTEXT(A42)
/**************************************
1 WR-REC(B4) CONST <H'00000001'> /* ПРИЗНАК ЗАПИСИ В СТЕКА
1 RD-REC(B4) CONST <H'00000000'> /* ПРИЗНАК ЧТЕНИЯ ИЗ СТЕКА
/**************************************
1 TMP_B4(B4)
1 I(N5)
1 K(N5)
1 J(N5)
1 N(N5)
1 POSIT(I4)
1 CURLINE(N7)
1 TITLEALT(A60)
1 TMP_ISN(P11)
1 MESSAGE(A70)
1 KODIF_VO_TMP
  2 VO_ID(N5) /* КОД ВН.ОРГ. / ВОЗВРАТ
  2 VO_INN(A15) /* ИНН ОРГАНИЗ. / ВОЗВРАТ
  2 VO_NAME(A70) /* ИМЯ ВН. ОРГАНИЗАЦИИ / ВОЗВР
  2 VO_ADDR(A70) /* адрес ВН. ОРГАНИЗАЦИИ / ВОЗ
  2 VO_RASCH(A20) /* РАСЧЕТНЫЙ СЧЕТ /ВОЗВРАТ
  2 VO_VAL(A3) /* ВАЛЮТА / ВОЗВРАТ
  2 VO_BNK(N8) /* КОД БАНКА / ВОЗВРАТ
  2 VO_BIK(A15) /* БИК БАНКА / ВОЗВРАТ
  2 KORR_SCH(A20) /* КОРР. СЧЕТ БАНКА / ВОЗВРАТ
  2 NAME_BN(A70) /* ИМЯ БАНКА / ВОЗВРАТ
  2 ADDR_BN(A70) /* адрес БАНКА / ВОЗВРАТ
  2 RES_VO(A1) /* РЕЗУЛЬТАТ / E - ОШИБКА
1 SCRBNK
 2 POST(I4)
 2 VO_ISN(P11)
 2 VO_NAME(A70)
 2 LINESCH(N7)
 2 BN_BIC(A15)
 2 KR_OG(A20)
 2 BN_ADDR(A70)
 2 REDEFINE BN_ADDR
   3 BN_ADDR_AR(A1/1:70)
 2 REDEFINE BN_ADDR
   3 BN_ADDR_1(A40)
   3 BN_ADDR_2(A30)
 2 BN_NAME(A70)
 2 REDEFINE BN_NAME
   3 BN_NAME_AR(A1/1:70)
 2 REDEFINE BN_NAME
   3 BN_NAME_1(A40)
   3 BN_NAME_2(A30)
 2 SCRSCH(1:15)
   3 BN_ID(N8)
   3 RS_OG(A20/1:15)
   3 VA_OG(A3/1:15)
1 CD(I2/1:4)
1 CODERR(N5)
1 TMPTMP
 2 RS_OG(A20/1:15)
 2 VA_OG(A3/1:15)
1 RTY(N3)
1 INN(A15)
1 REDEFINE INN
2 INN10(A10)
2 INN5(A5)
1 RSS(A20)
1 REDEFINE RSS
  2 #RSS(A1/1:20)
1 SCRVO(N15)
END-DEFINE
DEFINE WINDOW DOP_INFO
       SIZE 9*57
       BASE 8/7
       TITLE TITLEALT
       CONTROL SCREEN
       FRAMED ON
DEFINE WINDOW RAS_SCH
       SIZE 17*78
       BASE 3/1
       TITLE TITLEALT
       CONTROL SCREEN
       FRAMED ON
/* RESET KODIF_VO_TMP
 KODIF_VO.RES_VO := 'N' KODIF_VO.OG_ID_G := PRMNAV.OG-IDENT-G
 IF KODIF_VO.OG_ID_G <= 0 THEN
  RESET KODIF_VO ; KODIF_VO.RES_VO := 'E' ESCAPE ROUTINE END-IF
 KEYNAOR.KEYOG := KEYNAOR.KEYKD := KODIF_VO.OG_ID_G
 FIND (1) IBS-NAOR-FILE OG-KD = KEYNAOR
  IF NO RECORDS FOUND
   RESET KODIF_VO ; KODIF_VO.RES_VO := 'E' ESCAPE ROUTINE
  END-NOREC
  OG_NM_G := IBS-NAOR-FILE.NM-OG
 END-FIND
 CALLNAT 'CENTER60' OG_NM_G
REPEAT
 FUN_NM_G := '*** Ведение кодификатора внешних организаций ***'
 CALLNAT 'CENTER60' FUN_NM_G
 REG_NM_G := '*** Составление запроса ***'
 CALLNAT 'CENTER40' REG_NM_G
 REPEAT
  SET KEY ENTR PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
  INPUT USING MAP 'SNAVVOM1'
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1'
    IGNORE
   VALUE 'PF3'
    RESET KODIF_VO ; KODIF_VO.RES_VO := 'N' ESCAPE ROUTINE
   VALUE 'PF12'
    RESET KODIF_VO.VO_ID
          KODIF_VO.VO_INN
          KODIF_VO.VO_NAME
          KODIF_VO.VO_ADDR
          KODIF_VO.VO_RASCH
          KODIF_VO.VO_BNK
          KODIF_VO.VO_BIK ;
   VALUE 'ENTR'
    IF KODIF_VO.VO_BIK NE ' ' THEN
     KEYBIC.KEYOG := KODIF_VO.OG_ID_G
     KEYBIC.KEYBN := KODIF_VO.VO_BIK
     FIND (1) IBS-BANK OG-BIC EQ KEYBIC
      IF NO RECORD FOUND
       REINPUT FULL WITH TEXT 'Не найден банк с таким БИКом.'(CD=RE)
        MARK *KODIF_VO.VO_BIK ALARM
      END-NOREC
      KODIF_VO.VO_BNK := IBS-BANK.BN-ID
     END-FIND  END-IF
    ESCAPE BOTTOM
   NONE VALUE IGNORE
  END-DECIDE
 END-REPEAT
 PERFORM LOAD_DATA
 IF MAXDATA EQ 0 THEN
  COLSTACK := 500 ;
  CALL 'GTSX' LSTACK COLSTACK NUMSTACK ;
  CALL 'NULX' ' ' NUMSTACK ; END-IF
 STARTLINE := 1
  REPEAT
  PERFORM LOADSCREEN
  SET KEY ENTR PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
  INPUT MARK POSIT USING MAP 'SNAVVOM2'
  POSIT := *CURS-FIELD
  CURLINE := 0
  FOR I = 1 TO 5
   IF POSIT EQ POS(SCREEN.VO_ID(I)) OR
      POSIT EQ POS(SCREEN.VO_INN(I)) OR
      POSIT EQ POS(SCREEN.VO_NAME(I)) OR
      POSIT EQ POS(SCREEN.VO_ADDR(I)) OR
      POSIT EQ POS(SCREEN.KPP(I)) OR
      POSIT EQ POS(SCREEN.REGION(I)) THEN
    CURLINE := I
    ESCAPE BOTTOM                END-IF
  END-FOR
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'ENTR'
    PERFORM CHECK_SCREEN
    IF CURLINE EQ 1 THRU 5 THEN
     RESET KODIF_VO_TMP;
     KODIF_VO_TMP.RES_VO  := 'Y'
     KODIF_VO_TMP.VO_ID   := SCREEN.VO_ID(CURLINE)
     KODIF_VO_TMP.VO_INN  := SCREEN.VO_INN(CURLINE)
     KODIF_VO_TMP.VO_NAME := SCREEN.VO_NAME(CURLINE)
     KODIF_VO_TMP.VO_ADDR := SCREEN.VO_ADDR(CURLINE)
                           END-IF
   VALUE 'PF1'
    IGNORE
   VALUE 'PF2'
    PERFORM CHECK_SCREEN
    IF CURLINE EQ 1 THRU 5  THEN
     IF SCREEN.VO_ID(CURLINE) NE 0 THEN
      SET CONTROL 'N'
      INPUT NO ERASE (IP=OFF)
      001T *DATX (AD=DLOFHT) 071T *LIBRARY-ID (AD=DLOFHT)/
      001T *TIMX (AD=DLOFHT) 071T *USER (AD=DLOFHT ) /
      //////////////////
1T'ВВОД---ПФ1---ПФ2---ПФ3---ПФ4---ПФ5---ПФ6---ПФ7---ПФ8---ПФ9---ПФ10--ПФ11--ПФ12-' /
1T'                   Вых                                                  Очист '(I);
     REPEAT
      TITLEALT := SCREEN.VO_NAME(CURLINE)
      FOR I = 1 TO 5
       IF SUBSTRING(SCREEN.SHORT_INFO(CURLINE,I),1,1) EQ '.' THEN
        MOVE ' ' TO SUBSTRING(SCREEN.SHORT_INFO(CURLINE,I),1,1) END-IF
      END-FOR
      SET WINDOW 'DOP_INFO'
      INPUT USING MAP 'SNAVVOM3'
      SET WINDOW OFF
      IF SCREEN.SHORT_INFO(CURLINE,1) NE ' ' OR
         SCREEN.SHORT_INFO(CURLINE,2) NE ' ' OR
         SCREEN.SHORT_INFO(CURLINE,3) NE ' ' OR
         SCREEN.SHORT_INFO(CURLINE,4) NE ' ' OR
         SCREEN.SHORT_INFO(CURLINE,5) NE ' ' THEN
       FOR I = 1 TO 5
        IF SCREEN.SHORT_INFO(CURLINE,I) EQ ' ' THEN
          SCREEN.SHORT_INFO(CURLINE,I) := '.' END-IF
       END-FOR                               END-IF
      DECIDE ON FIRST VALUE *PF-KEY
       VALUE 'PF3'
        ESCAPE BOTTOM
       VALUE 'PF12'
        RESET SCREEN.DOGOVOR(CURLINE) SCREEN.SHORT_INFO(CURLINE,1:5)
       NONE VALUE IGNORE
      END-DECIDE
     END-REPEAT
                               END-IF END-IF
    PERFORM CHECK_SCREEN
   VALUE 'PF3'
    IF KODIF_VO_TMP.RES_VO EQ 'Y' THEN
     KODIF_VO.VO_ID    := KODIF_VO_TMP.VO_ID
     KODIF_VO.VO_INN   := KODIF_VO_TMP.VO_INN
     KODIF_VO.VO_NAME  := KODIF_VO_TMP.VO_NAME
     KODIF_VO.VO_ADDR  := KODIF_VO_TMP.VO_ADDR
     KODIF_VO.VO_RASCH := KODIF_VO_TMP.VO_RASCH
     KODIF_VO.VO_VAL   := KODIF_VO_TMP.VO_VAL
     KODIF_VO.VO_BNK   := KODIF_VO_TMP.VO_BNK
     KODIF_VO.VO_BIK   := KODIF_VO_TMP.VO_BIK
     KODIF_VO.KORR_SCH := KODIF_VO_TMP.KORR_SCH
     KODIF_VO.NAME_BN  := KODIF_VO_TMP.NAME_BN
     KODIF_VO.ADDR_BN  := KODIF_VO_TMP.ADDR_BN
     KODIF_VO.RES_VO := 'Y'
    ELSE
     KODIF_VO.RES_VO := 'N'
    END-IF
    CALL 'FRSX' NUMSTACK ;
    ESCAPE ROUTINE
   VALUE 'PF4'
    PERFORM CHECK_SCREEN
  FIND IBS-KK-FILE OG-ID = KODIF_VO.OG_ID_G AND KK-F = 'MO'
   IF NO RECORD FOUND
    ASSIGN IBS-KK-FILE.OG-ID = KODIF_VO.OG_ID_G
    ASSIGN IBS-KK-FILE.KK-F  = 'MO'
    ASSIGN IBS-KK-FILE.KD-F  = 0
   END-NOREC
   ADD 1 TO IBS-KK-FILE.KD-F
   ADD 1 TO MAXDATA
   IF MAXDATA > COLSTACK THEN
    ADD -1 TO MAXDATA
    REINPUT FULL WITH TEXT
   'Не хватает пам ти. Сохранитесь и продолжайте работу.'(CD=RE)
                   ALARM END-IF
   STARTLINE := MAXDATA
   TMP_B4 := MAXDATA
   DSTACK.ISN_REC  := 0
   DSTACK.STATUS   := 'NEW'
   DSTACK.VO_ID    := IBS-KK-FILE.KD-F
   DSTACK.VO_INN   := ' '
   DSTACK.VO_NAME  := ' '
   DSTACK.VO_ADDR  := ' '
   DSTACK.KPP      := ' '
   DSTACK.REGION   := 0
   RESET DSTACK.DOP_INFO
   CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
   IF *NUMBER = 0
     THEN STORE IBS-KK-FILE
     ELSE UPDATE
   END-IF
   END OF TRANSACTION
  END-FIND
   VALUE 'PF5'
    PERFORM CHECK_SCREEN
    FOR I = 1 TO MAXDATA
     TMP_B4 := I
     CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
     DECIDE ON FIRST VALUE DSTACK.STATUS
      VALUE 'UPD'
L1.    GET IBS-KVO-FILE DSTACK.ISN_REC
        IBS-KVO-FILE.OG-ID := KODIF_VO.OG_ID_G
        IBS-KVO-FILE.VO-ID := DSTACK.VO_ID
        IBS-KVO-FILE.NN-ID := DSTACK.VO_INN
        IBS-KVO-FILE.AD-OG := DSTACK.VO_ADDR
        IBS-KVO-FILE.NM-OG := DSTACK.VO_NAME
        IBS-KVO-FILE.NA-F  := DSTACK.DOGOVOR
        IBS-KVO-FILE.NM-PL := DSTACK.KPP
        IBS-KVO-FILE.VO-DI(1:5) := DSTACK.SHORT_INFO(1:5)
        IBS-KVO-FILE.RE-OG := DSTACK.REGION
        IBS-KVO-FILE.UP-DT := *DATX
        IBS-KVO-FILE.UP-PG := *PROGRAM
        IBS-KVO-FILE.UP-ID := *INIT-ID
        IBS-KVO-FILE.UP-US := *INIT-USER
       UPDATE(L1.)
      VALUE 'NEW'
        IBS-KVO-FILE.OG-ID := KODIF_VO.OG_ID_G
        IBS-KVO-FILE.VO-ID := DSTACK.VO_ID
        IBS-KVO-FILE.NN-ID := DSTACK.VO_INN
        IBS-KVO-FILE.AD-OG := DSTACK.VO_ADDR
        IBS-KVO-FILE.NM-OG := DSTACK.VO_NAME
        IBS-KVO-FILE.NA-F  := DSTACK.DOGOVOR
        IBS-KVO-FILE.NM-PL := DSTACK.KPP
        IBS-KVO-FILE.VO-DI(1:5) := DSTACK.SHORT_INFO(1:5)
        IBS-KVO-FILE.RE-OG := DSTACK.REGION
        IBS-KVO-FILE.UP-DT := *DATX
        IBS-KVO-FILE.UP-PG := *PROGRAM
        IBS-KVO-FILE.UP-ID := *INIT-ID
        IBS-KVO-FILE.UP-US := *INIT-USER
        STORE IBS-KVO-FILE
      VALUE 'DEL'
L2.    GET IBS-KVO-FILE DSTACK.ISN_REC
       DELETE(L2.)
      NONE VALUE IGNORE
     END-DECIDE
     END OF TRANSACTION
    END-FOR
    CALL 'FRSX' NUMSTACK ;
    ESCAPE BOTTOM
   VALUE 'PF11'
    PERFORM CHECK_SCREEN
    IF CURLINE EQ 1 THRU 5 THEN
     IF SCREEN.VO_ID(CURLINE) NE 0 THEN
      PERFORM LOADSCREEN ;
      IF SCREEN.STATUS(CURLINE) EQ 'NEW' THEN
       SCREEN.STATUS(CURLINE) := 'OLD'
       IBS-KVO-FILE.OG-ID := KODIF_VO.OG_ID_G
       IBS-KVO-FILE.VO-ID := SCREEN.VO_ID(CURLINE)
       IBS-KVO-FILE.NN-ID := SCREEN.VO_INN(CURLINE)
       IBS-KVO-FILE.AD-OG := SCREEN.VO_ADDR(CURLINE)
       IBS-KVO-FILE.NM-OG := SCREEN.VO_NAME(CURLINE)
       IBS-KVO-FILE.NA-F  := SCREEN.DOGOVOR(CURLINE)
       IBS-KVO-FILE.VO-DI(1:5) := SCREEN.SHORT_INFO(CURLINE,1:5)
       IBS-KVO-FILE.RE-OG := SCREEN.REGION(CURLINE)
       IBS-KVO-FILE.UP-DT := *DATX
       IBS-KVO-FILE.UP-PG := *PROGRAM
       IBS-KVO-FILE.UP-ID := *INIT-ID
       IBS-KVO-FILE.UP-US := *INIT-USER
L02.   STORE IBS-KVO-FILE
       END OF TRANSACTION
       DSTACK.ISN_REC         := *ISN(L02.)
       DSTACK.STATUS          := 'OLD'
       DSTACK.VO_ID           := SCREEN.VO_ID(CURLINE)
       DSTACK.VO_INN          := SCREEN.VO_INN(CURLINE)
       DSTACK.REGION          := SCREEN.REGION(CURLINE)
       DSTACK.VO_NAME         := SCREEN.VO_NAME(CURLINE)
       DSTACK.VO_ADDR         := SCREEN.VO_ADDR(CURLINE)
       DSTACK.DOGOVOR         := SCREEN.DOGOVOR(CURLINE)
       DSTACK.KPP             := SCREEN.KPP(CURLINE)
       DSTACK.SHORT_INFO(1:5) := SCREEN.SHORT_INFO(CURLINE,1:5)
       TMP_B4 := SCREEN.NUM_ST(CURLINE)
       CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
                                         END-IF
      IF SCREEN.STATUS(CURLINE) EQ 'OLD' OR EQ 'UPD' THEN
       TMP_B4 := SCREEN.NUM_ST(CURLINE)
       CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
       RESET SCRBNK
       SCRBNK.VO_ISN := DSTACK.ISN_REC
       SCRBNK.VO_NAME := SCREEN.VO_NAME(CURLINE)
       TITLEALT := SCREEN.VO_NAME(CURLINE)
L01.   GET BANK-VO SCRBNK.VO_ISN ;
       I := BANK-VO.C*PR-ID
       FOR J = 1 TO I
        SCRBNK.BN_ID(J) := BANK-VO.BN-OG(J)
        K := C*RS-OG(J)
        FOR N = 1 TO K
         SCRBNK.RS_OG(J,N) := BANK-VO.RS-OG(J,N)
        END-FOR
        K := C*RS-VA(J)
        FOR N = 1 TO K
         SCRBNK.VA_OG(J,N) := BANK-VO.RS-VA(J,N)
        END-FOR
       END-FOR
       SET CONTROL 'N'
       INPUT NO ERASE (IP=OFF)
       001T *DATX (AD=DLOFHT) 071T *LIBRARY-ID (AD=DLOFHT)/
       001T *TIMX (AD=DLOFHT) 071T *USER (AD=DLOFHT ) /
       //////////////////
1T'ВВОД---ПФ1---ПФ2---ПФ3---ПФ4---ПФ5---ПФ6---ПФ7---ПФ8---ПФ9---ПФ10--ПФ11--ПФ12-' /
1T'Отм                Вых         Зап         Наз   Впр              Выбор Очист '(I);
       SCRBNK.LINESCH := 1
       REPEAT
        IF CODERR EQ 0 THEN
        IF SCRBNK.BN_ID(LINESCH) NE 0 THEN
         KEYBN1.KEYOG := KODIF_VO.OG_ID_G ;
         KEYBN1.KEYBN := SCRBNK.BN_ID(LINESCH);
         FIND (1) IBS-BANK OG-BN EQ KEYBN1
          IF NO RECORD FOUND
           RESET SCRBNK.BN_BIC SCRBNK.KR_OG SCRBNK.BN_ADDR SCRBNK.BN_NAME
                 SCRBNK.RS_OG(LINESCH,1:15) SCRBNK.VA_OG(LINESCH,1:15)
           MESSAGE := 'Такой банк не зарегистрирован.'
           ESCAPE BOTTOM
          END-NOREC
          SCRBNK.BN_BIC  := IBS-BANK.MF-ID
          SCRBNK.KR_OG   := IBS-BANK.KR-OG(1)
          SCRBNK.BN_ADDR := IBS-BANK.AD-BN
          SCRBNK.BN_NAME := IBS-BANK.NM-BN
          CD(1) := 70 CD(2) := 2 CD(3) := 40 CD(4) := 30
          CALLNAT 'PERENOS' CD(1:4) BN_NAME_AR(1:70)
          CALLNAT 'PERENOS' CD(1:4) BN_ADDR_AR(1:70)
         END-FIND                     ELSE
         RESET SCRBNK.BN_BIC SCRBNK.KR_OG SCRBNK.BN_ADDR SCRBNK.BN_NAME
               SCRBNK.RS_OG(LINESCH,1:15) SCRBNK.VA_OG(LINESCH,1:15)
                                      END-IF
                       ELSE
         DECIDE ON FIRST VALUE CODERR
          VALUE 0
           MESSAGE := ' '
          VALUE 1
           MESSAGE := 'Такой банк не зарегистрирован.'
           POST := POS(SCRBNK.BN_BIC)
          VALUE 2
           MESSAGE := 'Найдено несколько банков с одинаковым БИК.'
           POST := POS(SCRBNK.BN_BIC)
          VALUE 3
           MESSAGE := 'Задайте хот  бы один рассчетный счет.'
           POST := POS(SCRBNK.RS_OG(LINESCH,1))
          VALUE 4
           MESSAGE := 'Рассчетный счет не 20 знаков'
           POST := POS(SCRBNK.RS_OG(LINESCH,1))
          NONE VALUE
          COMPRESS 'Ошибка номер ' CODERR TO MESSAGE
         END-DECIDE
                       END-IF
        SET WINDOW 'RAS_SCH'
        SET KEY ENTR PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
        INPUT WITH TEXT MESSAGE(CD=RE) MARK POST USING MAP 'SNAVVOM4'
        RESET MESSAGE
        POST := *CURS-FIELD
        RTY := 0
        FOR K = 1 TO 15
         IF POST EQ POS(SCRBNK.RS_OG(LINESCH,K)) OR
                 EQ POS(SCRBNK.VA_OG(LINESCH,K)) THEN
                 RTY := K END-IF
        END-FOR
        SET WINDOW OFF
        DECIDE ON FIRST VALUE *PF-KEY
         VALUE 'ENTR'
           PERFORM CHECK_SCH
           IF CODERR NE 0 THEN ESCAPE TOP END-IF
           IF RTY EQ 1 THRU 15 THEN
           KODIF_VO_TMP.VO_ID    := SCREEN.VO_ID(CURLINE)
           KODIF_VO_TMP.VO_INN   := SCREEN.VO_INN(CURLINE)
           KODIF_VO_TMP.VO_NAME  := SCREEN.VO_NAME(CURLINE)
           KODIF_VO_TMP.VO_ADDR  := SCREEN.VO_ADDR(CURLINE)
           KODIF_VO_TMP.VO_RASCH := SCRBNK.RS_OG(LINESCH,RTY)
           KODIF_VO_TMP.VO_VAL   := SCRBNK.VA_OG(LINESCH,RTY)
           KODIF_VO_TMP.VO_BNK   := SCRBNK.BN_ID(LINESCH)
           KODIF_VO_TMP.VO_BIK   := SCRBNK.BN_BIC
           KODIF_VO_TMP.KORR_SCH := SCRBNK.KR_OG
           KODIF_VO_TMP.NAME_BN  := SCRBNK.BN_ADDR
           KODIF_VO_TMP.ADDR_BN  := SCRBNK.BN_NAME
           KODIF_VO_TMP.RES_VO := 'Y'
                              END-IF
         VALUE 'PF5'
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
L04.   GET BANK-VO SCRBNK.VO_ISN ;
          RESET BANK-VO.BN-OG(*) BANK-VO.RS-OG(*,*) BANK-VO.RS-VA(*,*);
          FOR I = 1 TO 15
           BANK-VO.BN-OG(I) := SCRBNK.BN_ID(I)
           FOR K = 1 TO 15
            BANK-VO.RS-OG(I,K) := SCRBNK.RS_OG(I,K)
            BANK-VO.RS-VA(I,K) := SCRBNK.VA_OG(I,K)
           END-FOR
          END-FOR
          UPDATE (L04.)
          END OF TRANSACTION
         VALUE 'PF7'
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
          ADD -1 TO LINESCH
          IF LINESCH < 1 THEN LINESCH := 1 END-IF
         VALUE 'PF8'
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
          ADD 1 TO LINESCH
          IF LINESCH > 15 THEN LINESCH := 15 END-IF
         VALUE 'PF11'
          IF POST EQ POS(SCRBNK.BN_BIC) THEN
           RESET KODIF_BN ;
           KODIF_BN.OG_ID_G := KODIF_VO.OG_ID_G
           KODIF_BN.BN_ID   := SCRBNK.BN_ID(LINESCH)
           KODIF_BN.BN_BIC  := SCRBNK.BN_BIC
           CALLNAT 'SYSNAVBN' KODIF_BN ;
           IF KODIF_BN.RES_BN EQ 'Y' THEN
            SCRBNK.BN_ID(LINESCH) := KODIF_BN.BN_ID
            SCRBNK.BN_BIC  := KODIF_BN.BN_BIC
            SCRBNK.KR_OG   := KODIF_BN.KORR_SCH
            SCRBNK.BN_NAME := KODIF_BN.NAME_BN
            SCRBNK.BN_ADDR := KODIF_BN.ADDR_BN
                                     END-IF
                                       ELSE
           FOR I = 1 TO 15
            IF POST EQ POS(SCRBNK.VA_OG(LINESCH,I)) THEN
             FETCH RETURN 'NAVVA' END-IF
           END-FOR
                                       END-IF
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
         VALUE 'PF12'
          K := LINESCH + 1
          FOR I = K TO 15
           IF I < 15 THEN
            J := I - 1
            SCRBNK.RS_OG(J,1:15) := SCRBNK.RS_OG(I,1:15)
            SCRBNK.VA_OG(J,1:15) := SCRBNK.VA_OG(I,1:15)
            SCRBNK.BN_ID(J)      := SCRBNK.BN_ID(I)
                     END-IF
          END-FOR
          RESET SCRBNK.RS_OG(15,1:15) SCRBNK.VA_OG(15,1:15)
                SCRBNK.BN_ID(15)
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
         VALUE 'PF3'
          ESCAPE BOTTOM
         NONE VALUE
          PERFORM CHECK_SCH
          IF CODERR NE 0 THEN ESCAPE TOP END-IF
        END-DECIDE
       END-REPEAT ;
       END OF TRANSACTION
                                                     END-IF
                                   END-IF
                           END-IF
   VALUE 'PF6'
    IF CURLINE EQ 1 THRU 5 THEN
     IF (SCREEN.VO_ID(CURLINE) NE 0) THEN
     IF (SCREEN.STATUS(CURLINE) EQ 'OLD' OR EQ 'UPD') THEN
      FIND (1) IBS-KK-FILE OG-ID EQ KODIF_VO.OG_ID_G AND
                    KD-F EQ SCREEN.VO_ID(CURLINE)
    REINPUT FULL WITH TEXT
    'Удаление невозможно. Код внешней организации используетс .'(CD=RE)
     MARK *SCREEN.VO_INN(CURLINE) ALARM
      END-FIND
    TMP_B4 := SCREEN.NUM_ST(CURLINE)
    CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
    DSTACK.STATUS := 'DEL'
    CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;        ELSE
    IF SCREEN.NUM_ST(CURLINE) NE 0 THEN
    TMP_B4 := SCREEN.NUM_ST(CURLINE)
    CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
    DSTACK.ISN_REC  := 0
    DSTACK.STATUS   := ' '
    DSTACK.VO_ID    := 0
    DSTACK.VO_INN   := ' '
    DSTACK.VO_NAME  := ' '
    DSTACK.VO_ADDR  := ' '
    DSTACK.REGION   := 0
    DSTACK.KPP := ' '
    RESET DSTACK.DOP_INFO
    CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
                                        ELSE
    RESET SCREEN(CURLINE)           END-IF END-IF END-IF END-IF
   VALUE 'PF7'
    PERFORM CHECK_SCREEN
    ADD -5 TO STARTLINE
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
   VALUE 'PF8'
    PERFORM CHECK_SCREEN
    ADD 5 TO STARTLINE
    IF STARTLINE > MAXDATA THEN STARTLINE := MAXDATA - 4 END-IF
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
   VALUE 'PF9'
    PERFORM CHECK_SCREEN
    STARTLINE := 1
   VALUE 'PF10'
    PERFORM CHECK_SCREEN
    STARTLINE := MAXDATA - 3
    IF STARTLINE < 1 THEN STARTLINE := 1 END-IF
   NONE VALUE
    PERFORM CHECK_SCREEN
  END-DECIDE
 END-REPEAT
END-REPEAT
DEFINE SUBROUTINE CHECK_SCREEN
 K := 0
 FOR I = 1 TO 5
 IF SCREEN.VO_ID(I) NE 0 THEN
 IF SCREEN.NUM_ST(I) NE 0
  THEN TMP_B4 := SCREEN.NUM_ST(I)
  ELSE TMP_B4 := I + STARTLINE - 1 + K ; END-IF
 IF TMP_B4 <= COLSTACK THEN
 CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
 IF DSTACK.STATUS NE 'DEL' THEN
  IF SCREEN.STATUS(I) NE 'DEL' THEN
   KEYVO1.KEYOG := KODIF_VO.OG_ID_G
   KEYVO1.KEYVO := SCREEN.VO_ID(I)
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1
    IF *ISN NE DSTACK.ISN_REC THEN
    REINPUT FULL WITH TEXT 'Дублирование кода внешней организации.'(CD=RE)
     MARK *SCREEN.VO_INN(I) ALARM END-IF
   END-FIND
*  IF SCREEN.VO_INN(I) EQ ' ' THEN
*   REINPUT FULL WITH TEXT 'Введите ИНН организации.'(CD=RE)
*    MARK *SCREEN.VO_INN(I) ALARM
*    ELSE
*    IF SCREEN.VO_INN(I) = MASK(NNNNNNNNNN) OR
*      SCREEN.VO_INN(I) = MASK(NNNNNNNNNNNN)
*      SCRVO := VAL(SCREEN.VO_INN(I))
*      IF SCRVO < 1000000000 OR SCRVO > 999999999999 OR
*      ( SCRVO = 10000000000 THRU 19999999999 )
*      REINPUT 'ИНН НЕ 10/12 ЗНАКОВ'
*      MARK *SCREEN.VO_INN(I) ALARM
*      END-IF
*      ELSE  REINPUT 'ИНН НЕ 10/12 ЗНАКОВ'
*    END-IF
*    INN := SCREEN.VO_INN(I)
*  END-IF
   KEYVO1.KEYOG := KEYVO2.KEYOG := KEYVO3.KEYOG := KODIF_VO.OG_ID_G ;
   KEYVO1.KEYVO := 0
   KEYVO2.KEYVO := 99999
   KEYVO3.KEYVO := SCREEN.VO_ID(I)
L9. FIND NUMBER IBS-KVO-FILE IBS-KVO-FILE.OG-VO EQ KEYVO1 THRU KEYVO2 BUT NOT KEYVO3 AND
                             IBS-KVO-FILE.NN-ID EQ SCREEN.VO_INN(I)
   IF *NUMBER(L9.) > 0 THEN
    FIND IBS-KVO-FILE IBS-KVO-FILE.OG-VO EQ KEYVO1 THRU KEYVO2 BUT NOT KEYVO3 AND
                          IBS-KVO-FILE.NN-ID EQ SCREEN.VO_INN(I)
     MESSAGE := IBS-KVO-FILE.VO-ID
     IF IBS-KVO-FILE.VO-ID EQ KODIF_VO.OG_ID_G THEN
      MESSAGE := ' '
      ESCAPE BOTTOM
     END-IF
    END-FIND
    IF MESSAGE NE ' ' THEN
     COMPRESS 'Организаци  с таким ИНН уже присутствует в базе под номером :' MESSAGE TO
              MESSAGE
*    REINPUT FULL WITH TEXT MESSAGE(CD=RE)
*     MARK *SCREEN.VO_INN(I) ALARM
END-IF
    END-IF
    LMP := H'0000000F'
    CALL 'CMPXF' SCREEN.VO_INN(I) LMP H'0000000F' NUMSTACK
*   IF LMP NE 0 AND  LMP NE SCREEN.NUM_ST(I) THEN
*    REINPUT FULL WITH TEXT 'Организаци  с таким ИНН уже введена.'(CD=RE)
*     MARK *SCREEN.VO_INN(I) ALARM
*               END-IF
   IF SCREEN.VO_NAME(I) EQ ' ' THEN
    REINPUT FULL WITH TEXT
    'Введите наименование организации.'(CD=RE)
     MARK *SCREEN.VO_NAME(I) ALARM END-IF
   IF SCREEN.VO_ADDR(I) EQ ' ' THEN
    REINPUT FULL WITH TEXT
    'Введите адрес организации.'(CD=RE)
     MARK *SCREEN.VO_ADDR(I) ALARM END-IF
                       END-IF
DSTACK.STATUS   := SCREEN.STATUS(I)
IF DSTACK.VO_ID  NE SCREEN.VO_ID(I) OR
   DSTACK.VO_INN NE SCREEN.VO_INN(I) OR
   DSTACK.REGION NE SCREEN.REGION(I) OR
   DSTACK.VO_NAME NE SCREEN.VO_NAME(I) OR
   DSTACK.VO_ADDR NE SCREEN.VO_ADDR(I) OR
   DSTACK.DOGOVOR NE SCREEN.DOGOVOR(I) OR
   DSTACK.KPP NE SCREEN.KPP(I) OR
   DSTACK.SHORT_INFO(1) NE SCREEN.SHORT_INFO(I,1) OR
   DSTACK.SHORT_INFO(1) NE SCREEN.SHORT_INFO(I,2) OR
   DSTACK.SHORT_INFO(1) NE SCREEN.SHORT_INFO(I,3) OR
   DSTACK.SHORT_INFO(1) NE SCREEN.SHORT_INFO(I,4) OR
   DSTACK.SHORT_INFO(1) NE SCREEN.SHORT_INFO(I,5) THEN
   DECIDE ON FIRST VALUE DSTACK.STATUS
    VALUE 'OLD'
     DSTACK.STATUS := 'UPD'
    VALUE 'UPD'
     IGNORE
    VALUE 'DEL'
     IGNORE
    NONE VALUE
     DSTACK.STATUS := 'NEW'
   END-DECIDE
 DSTACK.VO_ID           := SCREEN.VO_ID(I)
 DSTACK.VO_INN          := SCREEN.VO_INN(I)
 DSTACK.REGION          := SCREEN.REGION(I)
 DSTACK.VO_NAME         := SCREEN.VO_NAME(I)
 DSTACK.VO_ADDR         := SCREEN.VO_ADDR(I)
 DSTACK.KPP          := SCREEN.KPP(I)
 DSTACK.DOGOVOR         := SCREEN.DOGOVOR(I)
 DSTACK.SHORT_INFO(1:5) := SCREEN.SHORT_INFO(I,1:5)
END-IF
 IF TMP_B4 > MAXDATA THEN MAXDATA := TMP_B4 END-IF
 CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
                           ELSE
  ADD -1 TO I ; ADD 1 TO K END-IF
                       ELSE
 RESET SCREEN(I:5) ADD -1 TO MAXDATA
 REINPUT FULL WITH TEXT
 'Не хватает пам ти. Сохранитесь и продолжайте работу.'(CD=RE)
 MARK *SCREEN.VO_INN(I) ALARM END-IF
  END-IF
 END-FOR
END-SUBROUTINE
DEFINE SUBROUTINE LOADSCREEN
 RESET SCREEN(*)
 K := 0
 FOR I = 1 TO 5
  TMP_B4 := I + STARTLINE - 1 + K ;
  IF TMP_B4 <= MAXDATA THEN
   CALL 'RWSX' TMP_B4 DSTACK(1) RD-REC NUMSTACK ;
   IF DSTACK.STATUS NE 'DEL' THEN
   SCREEN.NUM_ST(I)         := TMP_B4
   SCREEN.STATUS(I)         := DSTACK.STATUS
   SCREEN.VO_ID(I)          := DSTACK.VO_ID
   SCREEN.VO_INN(I)         := DSTACK.VO_INN
   SCREEN.REGION(I)         := DSTACK.REGION
   SCREEN.VO_NAME(I)        := DSTACK.VO_NAME
   SCREEN.VO_ADDR(I)        := DSTACK.VO_ADDR
   SCREEN.DOGOVOR(I)        := DSTACK.DOGOVOR
   SCREEN.KPP(I)            := DSTACK.KPP
   SCREEN.SHORT_INFO(I,1:5) := DSTACK.SHORT_INFO(1:5)
                             ELSE
   ADD -1 TO I ; ADD 1 TO K  END-IF
                       END-IF
 END-FOR
END-SUBROUTINE
DEFINE SUBROUTINE LOAD_DATA
MAXDATA  := 0
COLSTACK := 0
KEYVO1.KEYOG := KEYVO2.KEYOG := KEYBN1.KEYOG := KODIF_VO.OG_ID_G
KEYVO1.KEYVO := 0 KEYVO2.KEYVO := 99999
 DECIDE FOR FIRST CONDITION
  WHEN KODIF_VO.VO_ID EQ 0 AND KODIF_VO.VO_INN EQ ' ' AND
       KODIF_VO.VO_BIK EQ ' ' AND KODIF_VO.VO_BNK EQ 0
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1 THRU KEYVO2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_VO.VO_ID NE 0 AND KODIF_VO.VO_INN EQ ' ' AND
       KODIF_VO.VO_BIK EQ ' ' AND KODIF_VO.VO_BNK EQ 0
       KEYVO1.KEYVO := KODIF_VO.VO_ID
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_VO.VO_ID EQ 0 AND KODIF_VO.VO_INN NE ' ' AND
       KODIF_VO.VO_BIK EQ ' ' AND KODIF_VO.VO_BNK EQ 0
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1 THRU KEYVO2 AND NN-ID EQ KODIF_VO.VO_INN ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
  WHEN KODIF_VO.VO_ID NE 0 AND KODIF_VO.VO_INN NE ' ' AND
       KODIF_VO.VO_BIK EQ ' ' AND KODIF_VO.VO_BNK EQ 0
       KEYVO1.KEYVO := KODIF_VO.VO_ID
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1 AND NN-ID EQ KODIF_VO.VO_INN ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
/* НЕ СДЕЛАНО ****************
/*****************************
  WHEN NONE
   FIND IBS-KVO-FILE OG-VO EQ KEYVO1 THRU KEYVO2 ;
    AT START DATA COLSTACK := *NUMBER + 200 ; END-START
    TMP_ISN := *ISN ; PERFORM DATA2STACK
   END-FIND
 END-DECIDE
END-SUBROUTINE
DEFINE SUBROUTINE DATA2STACK
 IF MAXDATA EQ 0 THEN
  CALL 'GTSX' LSTACK COLSTACK NUMSTACK ;
  CALL 'NULX' ' ' NUMSTACK
                  END-IF
IF KODIF_VO.VO_ID NE 0 THEN
 IF KODIF_VO.VO_ID NE IBS-KVO-FILE.VO-ID THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_VO.VO_INN NE ' ' THEN
 IF KODIF_VO.VO_INN NE IBS-KVO-FILE.NN-ID THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_VO.VO_NAME NE ' ' THEN
 IF IBS-KVO-FILE.NM-OG NE SCAN KODIF_VO.VO_NAME THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_VO.VO_ADDR NE ' ' THEN
 IF IBS-KVO-FILE.AD-OG NE SCAN KODIF_VO.VO_ADDR THEN
   ESCAPE ROUTINE END-IF END-IF
IF KODIF_VO.VO_BNK NE 0 THEN
 GET BANK-VO TMP_ISN
 IF KODIF_VO.VO_BNK NE BANK-VO.BN-OG(1:15) THEN
   ESCAPE ROUTINE END-IF END-IF
 DSTACK.ISN_REC         := TMP_ISN
 DSTACK.STATUS          := 'OLD'
 DSTACK.VO_ID           := IBS-KVO-FILE.VO-ID
 DSTACK.VO_INN          := IBS-KVO-FILE.NN-ID
 DSTACK.VO_ADDR         := IBS-KVO-FILE.AD-OG
 DSTACK.VO_NAME         := IBS-KVO-FILE.NM-OG
 DSTACK.REGION          := IBS-KVO-FILE.RE-OG
 DSTACK.KPP             := IBS-KVO-FILE.NM-PL
 DSTACK.DOGOVOR         := IBS-KVO-FILE.NA-F
 DSTACK.SHORT_INFO(1:5) := IBS-KVO-FILE.VO-DI(1:5)
 ADD 1 TO MAXDATA
 TMP_B4 := MAXDATA
 CALL 'RWSX' TMP_B4 DSTACK(1) WR-REC NUMSTACK ;
END-SUBROUTINE
DEFINE SUBROUTINE CHECK_SCH
 CODERR := 0
 IF SCRBNK.BN_BIC NE ' ' THEN
  KEYBIC.KEYOG := KODIF_VO.OG_ID_G
  KEYBIC.KEYBN := SCRBNK.BN_BIC
L03. FIND (1) IBS-BANK OG-BIC EQ KEYBIC
  IF *NUMBER(L03.) < 1 THEN CODERR := 1 ESCAPE ROUTINE END-IF
* IF *NUMBER(L03.) > 1 THEN CODERR := 2 ESCAPE ROUTINE END-IF
* IF *NUMBER(L03.) > 1 THEN CODERR := 0 ESCAPE ROUTINE END-IF
   SCRBNK.BN_ID(LINESCH) := IBS-BANK.BN-ID
     END-FIND
IF SCRBNK.RS_OG(LINESCH,1) EQ ' ' THEN CODERR := 3 ESCAPE ROUTINE END-IF
  RESET TMPTMP
  K := 0
  FOR I = 1 TO 15
   IF SCRBNK.RS_OG(LINESCH,I) EQ ' ' THEN SCRBNK.VA_OG(LINESCH,I) := ' ' END-IF
   IF SCRBNK.RS_OG(LINESCH,I) NE ' ' AND SCRBNK.VA_OG(LINESCH,I) EQ ' ' THEN
   SCRBNK.VA_OG(LINESCH,I) := 'РУБ' END-IF
   IF SCRBNK.RS_OG(LINESCH,I) NE ' ' THEN
    ADD 1 TO K
    TMPTMP.RS_OG(K) := SCRBNK.RS_OG(LINESCH,I)
    TMPTMP.VA_OG(K) := SCRBNK.VA_OG(LINESCH,I)
                                     END-IF
    IF SCRBNK.RS_OG(LINESCH,I) NE ' '
      RSS := SCRBNK.RS_OG(LINESCH,I)
      FOR SCRVO 1 20
        IF #RSS(SCRVO) = ' '  ESCAPE BOTTOM  END-IF
      END-FOR
      IF SCRVO NE 21 CODERR := 0 ESCAPE ROUTINE END-IF
    END-IF
  END-FOR
    IF K > 0 THEN
     RESET SCRBNK.RS_OG(LINESCH,1:15) SCRBNK.VA_OG(LINESCH,1:15) ;
     SCRBNK.RS_OG(LINESCH,1:15) := TMPTMP.RS_OG(1:15)
     SCRBNK.VA_OG(LINESCH,1:15) := TMPTMP.VA_OG(1:15)
             END-IF
                        ELSE
  RESET SCRBNK.BN_BIC SCRBNK.KR_OG SCRBNK.BN_ADDR SCRBNK.BN_NAME
        SCRBNK.RS_OG(LINESCH,1:15) SCRBNK.VA_OG(LINESCH,1:15)
         SCRBNK.BN_ID(LINESCH)
                         END-IF
END-SUBROUTINE
END
