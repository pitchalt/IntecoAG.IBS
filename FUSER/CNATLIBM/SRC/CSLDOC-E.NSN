* >Natural Source Header 000000 /*<RO>>
* :NatName CSLDOC-E
* :UID TIROD
* :Mode S
* :CP
* :Date 20090831
* :Time 1033330
* <Natural Source Header /*<<RO>
DEFINE DATA
PARAMETER USING CSLDOC-P
PARAMETER
1 OG-USER(N5)
1 N-DOC-B(B4)
1 C-DOC(P7)
1 M-ETP(P7)
1 RKD(N1)
LOCAL USING LCLADSDG
LOCAL USING LCLADSSY
LOCAL USING CSLDOCL
LOCAL
1 IBS-REC-FILE VIEW OF IBS-REC-FILE
  2 KD-F
1 ADS-ZATRAT VIEW OF ADS-ZATRAT
  2 OG-ID
  2 NN-ID
  2 NN-DP
  2 ND-E
1 REG-NM-G(A40)  INIT <'<Выбор этапа договора>'>
1 SYS-NM-G(A60)  INIT <'<Интегрированна  бухгалтерска  система>'>
1 TX-PF4(A8)     INIT <'Добавить'>
1 TX-PF6(A8)     INIT <'Удалить'>
1 NSF(N5)
1 CCC(I4)
1 N-ETP-B(B4)
1 L-ETP-B(B4)    INIT <H'0000003D'>
1 SETP(A61)
1 REDEFINE SETP
  2 SIND(I4/1:9)
  2 SURID(A1)
  2 REDEFINE SURID
    3 SUR(N1)
  2 SNME(A20)
  2 SISN(I4)
1 F-ETP(P7)
1 C-ETP(P7)
1 I(P7)
1 J(P7)
1 NN1(P7)
1 NN2(P7)
1 Q-LINE(P2)  CONST <16>
1 Q-COL(P2)   CONST <4>
1 INP-ET(A20/1:Q-LINE,1:Q-COL)
1 INP-ET-C(C/1:Q-LINE,1:Q-COL)  INIT ALL <(AD=P)>
1 INP-UR(A1/1:Q-COL)
1 REDEFINE INP-UR
  2 INP-URN(N1/1:Q-COL)
1 TX-UR(A7/1:Q-COL)
1 C-LINE(P2)
1 C-COL(P2)
1 C-CURS(P2)
1 Q-CURS(P2)
1 F-UR(N2)
1 M-UR(N2)
1 WLINE(A61)
1 REDEFINE WLINE
  2 WIND(I4/1:9)
  2 WUR(N1)
  2 WNM(A20)
  2 WISN(I4)
1 ADD-UR(N1)
1 ADD-NM(A20)
1 ISX-UR(N1)
1 ISX-NM(A20)
1 ISX-NE(I4)
1 ISX-IN(I4/1:COL-NI)
1 MSG(A40)
1 TTT(A30)
1 KEYDG(A9)
1 REDEFINE KEYDG
  2 KEYDGOG(N5)
  2 KEYDGKD(I4)
1 NUM-IND(I4)
END-DEFINE
DEFINE WINDOW WIN1
SIZE 10 * 51
BASE 7 / 14
TITLE TTT
CONTROL SCREEN
*
RESET M-ETP J RKD
CALL 'GTNX' N-ETP-B
IF N-ETP-B = 0 THEN RKD := 9 ESCAPE ROUTINE END-IF
KEYDGOG := OG-USER
C-DATA-B := C-DOC
CALL 'RWSX' C-DATA-B SDOC RD-REC N-DOC-B
W. FIND ADS-DOG-FILE NN-ID = DNNID AND NN-DP = DNNDP
        AND OG-ID = OG-USER
   IF NO RECORDS FOUND
   C-DATA1-B := *NUMBER(W.) + 50
   CALL 'GTSX' L-ETP-B C-DATA1-B N-ETP-B
   ESCAPE BOTTOM
   END-NOREC
   AT START OF DATA
   C-DATA1-B := *NUMBER(W.) + 50
   CALL 'GTSX' L-ETP-B C-DATA1-B N-ETP-B
   END-START
   NSF := NS-F(W.)
   IF UR-ID(W.) = 0 THEN ESCAPE TOP END-IF
   J := 1 SURID := UR-ID(W.)
   SIND(*) := IN-F(W./3:COL-NI) SNME := ND-F(W.) SISN := *ISN
   ADD 1 TO M-ETP C-DATA1-B := M-ETP
   CALL 'RWSX' C-DATA1-B SETP WR-REC N-ETP-B
   IF UR-ID(W.) > M-UR THEN M-UR := UR-ID(W.) END-IF
   END-FIND
IF M-ETP = 0 THEN
   IF FUN = 'WR' AND NUM-USER = NSF THEN
      PERFORM PROC-ADD-ETAP
   END-IF
   IF M-ETP = 0 THEN
      CALL 'FRSX' N-ETP-B
      ESCAPE ROUTINE
   END-IF
END-IF
*
IF FUN = 'WR' AND NUM-USER = NSF THEN
   SET KEY PF4 PF6
ELSE
   RESET TX-PF4 TX-PF6
END-IF
CALL 'SRTX' WR-REC H'00000024' N-ETP-B
CALLNAT 'CENTER40' REG-NM-G
CALLNAT 'CENTER60' SYS-NM-G
*
SET KEY PF3 PF7 PF8 PF9 PF10 PF11
REPEAT
RESET INP-ET(*,*) C-ETP INP-UR(*) TX-UR(*)
RESET INITIAL INP-ET-C(*,*)
FOR C-COL 1 Q-COL
C-DATA1 := F-UR + C-COL
IF C-DATA1 > M-UR THEN ESCAPE BOTTOM END-IF
TX-UR(C-COL) := 'Уровень' INP-UR(C-COL) := C-DATA1
END-FOR
C-COL := C-COL - 1
FOR C-LINE 1 Q-LINE
C-DATA := F-ETP + C-LINE C-DATA-B := C-DATA
IF C-DATA > M-ETP THEN ESCAPE BOTTOM END-IF
CALL 'RWSX' C-DATA-B SETP RD-REC N-ETP-B
EXAMINE INP-UR(*) FOR SURID INDEX I
IF I NE 0 THEN
   INP-ET(C-LINE,I) := SNME INP-ET-C(C-LINE,I) := (AD=D)
   IF INP-URN(I) > 1
      MOVE '          |_________' TO INP-ET(C-LINE,I - 1)
   END-IF
END-IF
END-FOR
IF MSG = ' ' THEN
INPUT USING MAP 'CSLDOCM3'
ELSE
INPUT WITH TEXT MSG MARK CCC ALARM USING MAP 'CSLDOCM3'
END-IF
CCC := *CURS-FIELD RESET I MSG
FOR C-CURS 1 C-LINE
FOR Q-CURS 1 C-COL
IF CCC = POS(INP-ET(C-CURS,Q-CURS)) THEN I := 1 ESCAPE BOTTOM END-IF
END-FOR
IF I = 1 THEN ESCAPE BOTTOM END-IF
END-FOR
*
DECIDE FOR EVERY CONDITION
WHEN *PF-KEY = 'PF3'
   SET CONTROL 'K0' ESCAPE BOTTOM
WHEN *PF-KEY = 'PF7'
   IF F-ETP > Q-LINE THEN F-ETP := F-ETP - Q-LINE
      ELSE RESET F-ETP END-IF
WHEN *PF-KEY = 'PF8' AND C-DATA < M-ETP
   ADD Q-LINE TO F-ETP
WHEN *PF-KEY = 'PF9'
   IF F-UR > Q-COL THEN F-UR := F-UR - Q-COL
      ELSE RESET F-UR END-IF
WHEN *PF-KEY = 'PF10' AND C-DATA1 < M-UR
   ADD Q-COL TO F-UR
WHEN *PF-KEY = 'PF11' AND C-CURS = 1 THRU C-LINE
     AND Q-CURS = 1 THRU C-COL
   I := F-ETP + C-CURS C-DATA-B := I
   CALL 'RWSX' C-DATA-B SETP RD-REC N-ETP-B
Z. GET ADS-DOG-FILE SISN
   DOC-NN(*) := IN-F(*) DOC-IND := IND-D(Z.)
   DOC-NM(3) := ND-F(Z.)
   RKD := 1 SET CONTROL 'K11'
   ESCAPE BOTTOM
WHEN *PF-KEY = 'PF4' AND FUN = 'WR' AND NUM-USER = NSF
   PERFORM PROC-ADD-ETAP
WHEN *PF-KEY = 'PF6' AND FUN = 'WR' AND NUM-USER = NSF
   AND C-CURS = 1 THRU C-LINE AND Q-CURS = 1 THRU C-COL
   PERFORM PROC-DEL-ETAP
WHEN NONE IGNORE
END-DECIDE
END-REPEAT
*
DEFINE SUBROUTINE PROC-ADD-ETAP
SET KEY PF5
TTT := 'ДОБАВЛЕНИЕ ЭТАПА ДОГОВОРА'
REPEAT
IF M-ETP = 0 THEN ADD-UR := 1 END-IF
ISX-UR := ADD-UR - 1
IF ISX-UR < 1 THEN RESET ISX-NM END-IF
SET WINDOW 'WIN1'
IF MSG = ' ' THEN
INPUT MARK CCC USING MAP 'CSLDOCM4'
ELSE
INPUT WITH TEXT MSG MARK CCC ALARM USING MAP 'CSLDOCM4'
END-IF
SET WINDOW OFF
CCC := *CURS-FIELD RESET MSG
DECIDE FOR EVERY CONDITION
WHEN *PF-KEY = 'PF3'
  ESCAPE BOTTOM
WHEN *PF-KEY NE 'PF3'
  IF M-ETP = 0 THEN ADD-UR := 1 END-IF
  ISX-UR := ADD-UR - 1
  IF ISX-UR < 1 THEN RESET ISX-NM END-IF
  IF ADD-UR = 0 THEN
     MSG := 'Уровень добавл емого этапа ?'
     CCC := POS(ADD-UR) ESCAPE TOP END-IF
  ISX-UR := ADD-UR - 1
  IF ADD-NM = ' ' THEN
     MSG := 'Номер добавл емого этапа ?'
     CCC := POS(ADD-NM) ESCAPE TOP
  ELSE
  N. FIND NUMBER ADS-DOG-FILE NN-ID = DNNID AND NN-DP = DNNDP AND
          ND-F = ADD-NM AND UR-ID > 0 AND OG-ID = OG-USER
     IF *NUMBER(N.) NE 0 THEN
        MSG := 'Этап с таким номером уже описан'
        CCC := POS(ADD-NM) ESCAPE TOP END-IF
  END-IF
  RESET ISX-NE ISX-IN(*)
  IF ISX-UR = 0 THEN
     X. FIND ADS-DOG-FILE NN-ID = DNNID AND NN-DP = DNNDP AND
             UR-ID = ISX-UR AND OG-ID = OG-USER
        ISX-IN(*) := IN-F(X./*)
        END-FIND
  ELSE
     IF ISX-NM = ' ' THEN
        MSG := 'Номер этапа предыдущего уровн '
        CCC := POS(ISX-NM) ESCAPE TOP
     ELSE
    X1. FIND ADS-DOG-FILE NN-ID = DNNID AND NN-DP = DNNDP AND
             ND-F = ISX-NM AND UR-ID = ISX-UR AND OG-ID = OG-USER
        ISX-NE := ND-E(X1.) ISX-IN(*) := IN-F(X1./*)
        END-FIND
        IF *NUMBER(X1.) = 0 THEN
           MSG := 'Указанный исходный этап отсутствует'
           CCC := POS(ISX-NM) ESCAPE TOP END-IF
     END-IF
  END-IF
WHEN *PF-KEY = 'PF5'
   IF DPISN NE 0
   G. GET ADS-DOG-FILE DPISN
   ELSE
   G1. GET ADS-DOG-FILE DDISN
   END-IF
   RESET NUM-IND
C. FIND ADS-SYS-FILE KK-F = 'MN' AND OG-ID = OG-USER
   IF NO RECORD FOUND
      KK-F := 'MN' OG-ID := OG-USER RESET NN-F
   END-NOREC
   ADD 1 TO NN-F(C.) NUM-IND := NN-F(C.)
   IF *NUMBER(C.) = 0 THEN STORE ADS-SYS-FILE
      ELSE UPDATE (C.) END-IF
   END-FIND
B. FIND ADS-SYS-FILE KK-F = 'MD' AND OG-ID = OG-USER
   IF NO RECORD FOUND
      KK-F := 'MD' OG-ID := OG-USER RESET NN-F
   END-NOREC
   ADD 1 TO NN-F(B.)
   IF *NUMBER(B.) = 0 THEN STORE ADS-SYS-FILE
      ELSE UPDATE (B.) END-IF
   END-FIND
   RESET ADS-DOG-FILE.GM-F ADS-DOG-FILE.NN-OD ADS-DOG-FILE.NN-DO
         SIND(*)
   ADS-DOG-FILE.IND-D := DOC-IND := NUM-IND
   ADS-DOG-FILE.UR-ID := SURID := ADD-UR
   ADS-DOG-FILE.ND-F  := SNME := ADD-NM
   ADS-DOG-FILE.UR-OD := ISX-UR
   ADS-DOG-FILE.ET-OD := ISX-NE
   SIND(*) := ISX-IN(3:COL-NI)
   ADS-DOG-FILE.ND-E  := ISX-IN(UR-ID + 2) := ADS-SYS-FILE.NN-F
   ADS-DOG-FILE.IN-F(*) := ISX-IN(*)
   SIND(*) := ISX-IN(3:COL-NI)
S. STORE ADS-DOG-FILE
   SISN := *ISN(S.)
   END OF TRANSACTION
   ADD 1 TO M-ETP C-DATA1-B := M-ETP
   CALL 'RWSX' C-DATA1-B SETP WR-REC N-ETP-B
   IF ADD-UR > M-UR THEN M-UR := ADD-UR END-IF
   CALL 'SRTX' WR-REC H'00000024' N-ETP-B
   ESCAPE BOTTOM
WHEN NONE IGNORE
END-DECIDE
END-REPEAT
SET KEY PF5 = OFF SET CONTROL 'K0'
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-DEL-ETAP
C-ETP := F-ETP + C-CURS C-DATA-B := C-ETP
CALL 'RWSX' C-DATA-B SETP RD-REC N-ETP-B
G2. GET ADS-DOG-FILE SISN
KEYDGKD := IND-D(G2.)
Q. FIND NUMBER ADS-DOG-FILE ET-OD = SIND(I) AND OG-ID = OG-USER
IF *NUMBER(Q.) NE 0 THEN
   EXAMINE INP-UR(*) FOR SURID INDEX I
   MSG := 'Удал ть нельз . Есть подэтапы' CCC := POS(INP-ET(C-CURS,I))
   ESCAPE TOP END-IF
Q1. FIND NUMBER ADS-ZATRAT NN-ID = DNNID AND NN-DP = DNNDP
         AND ND-E = KEYDGKD AND OG-ID = OG-USER
   IF *NUMBER(Q1.) NE 0 THEN
      MSG := 'Удал ть нельз . Есть плановые затраты'
      CCC := POS(INP-ET(C-CURS,I)) ESCAPE TOP END-IF
R. FIND NUMBER IBS-REC-FILE OG-DG-OS = KEYDG
   IF *NUMBER(R.) = 0 THEN
   R1. FIND NUMBER IBS-REC-FILE OG-DG-KS = KEYDG
   END-IF
   IF *NUMBER(R.) NE 0 OR *NUMBER(R1.) NE 0 THEN
      MSG := 'Удал ть нельз . Есть проводки'
      CCC := POS(INP-ET(C-CURS,I)) ESCAPE TOP END-IF
TTT := 'УДАЛЕНИЕ ЭТАПА ДОГОВОРА'
ISX-UR := SUR ISX-NM := SNME RESET ADD-NM ADD-UR
SET WINDOW 'WIN1'
SET KEY PF6 (PB=006/021/002/008) NAMED 'Удалить'
INPUT (AD=M IP=OFF SG=OFF ZP=OFF)
 'Подтвердите удаление этапа' ISX-NM (AD=O) /
 18T 'на уровне' ISX-UR (AD=O) /
 'повторным вводом номера' 4X ADD-NM / 18T 'и уровн ' 2X ADD-UR /
 'и нажмите клавишу "Удалить"'
SET WINDOW OFF
IF *PF-KEY = 'PF6' AND ADD-UR = ISX-UR AND ADD-NM = ISX-NM THEN
D. GET ADS-DOG-FILE SISN
   DELETE (D.)
   END OF TRANSACTION
   CALL 'RWSX' C-DATA-B H'FF' WR-REC N-ETP-B WR-REC WR-REC
   CALL 'PRSX' WR-REC WR-REC N-ETP-B
   M-ETP := M-ETP - 1
END-IF
SET CONTROL 'K0'
IF M-ETP = 0 THEN ESCAPE BOTTOM END-IF
END-SUBROUTINE
*
CALL 'FRSX' N-ETP-B
END
