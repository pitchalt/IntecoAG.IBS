* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVNU
* :UID MSA
* :Mode S
* :CP
* :Date 20101018
* :Time 1404140
* <Natural Source Header /*<<RO>
*********************************************
* бедемхе йндхтхйюрнпю мювхякемхи/сдепфюмхи *
*********************************************
DEFINE DATA
*  GLOBAL USING UFROG       /* цкнаюкэмше оепелеммше дкъ бяеи яхярелш
PARAMETER USING PRMNAVI
*
  LOCAL  USING LCLNU      /* VIEW мю тюик IBS-SYS-FILE
  LOCAL  USING LCLFROL1      /* наыхе оепелеммше
  LOCAL  USING LCLFROL4      /* наыхе оепелеммше
  LOCAL  USING PRMHELP
  LOCAL
    1 SELFUN(A60) INIT<'йНДШ МЮВХЯКЕМХ /СДЕПФЮМХ '>
    1 SELREG(A40)
    1 INPUT-REC(A020/1:11)
    1 REDEFINE INPUT-REC
      2 #INPUT-REC(11)
* онкъ мебшбндхлше мю щйпюм
        3 FIELD-FF  (B001) /* ткюц хглемемхъ/сдюкемхъ гюохях
        3 FIELD-ISN (I4) /* ISN гюохях
        3 FIELD-UP  (A001) /* ткюц гюыхрш гюохях
* онкъ бшбндхлше мю щйпюм
        3 #FIELD-01 (N005)      /* ясаявер
        3 REDEFINE #FIELD-01
          4 #FIELD-01-A(A005)
        3 #FIELD-04 (N003)      /* мювхякемхе кхлхрхп.
        3 #FIELD-02 (N003)      /* мювхякемхе
        3 #FIELD-03 (N003)      /* сдепфюмхе
* дхмюлхвеяйхе юрпхасрш дкъ бшбндхлшу онкеи
*   1 #FIELD-01C (C/1:15)
*   1 #FIELD-02C (C/1:15)
*   1 #FIELD-03C (C/1:15)
*
* ярпсйрспю щкелемрю ярейю я дюммшлх
*
    1 STEK-REC(A20)
    1 REDEFINE STEK-REC
      2 STEK-FF(B01)
      2 STEK-ISN(I4)
      2 STEK-UP(A01)
*
      2 STEK-01(N05)
      2 STEK-04(N03)
      2 STEK-02(N03)
      2 STEK-03(N03)
    1 NAME(A80)
    1 REDEFINE NAME
*     2 NAME-SS(N5)
      2 NAME-NA(N3)
      2 NAME-UD(N3)
      2 NAME-NAL(N3)
END-DEFINE
*
SET KEY PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
INCLUDE CCASKOG
#OPSYS := *OPSYS
*
MOVE 1   TO N-DATA N-DATA-B     /* мнлеп ярейю я дюммшлх
MOVE 20  TO L-DATA L-DATA-B     /* дкхмю щкелемрю б ярейе я дюммшлх
MOVE 15   TO Q-DATA Q-DATA-B    /* йнкхвеярбн щкелемрнб б ярейе
*
MOVE 2   TO N-DEL  N-DEL-B      /* мнлеп ярейю я ISN сдюкеммшу гюохяеи
MOVE 4   TO L-DEL  L-DEL-B      /* дкхмю щкелемрю б ярейе я ISN
MOVE 15   TO Q-DEL  Q-DEL-B     /* йнкхвеярбн щкелемрнб б ярейе я ISN
*
ASSIGN Q-FIELD = 4          /* онкеи б ярпнйе
ASSIGN Q-LINE = 11          /* ярпнй мю щйпюме
ASSIGN F-LINE = 5           /* ялеыемхе оепбни ярпнйх
ASSIGN T-KEY = 7            /* мювюкэмюъ онгхжхъ йкчвебнцн юрпхасрю
ASSIGN L-KEY = 5            /* дкхмю йкчвебнцн юрпхасрю
ASSIGN P-INPUT(1,1) = 18
ASSIGN P-INPUT(2,1) = 30
ASSIGN P-INPUT(3,1) = 40
ASSIGN P-INPUT(4,1) = 56
ASSIGN P-INPUT(1,2) = 5
ASSIGN P-INPUT(2,2) = 3
ASSIGN P-INPUT(3,2) = 3
ASSIGN P-INPUT(4,2) = 3
*
ASSIGN P-STEK(1,1) = 7
ASSIGN P-STEK(2,1) = 12
ASSIGN P-STEK(3,1) = 15
ASSIGN P-STEK(4,1) = 18
ASSIGN P-STEK(1,2) = 5
ASSIGN P-STEK(2,2) = 3
ASSIGN P-STEK(3,2) = 3
ASSIGN P-STEK(4,2) = 3
*
* нямнбмни жхйк
*
REPEAT
*
  IF MAX-EL(N-DATA) = 0 THEN /* еякх бнгбпюр ме бшдекъел ярейх
*
  CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B /* ярей C дюмшлх
  CALL 'NULX' ' '  N-DATA-B
  CALL 'GTSX' L-DEL-B  Q-DEL-B  N-DEL-B  /* ярей я ISN сдюкъелшу гюохяеи
  CALL 'NULX' ' '  N-DEL-B
*
  PERFORM LOAD-PROC
  ASSIGN C-DATA1-B = T-KEY
  ASSIGN C-DATA2-B = L-KEY
  CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
*
END-IF
*
  REPEAT
*
  RESET #FIELD-01(*) #FIELD-02(*) #FIELD-03(*) #FIELD-04(*)
*
  PERFORM ARRY-PROC
*
  IF #OPSYS = 'W'  INPUT MARK F-MARK  USING MAP 'NAVNUM1'
    ELSE  INPUT MARK F-MARK  USING MAP 'MAPNUM1'
  END-IF
*
  RESET FL-CURS
*  COMPUTE C-CURS = *CURS-LINE - F-LINE
   FOR C-CURS 1 Q-LINE
     IF *CURS-FIELD = POS(#FIELD-01(C-CURS)) OR
                    = POS(#FIELD-02(C-CURS)) OR
                    = POS(#FIELD-03(C-CURS)) OR
                    = POS(#FIELD-04(C-CURS))
            ESCAPE BOTTOM  END-IF
   END-FOR
  IF C-CURS = 1 THRU Q-LINE THEN
    ASSIGN  P-CURS = *CURS-COL
    FOR C-LINE = 1 TO Q-FIELD
      COMPUTE B-FIELD = P-INPUT(C-LINE,1) + P-INPUT(C-LINE,2) - 1
      IF P-CURS = P-INPUT(C-LINE,1) THRU B-FIELD THEN
        ESCAPE BOTTOM
      END-IF
    END-FOR
    IF C-LINE <= Q-FIELD
      THEN ASSIGN P-CURS = C-LINE
      ELSE ASSIGN P-CURS = 1
    END-IF
  ELSE
    ASSIGN FL-CURS = 1
    MOVE 1 TO C-CURS P-CURS
  END-IF
*
  DECIDE FOR EVERY CONDITION
    WHEN *PF-KEY = 'PF1'
      INCLUDE CCHELP '48'
      ESCAPE TOP
    WHEN *PF-KEY = 'PF3'
      CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
      RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
      ESCAPE BOTTOM
    WHEN *PF-KEY NE 'PF3'
      PERFORM CHECK-PROC
      PERFORM SCAN-PROC
    WHEN *PF-KEY = 'PF4'   PERFORM ADD-PROC
    WHEN *PF-KEY = 'PF5'
      PERFORM UPD-PROC
      CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
      RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
      ESCAPE BOTTOM
    WHEN *PF-KEY = 'PF7'
      MOVE 1 TO P-CURS C-CURS
      COMPUTE FIRST-EL(N-DATA) = FIRST-EL(N-DATA) - Q-LINE
      IF FIRST-EL(N-DATA) <= 0 THEN ASSIGN FIRST-EL(N-DATA) = 1 END-IF
    WHEN *PF-KEY = 'PF8'
      MOVE 1 TO P-CURS C-CURS
      COMPUTE C-DATA1 = FIRST-EL(N-DATA) + Q-LINE - 1
      IF C-DATA1 <= MAX-EL(N-DATA) THEN
        COMPUTE FIRST-EL(N-DATA) = C-DATA1 + 1
      END-IF
    WHEN *PF-KEY = 'PF9'
      MOVE 1 TO P-CURS C-CURS
      ASSIGN FIRST-EL(N-DATA) = 1
    WHEN *PF-KEY = 'PF10'
      MOVE 1 TO P-CURS C-CURS
      ASSIGN FIRST-EL(N-DATA) = MAX-EL(N-DATA)
    WHEN *PF-KEY = 'PF12' PERFORM SORT-PROC
    WHEN NONE IGNORE
  END-DECIDE
  COMPUTE F-MARK = P-CURS + Q-FIELD * (C-CURS - 1) - 1
*
  END-REPEAT
  ESCAPE BOTTOM
END-REPEAT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю оепеяшкйх дюммшу б люяяхб щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ARRY-PROC
*
  RESET FIELD-FF(*) FIELD-ISN(*) FIELD-UP(*)
*
  ASSIGN C-DATA = FIRST-EL(N-DATA)
*
  FOR C-LINE = 1 TO Q-LINE
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) RD-REC N-DATA-B
    ADD 1 TO C-DATA
  END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнялнрпю ярпнй щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SCAN-PROC
*
ASSIGN C-DATA = FIRST-EL(N-DATA)
RESET C-DEL
*
FOR C-LINE = 1 TO Q-LINE /* опнялюрпхбюел ярпнйх щйпюмю
*
  ASSIGN C-DATA-B = C-DATA
*
  IF #FIELD-01(C-LINE) NE 0 THEN                  /* ярпнйю ме сдюкемю
*
    CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
*
    IF STEK-REC NE INPUT-REC(C-LINE) THEN         /* ярпнйю хглемемю
      ASSIGN FIELD-FF(C-LINE) = H'01'             /* бгбндхл ткюц хгл
      CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) WR-REC N-DATA-B
    END-IF
*
    IF C-DATA > MAX-EL(N-DATA) THEN
     ASSIGN MAX-EL(N-DATA) = C-DATA END-IF
*
  ELSE                                              /* ярпнйю сдюкемю
      IF C-DATA > MAX-EL(N-DATA)
        IF #FIELD-01(C-LINE:Q-LINE) NE 0 IGNORE
         ELSE ESCAPE BOTTOM END-IF
      END-IF
    CALL 'RWSX' C-DATA-B H'FF' WR-REC N-DATA-B H'00000001' H'00000001'
    ADD 1 TO C-DEL
    IF FIELD-ISN(C-LINE) NE 0 THEN
      ADD 1 TO MAX-EL(N-DEL)
      ASSIGN C-DEL-B = MAX-EL(N-DEL)
      CALL 'RWSX' C-DEL-B FIELD-ISN(C-LINE) WR-REC N-DEL-B
    END-IF
  END-IF
*
  ADD 1 TO C-DATA
*
END-FOR
*
IF C-DEL NE 0 THEN
  CALL 'PRSX' H'00000001' H'00000001' N-DATA-B
  COMPUTE MAX-EL(N-DATA) = MAX-EL(N-DATA) - C-DEL
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю дсакхпнбюмхъ ярпнй
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ADD-PROC
  COMPUTE C-DATA = FIRST-EL(N-DATA) + C-CURS - 1
  IF MAX-EL(N-DATA) >= C-DATA AND #FIELD-01(C-CURS) NE 0 THEN
    FOR C-DATA1 MAX-EL(N-DATA) TO C-DATA STEP -1
      COMPUTE C-DATA2 = C-DATA1 + 1
      ASSIGN C-DATA1-B = C-DATA1
      ASSIGN C-DATA2-B = C-DATA2
      CALL 'MVSX' C-DATA1-B C-DATA2-B N-DATA-B
    END-FOR
    RESET FIELD-ISN(C-CURS) FIELD-UP(C-CURS)
    ASSIGN FIELD-FF(C-CURS) = H'01'
    CALL 'RWSX' C-DATA1-B INPUT-REC(C-CURS) WR-REC N-DATA-B
    ADD 1 TO MAX-EL(N-DATA)
    ASSIGN P-CURS = 1
  END-IF
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю янпрхпнбйх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SORT-PROC
*
ASSIGN C-DATA1-B = P-STEK(P-CURS,1)
ASSIGN C-DATA2-B = P-STEK(P-CURS,2)
CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* времхе дюммшу хг IBS-SYS-FILE б ярей я дюммшлх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE LOAD-PROC
*
  ASSIGN C-DATA = 0
  FIND IBS-NU-FILE    KK-F = 'NU' AND  OG-ID =  OG-IDENT-G
    COMPUTE C-DATA = C-DATA + 1
    IF C-DATA > Q-DATA THEN ESCAPE BOTTOM END-IF
*
    ASSIGN STEK-FF  = H'00'
    ASSIGN STEK-ISN = *ISN
*
    ASSIGN STEK-01 = KD-F    /* явер
*   ASSIGN STEK-02 = PO-ID   /* мювхяк.
*   ASSIGN STEK-03 = PD-ID   /*  сдепф.
    ASSIGN NAME    = NM-PL
*   ASSIGN STEK-01 = NAME-SS /* явер
    ASSIGN STEK-02 = NAME-NA /* мювхяк.
    ASSIGN STEK-03 = NAME-UD /*  сдепф.
    ASSIGN STEK-04 = NAME-NAL /* мювхяк. LIM
*
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC WR-REC N-DATA-B
*
  END-FIND
*
  ASSIGN MAX-EL(N-DATA)   = C-DATA
  ASSIGN FIRST-EL(N-DATA) = 1
  ASSIGN MAX-EL(N-DEL)    = 0
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнбепйх дюммшу щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-PROC
*
FOR C-LINE = 1 TO Q-LINE /* опнялюрпхбюел ярпнйх щйпюмю
*
  IF #FIELD-01(C-LINE) NE 0 THEN                /* ярпнйю ме сдюкемю
    EXAMINE #FIELD-01-A(*) #FIELD-01-A(C-LINE) GIVING NUMBER C-DUBL
    IF C-DUBL > 1 THEN
      REINPUT'дсакхпнбюмхе яверю мю щйпюме'
      MARK *#FIELD-01(C-LINE) ALARM
    END-IF
*
    RESET C-DATA-B
    COMPUTE C-DATA2 = FIRST-EL(N-DATA) + Q-LINE - 1
    REPEAT
      ASSIGN C-DATA1-B = T-KEY
      ASSIGN C-DATA2-B = L-KEY
      CALL 'CMPX' #FIELD-01(C-LINE)
      C-DATA1-B C-DATA2-B N-DATA-B C-DATA-B
      IF C-DATA1-B = H'00000000' THEN ESCAPE BOTTOM END-IF
      ASSIGN C-DATA1 = C-DATA1-B
      IF NOT(C-DATA1 = FIRST-EL(N-DATA) THRU C-DATA2) THEN
        REINPUT'дсакхпнбюмхе яверю б люяяхбе'
        MARK *#FIELD-01(C-LINE) ALARM
      END-IF
      ASSIGN C-DATA-B = C-DATA1-B
    END-REPEAT
    COMPUTE C-DATA = FIRST-EL(N-DATA) + C-LINE - 1
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
    IF STEK-REC NE ' '
       IF STEK-ISN NE 0
          FIND IBS-NU-FILE KK-F  = 'NU' AND KD-F = #FIELD-01(C-LINE)
                                        AND OG-ID = OG-IDENT-G
             IF *ISN NE STEK-ISN
                REINPUT'дсакхпнбюмхе яверю б тюике'
                MARK *#FIELD-01(C-LINE) ALARM
             END-IF
          END-FIND
       END-IF
    END-IF
    IF STEK-REC = ' '
       FIND IBS-NU-FILE KK-F  = 'NU' AND KD-F = #FIELD-01(C-LINE)
                                        AND OG-ID = OG-IDENT-G
          IF *NUMBER > 0
             REINPUT'дсакхпнбюмхе яверю т тюике'
             MARK *#FIELD-01(C-LINE) ALARM
          END-IF
       END-FIND
    END-IF
    IF #FIELD-04(C-LINE)  = 0
       REINPUT 'мювхякемхе' MARK *#FIELD-04(C-LINE) ALARM
    END-IF
    IF #FIELD-02(C-LINE)  = 0
       REINPUT 'мювхякемхе' MARK *#FIELD-02(C-LINE) ALARM
    END-IF
    IF #FIELD-03(C-LINE)  = 0
       REINPUT 'сдепфюмхе'  MARK *#FIELD-03(C-LINE) ALARM
    END-IF
    ELSE                                          /* ярпнйю сдюкемю
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
  END-IF
*
END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю хглемемхъ дюммшу
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE UPD-PROC
*
FOR C-DEL 1 TO MAX-EL(N-DEL)
  ASSIGN C-DEL-B = C-DEL
  CALL 'RWSX' C-DEL-B STEK-ISN RD-REC N-DEL-B
  GET IBS-NU-FILE STEK-ISN
  DELETE
END-FOR
*
FOR C-DATA 1 TO MAX-EL(N-DATA)
*
  ASSIGN C-DATA-B = C-DATA
  CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
*
  IF STEK-FF = H'01' THEN
*
    IF STEK-ISN NE 0 THEN GET IBS-NU-FILE STEK-ISN END-IF
*
    ASSIGN IBS-NU-FILE.OG-ID = OG-IDENT-G
    ASSIGN IBS-NU-FILE.KD-F  = STEK-01
*   ASSIGN NAME-SS = STEK-01
    ASSIGN NAME-NA = STEK-02
    ASSIGN NAME-UD = STEK-03
    ASSIGN NAME-NAL = STEK-04
    ASSIGN IBS-NU-FILE.NM-PL = NAME
    ASSIGN IBS-NU-FILE.KK-F  = 'NU'
*
    IF STEK-ISN NE 0
      THEN UPDATE
      ELSE STORE IBS-NU-FILE
    END-IF
*
  END-IF
*
  END OF TRANSACTION
*
END-FOR
*
END-SUBROUTINE
END
