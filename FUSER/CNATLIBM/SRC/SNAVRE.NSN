* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVRE
* :UID MSA
* :Mode S
* :CP
* :Date 20101018
* :Time 1405090
* <Natural Source Header /*<<RO>
*********************************************************************
*                                                                   *
* бедемхе йндхтхйюрнпю пецхнмнб
*                                                                   *
*********************************************************************
DEFINE DATA
*  GLOBAL USING UFROG       /* цкнаюкэмше оепелеммше дкъ бяеи яхярелш
PARAMETER USING PRMNAVI
  LOCAL  USING LCLKKL        /* VIEW мю тюик IBS-SYS-FILE
  LOCAL  USING LCLFROL1      /* наыхе оепелеммше
  LOCAL  USING LCLFROL4      /* наыхе оепелеммше
  LOCAL
    1 INPUT-REC(A062/1:15)
    1 REDEFINE INPUT-REC
      2 #INPUT-REC(15)
* онкъ мебшбндхлше мю щйпюм
        3 FIELD-FF  (B001) /* ткюц хглемемхъ/сдюкемхъ гюохях
        3 FIELD-ISN (I4) /* ISN гюохях
        3 FIELD-UP  (A001) /* ткюц гюыхрш гюохях
* онкъ бшбндхлше мю щйпюм
        3 #FIELD-01 (N005)      /* йнд
        3 REDEFINE #FIELD-01
          4 #FIELD-01-A(A005)
        3 #FIELD-02 (A050)      /* нангмювемхе
        3 #FIELD-03 (A001)
* дхмюлхвеяйхе юрпхасрш дкъ бшбндхлшу онкеи
    1 #FIELD-01C (C/1:15)
    1 #FIELD-02C (C/1:15)
*
* ярпсйрспю щкелемрю ярейю я дюммшлх
*
    1 STEK-REC(A62)
    1 REDEFINE STEK-REC
      2 STEK-FF(B01)
      2 STEK-ISN(I4)
      2 STEK-UP(A01)
*
      2 STEK-01(N05)
      2 STEK-02(A50)
      2 STEK-03(A01)
    1 KEY1(A10)               /*  онхяйнбши йкчв мювюкэмши
    1 REDEFINE KEY1
      2 KEYOG1(N5)            /*  нпцюмхгюжхъ
      2 KEYKD1(N5)            /*  йнд
    1 KEY2(A10)               /*  онхяйнбши йкчв йнмевмши
    1 REDEFINE KEY2
      2 KEYOG2(N5)
      2 KEYKD2(N5)
    1 KEY3(A10)               /*  онхяйнбши йкчв йнмрпнкэмши
    1 REDEFINE KEY3
      2 KEYOG3(N5)
      2 KEYKD3(N5)
    1 #DATA(N3)
* FOR MAP
    1 #KD(N05)                /*  йнд ондп.
    1 #NAME(A50)
    1 CURS-FLD   (I0004)
END-DEFINE
*
SET KEY PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
*
MOVE 62  TO L-DATA L-DATA-B     /* дкхмю щкелемрю б ярейе я дюммшлх
MOVE 1000 TO Q-DATA Q-DATA-B    /* йнк-бн щкелемрнб б ярейе я дюммшлх
*
MOVE 4   TO L-DEL  L-DEL-B      /* дкхмю щкелемрю б ярейе я ISN
MOVE 1000 TO Q-DEL  Q-DEL-B     /* йнкхвеярбн щкелемрнб б ярейе я ISN
*
ASSIGN Q-LINE = 15          /* ярпнй мю щйпюме
ASSIGN T-KEY = 7            /* мювюкэмюъ онгхжхъ йкчвебнцн юрпхасрю
ASSIGN L-KEY = 5            /* дкхмю йкчвебнцн юрпхасрю
*
ASSIGN P-STEK(1,1) = 7
ASSIGN P-STEK(2,1) = 12
ASSIGN P-STEK(1,2) = 5
ASSIGN P-STEK(2,2) = 50
#OPSYS := *OPSYS
*
* нямнбмни жхйк
*
  RESET N-DATA-B N-DATA N-DEL-B N-DEL
  CALL 'GTNX' N-DATA-B
  N-DATA := N-DATA-B
  CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B /* ярей C дюмшлх
  CALL 'GTNX' N-DEL-B
  N-DEL := N-DEL-B
  CALL 'GTSX' L-DEL-B  Q-DEL-B  N-DEL-B  /* ярей я ISN сдюкъелшу гюохяеи
*
REPEAT
  ASSIGN #DATA = *DATA
  INCLUDE INPPC '"NAVREM1"' '"MAPREM1"'
  IF *PF-KEY = 'PF3'  ESCAPE BOTTOM  END-IF
  INCLUDE CCUFRO50
  ASSIGN C-CURS = 1           /* ярпнйю я йспянпнл
  IF #KD = 0
    ASSIGN KEYKD1 = 1  ASSIGN KEYKD2 = 99999
    ELSE  ASSIGN KEYKD1 = #KD  ASSIGN KEYKD2 = #KD
  END-IF
*
*
  PERFORM LOAD-PROC
  ASSIGN C-DATA1-B = T-KEY
  ASSIGN C-DATA2-B = L-KEY
  CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
*
*
  REPEAT
    RESET #FIELD-01(*) #FIELD-02(*) #FIELD-03(*)
    PERFORM ARRY-PROC
    IF #RW = 'R'  SET KEY PF5=OFF
      #FIELD-01C(*) := (AD=PD)
    END-IF
  INCLUDE INPPC '"NAVREM2"' '"MAPREM2"'
  CURS-FLD := *CURS-FIELD
  FOR C-CURS 1 Q-LINE
   IF CURS-FLD = POS(#FIELD-01(C-CURS)) P-CURS := 1 ESCAPE BOTTOM END-IF
   IF CURS-FLD = POS(#FIELD-02(C-CURS)) P-CURS := 2 ESCAPE BOTTOM END-IF
  END-FOR
*
  DECIDE FOR EVERY CONDITION
    WHEN *PF-KEY = 'PF3'
      ESCAPE BOTTOM
    WHEN *PF-KEY NE 'PF3'
      PERFORM CHECK-PROC
      PERFORM SCAN-PROC
    WHEN *PF-KEY = 'PF4' AND FL-CURS = 0  PERFORM ADD-PROC
    WHEN *PF-KEY = 'PF5'
      IF MAX-EL(N-DATA) NE 0 OR MAX-EL(N-DEL) NE 0
         PERFORM UPD-PROC
         ESCAPE BOTTOM
      END-IF
    WHEN *PF-KEY = 'PF7'
      RESET CURS-FLD
      COMPUTE FIRST-EL(N-DATA) = FIRST-EL(N-DATA) - Q-LINE
      IF FIRST-EL(N-DATA) <= 0 THEN ASSIGN FIRST-EL(N-DATA) = 1 END-IF
    WHEN *PF-KEY = 'PF8'
      RESET CURS-FLD
      COMPUTE C-DATA1 = FIRST-EL(N-DATA) + Q-LINE - 1
      IF C-DATA1 <= MAX-EL(N-DATA) THEN
        COMPUTE FIRST-EL(N-DATA) = C-DATA1 + 1
      END-IF
    WHEN *PF-KEY = 'PF9'
      RESET CURS-FLD
      ASSIGN FIRST-EL(N-DATA) = 1
    WHEN *PF-KEY = 'PF10'
      RESET CURS-FLD
      ASSIGN FIRST-EL(N-DATA) = MAX-EL(N-DATA)
    WHEN *PF-KEY = 'PF11'
      ASSIGN GP-IDENT-G = #FIELD-01(C-CURS)
      CALL'FRSX' N-DATA-B  CALL 'FRSX' N-DEL-B
      RESET MAX-EL(N-DATA-B) MAX-EL(N-DEL-B)
      ESCAPE BOTTOM
    WHEN *PF-KEY = 'PF12' PERFORM SORT-PROC
    WHEN NONE IGNORE
  END-DECIDE
*
  END-REPEAT
  SET CONTROL 'K0'
  IF #DATA > 0 ESCAPE BOTTOM  END-IF
END-REPEAT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю оепеяшкйх дюммшу б люяяхб щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ARRY-PROC
*
  RESET FIELD-FF(*) FIELD-ISN(*) FIELD-UP(*)
*
  ASSIGN C-DATA = FIRST-EL(N-DATA)
*
  MOVE (AD=I) TO #FIELD-01C(*)
  FOR C-LINE = 1 TO Q-LINE
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) RD-REC N-DATA-B
    IF #FIELD-03(C-LINE) = '*' #FIELD-01C(C-LINE) := (AD=PD) END-IF
    ADD 1 TO C-DATA
  END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнялнрпю ярпнй щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SCAN-PROC
*
ASSIGN C-DATA = FIRST-EL(N-DATA)
RESET C-DEL
*
FOR C-LINE = 1 TO Q-LINE /* опнялюрпхбюел ярпнйх щйпюмю
*
  ASSIGN C-DATA-B = C-DATA
*
  IF #FIELD-01(C-LINE) NE 0 THEN                  /* ярпнйю ме сдюкемю
*
    CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
*
    IF STEK-REC NE INPUT-REC(C-LINE) THEN         /* ярпнйю хглемемю
      ASSIGN FIELD-FF(C-LINE) = H'01'             /* бгбндхл ткюц хглем
      CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) WR-REC N-DATA-B
    END-IF
*
    IF C-DATA > MAX-EL(N-DATA) ASSIGN MAX-EL(N-DATA) = C-DATA END-IF
*
  ELSE                                              /* ярпнйю сдюкемю
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
    Q-DEL-B := 1  L-DEL-B := 1
    CALL 'RWSX' C-DATA-B H'FF' WR-REC N-DATA-B Q-DEL-B L-DEL-B
    ADD 1 TO C-DEL
    IF FIELD-ISN(C-LINE) NE 0 THEN
      ADD 1 TO MAX-EL(N-DEL)
      ASSIGN C-DEL-B = MAX-EL(N-DEL)
      CALL 'RWSX' C-DEL-B FIELD-ISN(C-LINE) WR-REC N-DEL-B
    END-IF
  END-IF
*
  ADD 1 TO C-DATA
*
END-FOR
*
IF C-DEL NE 0 THEN
  Q-DEL-B := 1   L-DEL-B := 1
  CALL 'PRSX' Q-DEL-B L-DEL-B N-DATA-B
  COMPUTE MAX-EL(N-DATA) = MAX-EL(N-DATA) - C-DEL
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю дсакхпнбюмхъ ярпнй
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ADD-PROC
  COMPUTE C-DATA = FIRST-EL(N-DATA) + C-CURS - 1
  IF MAX-EL(N-DATA) >= C-DATA AND #FIELD-01(C-CURS) NE 0 THEN
    FOR C-DATA1 MAX-EL(N-DATA) TO C-DATA STEP -1
      COMPUTE C-DATA2 = C-DATA1 + 1
      ASSIGN C-DATA1-B = C-DATA1
      ASSIGN C-DATA2-B = C-DATA2
      CALL 'MVSX' C-DATA1-B C-DATA2-B N-DATA-B
    END-FOR
    RESET FIELD-ISN(C-CURS) FIELD-UP(C-CURS)
    ASSIGN FIELD-FF(C-CURS) = H'01' RESET #FIELD-03(C-CURS)
    CALL 'RWSX' C-DATA1-B INPUT-REC(C-CURS) WR-REC N-DATA-B
    ADD 1 TO MAX-EL(N-DATA)
    ASSIGN P-CURS = 1
  END-IF
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю янпрхпнбйх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SORT-PROC
*
ASSIGN C-DATA1-B = P-STEK(P-CURS,1)
ASSIGN C-DATA2-B = P-STEK(P-CURS,2)
CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
*
END-SUBROUTINE
*
* INCLUDE UFROC3
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* времхе дюммшу хг IBS-SYS-FILE б ярей я дюммшлх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE LOAD-PROC
*
  ASSIGN C-DATA = 0
  FIND IBS-KK-FILE OG-ID=OG-IDENT-G AND KK-F = 'RE' SORTED KD-F
  /* бшанпйю он йндс б юбрнмнлмнл пефхле
    IF #KD NE 0 AND #DATA = 0 ACCEPT IF #KD = KD-F END-IF
    IF #NAME NE ' ' AND NA-F NE SCAN #NAME ESCAPE TOP END-IF
*   ASSIGN C-DATA = *COUNTER
    COMPUTE C-DATA = C-DATA + 1
    IF C-DATA > Q-DATA THEN ESCAPE BOTTOM END-IF
*
    ASSIGN STEK-FF  = H'00'
    ASSIGN STEK-ISN = *ISN
*
    ASSIGN STEK-01 = KD-F
    ASSIGN STEK-02 = NA-F
*
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC WR-REC N-DATA-B
*
  END-FIND
*
  ASSIGN MAX-EL(N-DATA)   = C-DATA
  ASSIGN FIRST-EL(N-DATA) = 1
  ASSIGN MAX-EL(N-DEL)    = 0
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнбепйх дюммшу щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-PROC
*
FOR C-LINE = 1 TO Q-LINE /* опнялюрпхбюел ярпнйх щйпюмю
*
  IF #FIELD-01(C-LINE) NE 0 THEN                /* ярпнйю ме сдюкемю
    EXAMINE #FIELD-01-A(*) #FIELD-01-A(C-LINE) GIVING NUMBER C-DUBL
    IF C-DUBL > 1 THEN
      REINPUT'дсакхпнбюмхе хдемрхтхйюрнпю'
      MARK *#FIELD-01(C-LINE) ALARM
    END-IF
*
    RESET C-DATA-B
    COMPUTE C-DATA2 = FIRST-EL(N-DATA) + Q-LINE - 1
    REPEAT
      ASSIGN C-DATA1-B = T-KEY
      ASSIGN C-DATA2-B = L-KEY
      CALL 'CMPX' #FIELD-01(C-LINE)
      C-DATA1-B C-DATA2-B N-DATA-B C-DATA-B
      IF C-DATA1-B = H'00000000' THEN ESCAPE BOTTOM END-IF
      ASSIGN C-DATA1 = C-DATA1-B
      IF NOT(C-DATA1 = FIRST-EL(N-DATA) THRU C-DATA2) THEN
        REINPUT'дсакхпнбюмхе хдемрхтхйюрнпю'
        MARK *#FIELD-01(C-LINE) ALARM
      END-IF
      ASSIGN C-DATA-B = C-DATA1-B
    END-REPEAT
    ASSIGN KEYKD3 = #FIELD-01(C-LINE)
    COMPUTE C-DATA = FIRST-EL(N-DATA) + C-LINE - 1
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
    IF STEK-REC NE ' '
      IF STEK-ISN NE 0
        FIND IBS-KK-FILE OG-ID = OG-IDENT-G AND KK-F = 'RE'
          AND KD-F = KEYKD3
          IF *ISN NE STEK-ISN
            REINPUT'дсакхпнбюмхе хдемрхтхйюрнпю'
              MARK *#FIELD-01(C-LINE) ALARM
          END-IF
        END-FIND
      END-IF
    END-IF
    IF #FIELD-02(C-LINE) = ' '
      REINPUT 'мюхлемнбюмхе' MARK *#FIELD-02(C-LINE) ALARM
    END-IF
    ELSE                                          /* ярпнйю сдюкемю
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
  END-IF
*
END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю хглемемхъ дюммшу
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE UPD-PROC
RESET STEK-ISN
FOR C-DEL 1 TO MAX-EL(N-DEL)
  ASSIGN C-DEL-B = C-DEL
  CALL 'RWSX' C-DEL-B STEK-ISN RD-REC N-DEL-B
  GET IBS-KK-FILE STEK-ISN
  DELETE
END-FOR
*
FOR C-DATA 1 TO MAX-EL(N-DATA)
*
  ASSIGN C-DATA-B = C-DATA
  CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
*
  IF STEK-FF = H'01' THEN
*
    IF STEK-ISN NE 0 THEN GET IBS-KK-FILE STEK-ISN END-IF
*
    ASSIGN IBS-KK-FILE.OG-ID = OG-IDENT-G
    ASSIGN IBS-KK-FILE.KK-F  = 'RE'
    ASSIGN IBS-KK-FILE.KD-F  = STEK-01
    ASSIGN IBS-KK-FILE.NA-F  = STEK-02
    IF STEK-ISN NE 0
      THEN UPDATE
      ELSE STORE IBS-KK-FILE
    END-IF
  END-IF
  END OF TRANSACTION
END-FOR
*
END-SUBROUTINE
      CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
      RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
END
