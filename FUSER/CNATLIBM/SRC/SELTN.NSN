* >Natural Source Header 000000 /*<RO>>
* :NatName SELTN
* :UID MSA
* :Mode S
* :CP
* :Date 20080104
* :Time 1639330
* <Natural Source Header /*<<RO>
* —œ»—Œ  “.Õ.                     *
*********************************************************************
DEFINE DATA
  PARAMETER
    1 OG_IDENT_G      (N005)
    1 PODR            (N005)
  LOCAL  USING LCLASRZ       /* VIEW HA ‘A…À IBS-SYS-FILE
  LOCAL  USING LCLFROL1         /* O¡Ÿ»E œEPEMEHH€E
  LOCAL  USING LCLFROL4
  LOCAL  USING LCLAGLOB
  LOCAL  USING LCLSTAKD
  LOCAL
    1 INPUT-REC       (A45/13)
    1 REDEFINE INPUT-REC
      2 #INPUT-REC    (13)
        3 #FIELD-01   (N005)      /* KOƒ
        3 #FIELD-02   (A040)      /* O¡O«HA◊EH»E
    1 STEK-REC        (A045)
    1 REDEFINE STEK-REC
      2 STEK-01       (N005)
      2 STEK-02       (A040)
    1 KEY1            (B010)      /*  œO»CKOB€… KÀﬁ◊ HA◊AÀ‹H€…
    1 REDEFINE KEY1
      2 KEYOG1        (N005)      /*  OP√AH»«A÷»ﬂ
      2 KEYKD1        (N005)      /*  KOƒ
    1 KEY2            (B010)      /*  œO»CKOB€… KÀﬁ◊ KOHE◊H€…
    1 REDEFINE KEY2
      2 KEYOG2        (N005)
      2 KEYKD2        (N005)
    1 #KD             (N005)      /*  KOƒ œOƒP.
    1 #NAME           (A050)
    1 REDEFINE #NAME
      2 MNAME         (A1/50)
    1 PDNAME          (A050)
    1 REDEFINE PDNAME
      2 MPDNAME       (A1/50)
    1 POSIT           (I004)
    1 I               (N004)
    1 II              (N004)
    1 MRK             (A1/13)
    1 MRK-C           (C/13)  INIT ALL <(AD=PN)>
    1 HELP
      2 HSYSTEM       (A009)
      2 NUMHELP       (N009)
    1 SHOW_PROGRESS_BAR (L)   INIT <TRUE>
    1 KOLPR           (N002)
    1 CMD             (A128)
    1 REDEFINE CMD
      2 KOD_MAT_TMP   (A022)
    1 NAME_OF_MODULE  (A008)
    1 TEXT1           (A050)
END-DEFINE
*
  DEFINE WINDOW WIN
    SIZE Q-DEL * L-DEL
    BASE N-DEL / L-DATA
    TITLE TEXT1
    CONTROL SCREEN
    FRAMED ON  POSITION OFF
INCLUDE CCINITPR
SET KEY PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
*
#OPSYS := *OPSYS
MOVE 0   TO N-DATA N-DATA-B     /* HOMEP CTEKA C ƒAHH€M»
CALL 'GTNX' N-DATA-B
N-DATA := N-DATA-B
MOVE 45  TO L-DATA L-DATA-B     /* ƒÀ»HA ›ÀEMEHTA B CTEKE C ƒAHH€M»
MOVE 1000 TO Q-DATA Q-DATA-B    /* KOÀ»◊ECTBO ›ÀEMEHTOB B CTEKE C ƒAHH€M»
*
ASSIGN Q-LINE = 13          /* CTPOK HA ›KPAHE
ASSIGN T-KEY = 1            /* HA◊AÀ‹HAﬂ œO«»÷»ﬂ KÀﬁ◊EBO√O ATP»¡”TA
ASSIGN L-KEY = 5            /* ƒÀ»HA KÀﬁ◊EBO√O ATP»¡”TA
R1. REPEAT
  Q-DEL := 8  L-DEL := 57   N-DEL := 07   L-DATA := 17
  TEXT1 := '«¿ƒ¿…“≈  –»“≈–»» Œ“¡Œ–¿'
  SET WINDOW 'WIN'
  INCLUDE INPPC '"SELTNM3"' '"SELTNM1"'
  IF *PF-KEY = 'PF1'
    REINPUT 'Œœ–≈ƒ≈À»“≈  –»“≈–»» Œ“¡Œ–¿ » Õ¿∆M»“≈ ¬¬Œƒ' (CD=RE)
  END-IF
  MOVE OG_IDENT_G TO KEYOG1 KEYOG2
  IF *PF-KEY = 'PF3'
    CALL 'FRSX' N-DATA-B
      RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
      ESCAPE BOTTOM
    END-IF
  IF #KD = 0
    ASSIGN KEYKD1 = 1  ASSIGN KEYKD2 = 99999
    ELSE  ASSIGN KEYKD1 = #KD  ASSIGN KEYKD2 = #KD
  END-IF
  CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B /* CTEK C ƒAH€M»
  CALL 'NULX' ' '  N-DATA-B
*
  IF #NAME NE ' '
    EXAMINE FULL MNAME(*) FOR ' '  INDEX C-DEL
    C-DEL := C-DEL - 1
  END-IF
  PERFORM LOAD-PROC
  IF C-DATA = 0  REINPUT 'Õ≈“ ƒ¿ÕÕ€’' ALARM  END-IF
  ASSIGN C-DATA1-B = T-KEY
  ASSIGN C-DATA2-B = L-KEY
  CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
  Q-DEL := 21  L-DEL := 57   N-DEL := 02   L-DATA := 17
  TEXT1 := '—ÔËÒÓÍ ÓÚÓ·‡ÌÌ˚ı Ú‡·.ÌÓÏÂÓ‚'
  SET WINDOW 'WIN'
*
  REPEAT
    RESET #FIELD-01(*) #FIELD-02(*)
    RESET INITIAL MRK-C(*)
    PERFORM ARRY-PROC
    IF *PF-KEY = 'PF7' OR = 'PF8' OR = 'PF9' OR = 'PF10'
       RESET POSIT
     END-IF
    INCLUDE INPPC '"SELTNM4"' '"SELTNM2"'
    POSIT := *CURS-FIELD
    FOR C-CURS 1 Q-LINE
      IF POSIT = POS(MRK(C-CURS))  ESCAPE BOTTOM  END-IF
    END-FOR
    DECIDE FOR EVERY CONDITION
      WHEN *PF-KEY = 'PF3'
        ESCAPE BOTTOM (R1.)
      WHEN *PF-KEY = 'PF7'
        COMPUTE FIRST-EL(N-DATA) = FIRST-EL(N-DATA) - Q-LINE
        IF FIRST-EL(N-DATA) <= 0   FIRST-EL(N-DATA) := 1 END-IF
      WHEN *PF-KEY = 'PF8'
        COMPUTE C-DATA1 = FIRST-EL(N-DATA) + Q-LINE - 1
        IF C-DATA1 <= MAX-EL(N-DATA)
          COMPUTE FIRST-EL(N-DATA) = C-DATA1 + 1
        END-IF
      WHEN *PF-KEY = 'PF9'
        ASSIGN FIRST-EL(N-DATA) = 1
      WHEN *PF-KEY = 'PF10'
        ASSIGN FIRST-EL(N-DATA) = MAX-EL(N-DATA)
      WHEN *PF-KEY = 'PF11'
        PODR := #FIELD-01(C-CURS)
        ESCAPE BOTTOM (R1.)
      WHEN NONE IGNORE
    END-DECIDE
  END-REPEAT
END-REPEAT
  CALL 'FRSX' N-DATA-B
  RESET MAX-EL(N-DATA)
  SET WINDOW OFF
  ESCAPE ROUTINE
*
DEFINE SUBROUTINE ARRY-PROC
  ASSIGN C-DATA = FIRST-EL(N-DATA)
  FOR C-LINE = 1 TO Q-LINE
    IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) RD-REC N-DATA-B
    MOVE (AD=I) TO MRK-C(C-LINE)
    ADD 1 TO C-DATA
  END-FOR
END-SUBROUTINE
*
DEFINE SUBROUTINE LOAD-PROC
  ASSIGN C-DATA = 0
  IF #KD = 0
  FIND ASRZ-LS-FILE TN-F >= 1
    INCLUDE CCPROCF
    PDNAME := FA-F
    IF #NAME NE ' '
      IF MNAME(1:C-DEL) = MPDNAME(1:C-DEL) IGNORE
      ELSE ESCAPE TOP  END-IF
    END-IF
    COMPRESS PDNAME #IM #OT INTO STEK-02
    COMPUTE C-DATA = C-DATA + 1
    IF C-DATA > Q-DATA THEN ESCAPE BOTTOM END-IF
    ASSIGN STEK-01 = TN-F
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC WR-REC N-DATA-B
  END-FIND
  ELSE
  FIND ASRZ-LS-FILE TN-F = #KD
    INCLUDE CCPROCF
    PDNAME := FA-F
    IF #NAME NE ' '
      IF MNAME(1:C-DEL) = MPDNAME(1:C-DEL) IGNORE
      ELSE ESCAPE TOP  END-IF
    END-IF
    COMPRESS PDNAME #IM #OT INTO STEK-02
    COMPUTE C-DATA = C-DATA + 1
    IF C-DATA > Q-DATA THEN ESCAPE BOTTOM END-IF
    ASSIGN STEK-01 = TN-F
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC WR-REC N-DATA-B
  END-FIND
  END-IF
  ASSIGN MAX-EL(N-DATA)   = C-DATA
  ASSIGN FIRST-EL(N-DATA) = 1
END-SUBROUTINE
END
