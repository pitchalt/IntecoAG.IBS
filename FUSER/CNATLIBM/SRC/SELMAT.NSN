* >Natural Source Header 000000 /*<RO>>
* :NatName SELMAT
* :UID IEN
* :Mode S
* :CP
* :Date 20001219
* :Time 1314330
* <Natural Source Header /*<<RO>
DEFINE DATA
 PARAMETER
    1 OG_IDENT_G    (N005)
    1 KODMAT           (A022)
    1 NAMEMAT          (A030)
 LOCAL  USING LCLASMAT
 LOCAL  USING LCLSTAKF
 LOCAL
    1 C-DEL            (P007)
    1 #TIME1           (N007)
    1 REDEFINE #TIME1
      2 HH             (N002)
      2 MM             (N002)
      2 SS             (N002)
      2 T              (N001)
    1 TYPE_SEARCH      (N005)
    1 SEARCH                    /* ÃPÓÏÏA ÏOÈCKA
      2 SEARCH-01      (A022)      /* KOÄ MATEPÈAËA
      2 SEARCH-02      (A050)      /* ÈMß MATEPÈAËA
      2 REDEFINE SEARCH-02
        3 MASS         (A1/50)
      2 SEARCH-05      (N005)      /* ÃPÓÏÏA
      2 SEARCH-07      (N005)      /* C×ET
      2 SEARCH-09      (A030)      /* ÏOÄÏÈCÜ ÈÇMEHÈBØEÃO
      2 SEARCH-10      (N005)      /* CKËAÄ
    1 POSIT            (I004)
    1 RMAS             (A050)
    1 REDEFINE RMAS
      2 RMASS          (A1/50)
    1 MESSAGE          (A060)
    1 REDEFINE MESSAGE
      2 MESSAGE40      (A040)
    1 REDEFINE MESSAGE
      2 MESSAGE_MESS   (A040)
    1 KEY_COD1         (A027)
    1 REDEFINE KEY_COD1
      2 KEY_COD1_OG    (N005)
      2 KEY_COD1_MAT   (A022)
    1 KEY_COD2         (A027)
    1 REDEFINE KEY_COD2
      2 KEY_COD2_OG    (N005)
      2 KEY_COD2_MAT   (A022)
    1 KEYKK            (B010)
    1 REDEFINE KEYKK
      2 KEYKKOG        (N005)
      2 KEYKKKK        (N005)
    1 KEYKKK           (B015)
    1 REDEFINE KEYKKK
      2 KEYKKKOG       (N005)
      2 KEYKK1KK       (N005)
      2 KEYKK2KK       (N005)
    1 ISN_TMP          (P011)
    1 N_TMP            (N011)
    1 I_TMP            (N011)
    1 NUM_REC          (P011)
    1 LEN_STACK_MAT    (B004) CONST <73>
    1 NUM_STACK_MAT    (B004)
    1 COL_STACK_MAT    (B004) INIT  <1000>
    1 COL_STACK_MAT_N  (N011) INIT  <1000>
    1 COL_STACK_MAT_TMP(N011)
    1 QUR_STACK_MAT    (B004)
    1 STACK_MAT_TMP    (A160)
    1 STACK_MAT        (A073)
    1 REDEFINE STACK_MAT
      2 ISN_MAT        (P011)
      2 TYPE_REC       (N005)
      2 KM-F           (A022)
      2 NM-F           (A025)
      2 GR-F           (N005)
      2 ML-F           (N005)
      2 BS-F           (N005)
    1 INPUT-REC        (A73/12)
    1 REDEFINE INPUT-REC
      2 INPT           (12)
        3 ISN_MAT      (P011)
        3 TYPE_REC     (N005)
        3 KM-F         (A022)
        3 NM-F         (A025)
        3 GR-F         (N005)
        3 ML-F         (N005)
        3 BS-F         (N005)
    1 I                (N004)
    1 II               (N004)
    1 J                (N004)
    1 K                (N004)
    1 L                (N004)
    1 KEYNAMESTART     (A050)  INIT FULL LENGTH <H'00'>
    1 KEYNAMEEND       (A050)  INIT FULL LENGTH <H'FF'>
    1 MRK              (A1/12)
    1 MRK-C            (C/12)  INIT ALL <(AD=PN)>
    1 SSW              (P007)
    1 SSW1             (P007)
    1 TEXT1            (A050)
    1 C-CURS           (P007)
    1 SHOW_PROGRESS_BAR (L)  INIT <TRUE>
    1 KOLPR            (N002)
    1 CMD              (A128)
    1 REDEFINE CMD
      2 KOD_MAT_TMP    (A022)
    1 NAME_OF_MODULE   (A008)
END-DEFINE
DEFINE WINDOW WIN
  SIZE I * J
  BASE K / L
  TITLE TEXT1
  CONTROL SCREEN
  SET CONTROL 'E=ON'
SEARCH.SEARCH-01 := KODMAT
SC. REPEAT
 REPEAT
  I := 11  J := 56  K := 05  L := 20
  TEXT1 := 'Çàäàéòå ïàðàìåòðû îòáîðà'
  SET WINDOW 'WIN'
  SET KEY  PF1 PF3 PF7 PF8 PF9 PF10 PF11
  INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT USING MAP 'MAPMTM1'
  POSIT := *CURS-FIELD
  TYPE_SEARCH := 0
  RESET MESSAGE
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'ENTR'
    PERFORM CHECK_INPUT
    IF TYPE_SEARCH EQ 0 THEN
      MOVE 'Ýòoò çaïpoc íe oácëyæèâaeòc .' TO MESSAGE
      ESCAPE TOP
    END-IF
    ESCAPE BOTTOM
   VALUE 'PF1'
    DECIDE FOR FIRST CONDITION
      WHEN POSIT EQ POS(SEARCH.SEARCH-01)
        FETCH RETURN 'VMESSKDF'
      WHEN POSIT EQ POS(SEARCH.SEARCH-05)
        PERFORM SELGR SEARCH.SEARCH-05
      WHEN POSIT EQ POS(SEARCH.SEARCH-10)
        PERFORM SELMO SEARCH.SEARCH-10
      WHEN POSIT EQ POS(SEARCH.SEARCH-07)
        PERFORM SELBS SEARCH.SEARCH-07
      WHEN NONE IGNORE
    END-DECIDE
   VALUE 'PF3'
     ESCAPE BOTTOM (SC.)
   NONE VALUE IGNORE
  END-DECIDE
 END-REPEAT
  PERFORM LOAD_DATA
  IF NUM_REC EQ 0 THEN
    RESET #TIME1
    COMPRESS 'Äaííûe íe íaéäeíû, ââeäèòe íoâûe.' TO MESSAGE_MESS
    INCLUDE CCMSG 'MESSAGE_MESS'
  ELSE
    RESET MESSAGE
    SSW1 := 1
    I := 20  J := 72  K := 02  L := 05
    TEXT1 := 'Ñïèñîê îòîáðàííûõ ìàòåðèàëîâ'
    SET WINDOW 'WIN'
    REPEAT
      SSW := SSW1
      RESET INPUT-REC(*) INPUT-REC.ISN_MAT(*) INPUT-REC.TYPE_REC(*)
            INPUT-REC.GR-F(*) INPUT-REC.ML-F(*) INPUT-REC.BS-F(*)
      RESET INITIAL MRK-C(*)
      FOR II 1 12
        IF SSW > NUM_REC  ESCAPE BOTTOM  END-IF
        QUR_STACK_MAT := SSW
        CALL 'RWSX' QUR_STACK_MAT INPUT-REC(II) RD-REC NUM_STACK_MAT
        MOVE (AD=I) TO MRK-C(II)
        ADD 1 TO SSW
      END-FOR
      INPUT USING MAP 'MAPMTM2'
      FOR C-CURS 1 12
        IF *CURS-FIELD = POS(MRK(C-CURS))  ESCAPE BOTTOM  END-IF
      END-FOR
      DECIDE FOR FIRST CONDITION
        WHEN *PF-KEY = 'PF3'  ESCAPE BOTTOM(SC.)
        WHEN *PF-KEY = 'PF7'  SSW1 := SSW1 - 12
          IF SSW1 < 1  SSW1 := 1  END-IF
        WHEN *PF-KEY = 'PF8'
          IF SSW <= NUM_REC  ADD 12 TO SSW1  END-IF
        WHEN *PF-KEY = 'PF9'  SSW1 := 1
        WHEN *PF-KEY = 'PF10' SSW1 := NUM_REC
        WHEN *PF-KEY = 'PF11' AND C-CURS = 1 THRU 12
          KODMAT  := INPUT-REC.KM-F(C-CURS)
          NAMEMAT := INPUT-REC.NM-F(C-CURS)
          ESCAPE BOTTOM(SC.)
        WHEN NONE IGNORE
      END-DECIDE
    END-REPEAT
  END-IF
END-REPEAT
CALL 'FRSX' NUM_STACK_MAT
SET WINDOW OFF
ESCAPE ROUTINE
INCLUDE CCERIN1
DEFINE SUBROUTINE CHECK_INPUT
 SEARCH.SEARCH-05 := ABS(SEARCH.SEARCH-05)
 SEARCH.SEARCH-07 := ABS(SEARCH.SEARCH-07)
 SEARCH.SEARCH-10 := ABS(SEARCH.SEARCH-10)
 DECIDE FOR FIRST CONDITION
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 EQ 0 AND
       SEARCH.SEARCH-02 EQ ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 1   /* BCE
  WHEN SEARCH.SEARCH-01 NE ' '
       TYPE_SEARCH := 2   /* ÏO KOÄÓ
  WHEN SEARCH.SEARCH-05 NE 0 AND SEARCH.SEARCH-01 EQ ' ' AND
       SEARCH.SEARCH-02 EQ ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 3  /* ÏO ÃPÓÏÏE
  WHEN SEARCH.SEARCH-07 NE 0 AND SEARCH.SEARCH-01 EQ ' ' AND
       SEARCH.SEARCH-05 EQ 0 AND SEARCH.SEARCH-02 EQ ' ' AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 4  /* ÏO C×ETÓ
  WHEN SEARCH.SEARCH-10 NE 0 AND SEARCH.SEARCH-01 EQ ' ' AND
       SEARCH.SEARCH-05 EQ 0 AND SEARCH.SEARCH-02 EQ ' ' AND
       SEARCH.SEARCH-07 EQ 0 AND SEARCH.SEARCH-09 EQ ' '
       TYPE_SEARCH := 5  /* ÏO CKËAÄÓ
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 EQ 0 AND
       SEARCH.SEARCH-02 NE ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 6   /* ÏO ÈMEHÈ
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 EQ 0 AND
       SEARCH.SEARCH-02 EQ ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 NE ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 7   /* ÏO ÏOÄÏÈCÈ
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 EQ 0 AND
       SEARCH.SEARCH-02 NE ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 NE ' ' AND SEARCH.SEARCH-10 EQ 0
       TYPE_SEARCH := 8   /* ÏO ÏOÄÏÈCÈ ÏO ÈMEHÈ
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 NE 0 AND
       SEARCH.SEARCH-02 EQ ' ' AND SEARCH.SEARCH-07 EQ 0 AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 NE 0
       TYPE_SEARCH := 9   /* ÏO ÃPÓÏÏE ÏO CKËAÄÓ
  WHEN SEARCH.SEARCH-01 EQ ' ' AND SEARCH.SEARCH-05 EQ 0 AND
       SEARCH.SEARCH-02 EQ ' ' AND SEARCH.SEARCH-07 NE 0 AND
       SEARCH.SEARCH-09 EQ ' ' AND SEARCH.SEARCH-10 NE 0
       TYPE_SEARCH := 10   /* ÏO CKËAÄÓ ÏO C×ETÓ
  WHEN NONE
       TYPE_SEARCH := 0 /* HET
 END-DECIDE
END-SUBROUTINE
DEFINE SUBROUTINE LOAD_DATA
 NUM_REC := 0
 COMPRESS 'Oápaáaòûâaeòc  çaïpoc N' TYPE_SEARCH TO MESSAGE_MESS
 CALLNAT 'WMESSAGE' MESSAGE_MESS
 CALL 'GTNX' NUM_STACK_MAT
 CALL 'GTSX' LEN_STACK_MAT COL_STACK_MAT NUM_STACK_MAT /* ÄAHHÛE
 DECIDE ON FIRST VALUE TYPE_SEARCH
  VALUE 1 /* ×ÈTATÜ BCE
   KEY_COD1.KEY_COD1_OG := OG_IDENT_G KEY_COD2.KEY_COD2_OG := OG_IDENT_G
   KEY_COD1.KEY_COD1_MAT := H'00'
   KEY_COD2.KEY_COD2_MAT := H'FF'
Q. FIND ASUMMAT OK-F EQ KEY_COD1 THRU KEY_COD2
    ISN_TMP := *ISN(Q.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 2 /* ×ÈTATÜ ÏO KOÄÓ
   KEY_COD1.KEY_COD1_OG := OG_IDENT_G
   KEY_COD1.KEY_COD1_MAT := SEARCH.SEARCH-01
 W. FIND ASUMMAT (1) OK-F EQ KEY_COD1
  ISN_TMP := *ISN(W.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 3 /* ×ÈTATÜ ÏO ÃPÓÏÏE
   KEYKK.KEYKKOG := OG_IDENT_G
   KEYKK.KEYKKKK := SEARCH.SEARCH-05
E. FIND ASUMMAT SGR-F EQ KEYKK
    ISN_TMP := *ISN(E.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 4 /* ÏO C×ETÓ
   KEYKK.KEYKKOG := OG_IDENT_G
   KEYKK.KEYKKKK := SEARCH.SEARCH-07
R. FIND ASUMMAT SBS-F EQ KEYKK
    ISN_TMP := *ISN(R.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 5 /* ÏO CKËAÄÓ
   KEYKK.KEYKKOG := OG_IDENT_G
   KEYKK.KEYKKKK := SEARCH.SEARCH-10
T. FIND ASUMMAT SSK-F EQ KEYKK
    ISN_TMP := *ISN(T.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 6 /* ÏO ÈMEHÈ
    EXAMINE FULL MASS(*) FOR ' ' INDEX C-DEL   C-DEL := C-DEL - 1
 RESET INITIAL KEYNAMESTART
 RESET INITIAL KEYNAMEEND
COMPRESS SEARCH.SEARCH-02 KEYNAMESTART TO KEYNAMESTART LEAVING NO SPACE
COMPRESS SEARCH.SEARCH-02 KEYNAMEEND TO KEYNAMEEND LEAVING NO SPACE
Y. FIND ASUMMAT  OG-F EQ OG_IDENT_G THRU OG_IDENT_G
       AND NM-F EQ KEYNAMESTART THRU KEYNAMEEND
    MOVE ASUMMAT.NM-F(1) TO RMAS
    IF MASS(1:C-DEL) = RMASS(1:C-DEL)
*   IF ASUMMAT.NM-F(1) EQ SCAN SEARCH.SEARCH-02  /* ÑÊÀÍÈÐÎÂÀÍÈÅ ÒÅÊÑÒÀ
      ISN_TMP := *ISN(Y.)
      PERFORM ADD_RECORD2LIST
    END-IF
   END-FIND
  VALUE 7 /* ÏO ÏOÄÏÈCÈ
U. READ ASUMMAT IN LOGICAL BY OG-F EQ OG_IDENT_G THRU OG_IDENT_G
     IF ASUMMAT.DI-F EQ SCAN SEARCH.SEARCH-09 THEN
       ISN_TMP := *ISN(U.)
       PERFORM ADD_RECORD2LIST
     END-IF
   END-READ
  VALUE 8 /* ÏO ÈMEHÈ ÏO ÏOÄÏÈCÈ
A. READ ASUMMAT IN LOGICAL BY OG-F EQ OG_IDENT_G THRU OG_IDENT_G
     IF ASUMMAT.DI-F EQ SCAN SEARCH.SEARCH-09 AND
       ASUMMAT.NM-F(1) EQ SCAN SEARCH.SEARCH-02 THEN
       ISN_TMP := *ISN(A.)
       PERFORM ADD_RECORD2LIST
     END-IF
   END-READ
  VALUE 9  /* ÏO ÃPÓÏÏE ÏO CKËAÄÓ
 KEYKKK.KEYKKKOG := OG_IDENT_G
 KEYKKK.KEYKK1KK := SEARCH.SEARCH-05
 KEYKKK.KEYKK2KK := SEARCH.SEARCH-10
S. FIND ASUMMAT SGRSK-F EQ KEYKKK
    ISN_TMP := *ISN(S.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  VALUE 10  /* ÏO CKËAÄÓ ÏO C×ETÓ
 KEYKKK.KEYKKKOG := OG_IDENT_G
 KEYKKK.KEYKK1KK := SEARCH.SEARCH-07
 KEYKKK.KEYKK2KK := SEARCH.SEARCH-10
D. FIND ASUMMAT SBSSK-F EQ KEYKKK
    ISN_TMP := *ISN(D.)
    PERFORM ADD_RECORD2LIST
   END-FIND
  NONE VALUE IGNORE
 END-DECIDE
END-SUBROUTINE
DEFINE SUBROUTINE ADD_RECORD2LIST
  ADD 1 TO NUM_REC
  IF NUM_REC > 2000 THEN
    MESSAGE := 'Haéäeío áoëee 2000 ìaòepèaëoâ.'
    INCLUDE CCMSG 'MESSAGE40'
    ESCAPE BOTTOM
  END-IF
  IF NUM_REC GE COL_STACK_MAT  PERFORM REALLOC_MAT  END-IF
  QUR_STACK_MAT := NUM_REC
  STACK_MAT.ISN_MAT  := ISN_TMP
  STACK_MAT.TYPE_REC := 1
  STACK_MAT.KM-F     := ASUMMAT.KM-F
  STACK_MAT.NM-F     := ASUMMAT.NM-F(1)
  STACK_MAT.GR-F     := ASUMMAT.GR-F
  STACK_MAT.ML-F     := ASUMMAT.ML-F
  STACK_MAT.BS-F     := ASUMMAT.BS-F
  CALL 'RWSX' QUR_STACK_MAT STACK_MAT WR-REC NUM_STACK_MAT
END-SUBROUTINE
DEFINE SUBROUTINE REALLOC_MAT
  CALL 'GTSX' LEN_STACK_MAT COL_STACK_MAT H'00000001'
  N_TMP := COL_STACK_MAT
  FOR I_TMP = 1 TO N_TMP
    QUR_STACK_MAT := I_TMP
    CALL 'RWSX' QUR_STACK_MAT STACK_MAT_TMP RD-REC NUM_STACK_MAT
    CALL 'RWSX' QUR_STACK_MAT STACK_MAT_TMP WR-REC H'00000001'
  END-FOR
  CALL 'FRSX' NUM_STACK_MAT
  COL_STACK_MAT_TMP := COL_STACK_MAT
  ADD 1000 TO COL_STACK_MAT_TMP
  COL_STACK_MAT := COL_STACK_MAT_TMP
  CALL 'GTSX' LEN_STACK_MAT COL_STACK_MAT NUM_STACK_MAT
  FOR I_TMP = 1 TO N_TMP
    QUR_STACK_MAT := I_TMP
    CALL 'RWSX' QUR_STACK_MAT STACK_MAT_TMP RD-REC H'00000001'
    CALL 'RWSX' QUR_STACK_MAT STACK_MAT_TMP WR-REC NUM_STACK_MAT
  END-FOR
  CALL 'FRSX' H'00000001'
  COL_STACK_MAT_N := COL_STACK_MAT
END-SUBROUTINE
END
