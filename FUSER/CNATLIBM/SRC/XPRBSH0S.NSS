* >Natural Source Header 000000 /*<RO>>
* :NatName XPRBSH0S
* :UID MSA
* :Mode S
* :CP
* :Date 20110428
* :Time 1338000
* <Natural Source Header /*<<RO>
DEFINE DATA
/*
LOCAL USING AURBXX0L
LOCAL USING XPRBSC0L
LOCAL USING XPRBSR0L
/*
LOCAL USING RINSFL
/*
LOCAL USING XXERX00A
LOCAL USING XPRBPR0A
/*
LOCAL USING XPRBSH0A
LOCAL USING XPRBSH0L
LOCAL USING XPRBSH1L
LOCAL USING XPCPXX0L
LOCAL USING HLPST
LOCAL USING STAN19L
LOCAL USING XPXXCO0L
LOCAL USING LCLSTAT
LOCAL USING LCLZAKL
LOCAL USING LCLFROL4
LOCAL USING CHR1251
LOCAL USING CHREBCD
LOCAL USING EXL-PARM
LOCAL USING IBS-OBJL
LOCAL USING IBS-VOL
LOCAL
1 #RETURN-CODE (I4)
1 #ADDITION-ERROR (A35)
1 #STATUS  (A15)
1 #RESULT  (I4)
1 #VIEW-TEXT (A40)
1 #LS-START (I2) INIT <1>
1 #LS-END (I2) INIT <15>
1 #LIST-END (L) INIT <FALSE>
1 #KOL-STRING (I4) INIT <15>
1 #TEXT-VIEW  (A40)
1 #OBJECT  (A10)
1 #RB-CODE (N6)
/*
1 #CP-MSG-POS (I2)
1 #C    (I2)
1 #I       (I4)  1 #J(I4)
1 #STACK-I (I2)
1 #L1      (I2)
1 #L2      (I2)
1 KEYST1(A16)
1 REDEFINE KEYST1
  2 OG1(N5)  2 ST1(A5)  2 CD1(N6)
1 NMOG(A50)  1 NM30(A30)  1 NM5(A5)
1 OG-IDENT-G(N5) INIT < 1000 >
1 NM-VO(A50)  1 #DT(N6)  1 #SU(N13.2)
1 KEYSS(A10)
1 REDEFINE KEYSS
  2 KEYSSOG(N5)  2 KEYSSSS(N5)
/*
1 KEYVO       (B10)
1 REDEFINE KEYVO
2 KEYVOOG     (N5)
2 KEYVOVO     (N5)
/*
1 #SUMM       (N13.2)
/*
END-DEFINE
/*
DEFINE WINDOW PARAM
              SIZE 10*30
              BASE 8/20
              TITLE 'Параметры запроса'
              CONTROL WINDOW
              FRAMED ON
DEFINE SUBROUTINE XPRBSH0S
/*
DEFINE WINDOW RESULT-RBP
  SIZE 20*80
  BASE 4/1
  TITLE 'Найденные элементы расходов будущих периодов.'
  FRAMED ON
/*
DEFINE WINDOW CRITERY-RBP
  SIZE 18*80
  BASE 7/1
  TITLE 'Параметры отбора элементов расхода будущих периодов.'
  FRAMED ON
/***********************************

/* init
MOVE "RB-CRITERY" TO #STATUS
#OPSYS := *OPSYS
KEYSSOG := OG-IDENT-G
/* основной цикл
REPEAT
  DECIDE ON FIRST VALUE #STATUS
     VALUE "RB-CRITERY"
        PERFORM RB-CRITERY
     VALUE "EXCEL"
        PERFORM EXCEL-OBJECT
     VALUE "PRINT"
        PERFORM PRINT-OBJECT
     VALUE "NEW-OBJECT"
        #OBJECT := "NEW"
        PERFORM NEW-OBJECT
     VALUE "EDIT-OBJECT"
        #OBJECT := "EDIT"
        PERFORM NEW-OBJECT
     VALUE "LIST-OBJECT"
        PERFORM LIST-OBJECT
     NONE VALUE
        WRITE "ERROR PARAMETERS"
        MOVE "EXIT" TO #STATUS
  END-DECIDE
  UNTIL #STATUS = "EXIT"
END-REPEAT
/*
DEFINE SUBROUTINE LIST-OBJECT  /* отображение найденных объектов
/*  SET WINDOW 'RESULT-RBP'
  SET KEY NAMED OFF
  SET KEY ALL
  SET KEY PF2 NAMED 'Новый'
  SET KEY PF5 NAMED 'Измен'
  SET KEY PF3 NAMED 'Выход'
  SET KEY CLR NAMED 'Выход'
  SET KEY PF7 NAMED 'Вверх'
  SET KEY PGUP NAMED 'Вверх'
  SET KEY PF8 NAMED 'Вниз'
  SET KEY PGDN NAMED 'Вниз'
  SET KEY PF9 NAMED 'Начал'
  SET KEY PF10 NAMED 'Конец'
  /*
  REPEAT
     PERFORM LIST-VIEW
/*
     IF #RETURN-CODE NE 0 THEN
        INPUT WINDOW = 'RESULT-RBP' WITH TEXT *#RETURN-CODE , #ADDITION-ERROR
        MARK CP-CURS-FIELD USING MAP 'XPRBSR0M'
        RESET #RETURN-CODE #ADDITION-ERROR
     ELSE
        INPUT WINDOW = 'RESULT-RBP' MARK CP-CURS-FIELD USING MAP 'XPRBSR0M'
     END-IF
     DECIDE ON FIRST VALUE *PF-KEY
        VALUE "PF2"
           MOVE "NEW-OBJECT" TO #STATUS
           SET WINDOW OFF
           PERFORM STACK-FREE
           ESCAPE BOTTOM
        VALUE "PF5"
           FOR #I = 1 TO #KOL-STRING
              IF *CURS-FIELD EQ POS(CMD(#I)) THEN
                 MOVE "EDIT-OBJECT" TO #STATUS
                 MOVE XPRBSR0L.ELEM-STACK(#I) TO XPRBSH0L.STACK-POS
                 PERFORM STACK-READ
                 RESET #RB-CODE
                 MOVE XPRBSR0L.RB-CODE(#I) TO #RB-CODE
                 ESCAPE BOTTOM
              END-IF
           END-FOR
           SET WINDOW OFF
           PERFORM STACK-FREE
           ESCAPE BOTTOM
        VALUE "PF3" , "CLR"
           SET WINDOW OFF
           MOVE "EXIT" TO #STATUS
           PERFORM STACK-FREE
           ESCAPE BOTTOM
           /* очистить за собой стеки
        VALUE "PF7" , "PGUP"
           IF #LIST-END = TRUE
              #LIST-END := FALSE
           END-IF
           #LS-START := #LS-START  - #KOL-STRING
           #LS-END := #LS-END - #KOL-STRING
           IF #LS-START < 1 THEN
              #LS-START := 1
              #LS-END := #KOL-STRING
           END-IF
        VALUE "PF8" , "PGDN"
           IF #LIST-END = FALSE
              ADD #KOL-STRING TO #LS-START
              ADD #KOL-STRING TO #LS-END
           END-IF
        VALUE "PF9" /* начало
           #LIST-END := FALSE
           #LS-START := 1
           #LS-END := #KOL-STRING
        VALUE "PF10" /* конец
           #LIST-END := TRUE
           #LS-START := XPRBSH0L.STACK-LEN - #KOL-STRING + 1
           #LS-END := XPRBSH0L.STACK-LEN
           IF #LS-START <= 0 THEN
              #LS-START := 1
              #LS-END := #KOL-STRING
           END-IF
        NONE VALUE
           MOVE 2002 TO #RETURN-CODE
           MOVE *PF-KEY TO #ADDITION-ERROR
     END-DECIDE
  END-REPEAT
END-SUBROUTINE
/*
DEFINE SUBROUTINE NEW-OBJECT   /* создание нового или редактирование объекта
  SET KEY NAMED OFF
  SET KEY ALL
  SET KEY ENTR NAMED 'Прове'
  IF #OBJECT = "NEW"
     SET KEY PF5 NAMED 'Cохр'
  ELSE
     PERFORM READ-RECORD
     PERFORM OBJECT-TO-SCREEN
     SET KEY PF5 NAMED 'Измен'
  END-IF
  SET KEY PF3 NAMED 'Выход'
  SET KEY PF6 NAMED 'РегСФ'
  SET KEY CLR NAMED 'Выход'
  SET KEY PF11 NAMED 'Выбор'
/*
  RESET NMOG
  REPEAT
     IF XPRBSH1L.RB-OB NE 0
       CALLNAT 'GETNMVO' OG-IDENT-G XPRBSH1L.RB-OB NMOG
     END-IF
     IF #RETURN-CODE NE 0 THEN
        INPUT WITH TEXT *#RETURN-CODE , #ADDITION-ERROR
        MARK CP-CURS-FIELD USING MAP 'XPRBSH0M'
        RESET #RETURN-CODE #ADDITION-ERROR
     ELSE
        INPUT MARK CP-CURS-FIELD USING MAP 'XPRBSH0M'
     END-IF
     DECIDE ON FIRST VALUE *PF-KEY
        VALUE "PF3" , "CLR"
           MOVE "EXIT" TO #STATUS
           PERFORM STACK-FREE
           RESET XPRBSH0A XPRBSH1L
           ESCAPE BOTTOM
           /* очистить за собой стеки
        VALUE "PF6"
           PERFORM CHECK-SF
           PERFORM NEW-SF
        VALUE "PF5"
           PERFORM CHECK-SCREEN
           IF  #RETURN-CODE NE 0
              ESCAPE TOP
           END-IF
           PERFORM SCREEN-TO-OBJECT
           IF  #RETURN-CODE NE 0
              ESCAPE TOP
           END-IF
           PERFORM STORE-OBJECT
           IF  #RETURN-CODE NE 0
              ESCAPE TOP
           ELSE
              IF #OBJECT = "NEW"
                 COMPRESS 'Объект' XPRBSH1L.RB-CODE 'сохранен в БД.' TO #TEXT-VIEW
              ELSE
                 COMPRESS 'Объект' XPRBSH1L.RB-CODE 'изменен в БД.' TO #TEXT-VIEW
              END-IF
           END-IF
           MOVE  "RB-CRITERY" TO #STATUS
           PERFORM STACK-FREE
           RESET XPRBSH0A XPRBSH1L
           ESCAPE ROUTINE
        VALUE "ENTR"
           PERFORM CHECK-SCREEN
           IF  #RETURN-CODE NE 0
              ESCAPE TOP
           END-IF
        VALUE "PF11"
           PERFORM SELECT-OBJECT
           IF  #RETURN-CODE NE 0
              ESCAPE TOP
           END-IF
        NONE VALUE
           MOVE 2002 TO #RETURN-CODE
           MOVE *PF-KEY TO #ADDITION-ERROR
     END-DECIDE
  END-REPEAT
END-SUBROUTINE
/* отбор по критерию ниокр
DEFINE SUBROUTINE RB-CRITERY /* критерий дл  пердварительного отбора объектов
  SET WINDOW 'CRITERY-RBP'
  SET KEY NAMED OFF
  SET KEY ALL
  SET KEY ENTR NAMED 'Искат'
  SET KEY PF3 NAMED 'Выход'
  SET KEY CLR NAMED 'Выход'
  SET KEY PF2 NAMED 'Новый'
  SET KEY PF6 NAMED 'Excel'
  SET KEY PF12 NAMED 'Печать'
  REPEAT
     IF #RETURN-CODE NE 0 THEN
        INPUT WINDOW = 'CRITERY-RBP' WITH TEXT *#RETURN-CODE , #ADDITION-ERROR
        MARK CP-CURS-FIELD USING MAP 'XPRBSC0M'
        RESET #RETURN-CODE #ADDITION-ERROR
     ELSE
        IF #TEXT-VIEW NE ' '
           INPUT WINDOW = 'CRITERY-RBP' WITH TEXT #TEXT-VIEW MARK CP-CURS-FIELD USING MAP 'XPRBSC0M'
           RESET #TEXT-VIEW
        ELSE
           INPUT MARK CP-CURS-FIELD USING MAP 'XPRBSC0M'
        END-IF
     END-IF
     DECIDE ON FIRST VALUE *PF-KEY
        VALUE "PF3" , "CLR"
           MOVE "EXIT" TO #STATUS
           ESCAPE BOTTOM
           /* очистить за собой стеки
        VALUE "PF2"
           MOVE "NEW-OBJECT" TO #STATUS
           ESCAPE BOTTOM
        VALUE "PF6"
           MOVE "EXCEL" TO #STATUS
           ESCAPE BOTTOM
        VALUE "PF12"
           MOVE "PRINT" TO #STATUS
           ESCAPE BOTTOM
       VALUE "ENTR"
           PERFORM SEARCH-RB
           IF XPRBSH0L.STACK-LEN > 0 THEN
              IF XPRBSH0L.STACK-LEN = 1
                 RESET #RB-CODE
                 MOVE XPRBSH0L.RB-CODE TO #RB-CODE
                 PERFORM STACK-FREE
                 MOVE "EDIT-OBJECT" TO #STATUS
              ELSE
                 MOVE "LIST-OBJECT" TO #STATUS
              END-IF
           ELSE
              MOVE 2001 TO #RETURN-CODE
           END-IF
           ESCAPE BOTTOM
        NONE VALUE
           MOVE 2002 TO #RETURN-CODE
           MOVE *PF-KEY TO #ADDITION-ERROR
     END-DECIDE
  END-REPEAT
SET WINDOW OFF
END-SUBROUTINE
/* подпрограмма проверки экрана
DEFINE SUBROUTINE CHECK-SCREEN
* IF XPRBSH1L.RB-BS = 0
*    MOVE 2018 TO #RETURN-CODE
*    CP-CURS-FIELD := POS(XPRBSH1L.RB-BS)
*    ESCAPE ROUTINE
* END-IF
  IF XPRBSH1L.RB-CODE = 0
     MOVE 2004 TO #RETURN-CODE
     CP-CURS-FIELD := POS(XPRBSH1L.RB-CODE)
     ESCAPE ROUTINE
  END-IF
  /*
  IF XPRBSH1L.RB-OB NE 0
    CALLNAT 'GETNMVO' OG-IDENT-G XPRBSH1L.RB-OB NMOG
    IF NMOG = ' '
      MOVE 2014 TO #RETURN-CODE
      CP-CURS-FIELD := POS(XPRBSH1L.RB-OB)
      ESCAPE ROUTINE
    END-IF
  END-IF
  IF XPRBSH1L.RB-DITY(1) NE ' '
    IF XPRBSH1L.RB-DIND(1) = ' '
      MOVE 2016 TO #RETURN-CODE
      CP-CURS-FIELD := POS(XPRBSH1L.RB-DIND(1))
      ESCAPE ROUTINE
    END-IF
    IF XPRBSH1L.RB-DIDT(1) = 0 OR XPRBSH1L.RB-DIDT(1) NE MASK(YYYYMMDD)
      MOVE 2017 TO #RETURN-CODE
      CP-CURS-FIELD := POS(XPRBSH1L.RB-DIDT(1))
      ESCAPE ROUTINE
    END-IF
    IF XPRBSH1L.RB-DITY(1) EQ 'СЧФ' THEN
        PERFORM CHECK-SF
        IF XPRBSH1L.SF-REGNUM EQ 0 THEN
          REINPUT 'Зарегистрируйте СФ (PF6)' MARK *XPRBSH1L.RB-DIND(1)
        END-IF
    END-IF
  END-IF
  IF #OBJECT = "NEW"
     FN1. FIND NUMBER AU_RBP RB-CODE = XPRBSH1L.RB-CODE
     IF *NUMBER(FN1.) > 0
        MOVE 2009 TO #RETURN-CODE
        MOVE XPRBSH1L.RB-CODE TO #ADDITION-ERROR
        CP-CURS-FIELD := POS(XPRBSH1L.RB-CODE)
        ESCAPE ROUTINE
     END-IF
  END-IF
  /*
  IF XPRBSH1L.RB-NAME = ' '
     MOVE 2004 TO #RETURN-CODE
     CP-CURS-FIELD := POS(XPRBSH1L.RB-NAME)
     ESCAPE ROUTINE
  END-IF
  /*
  IF XPRBSH1L.RB-STOIMOST = 0
     MOVE 2004 TO #RETURN-CODE
     CP-CURS-FIELD := POS(XPRBSH1L.RB-STOIMOST)
     ESCAPE ROUTINE
  END-IF
  /*
  DECIDE FOR FIRST CONDITION
     WHEN XPRBSH1L.RB-ZAKAZ NE ' '
        FIND ZAKAZ WITH ZK-F = XPRBSH1L.RB-ZAKAZ
           IF NO RECORD
              MOVE 2011 TO #RETURN-CODE
              CP-CURS-FIELD := POS(XPRBSH1L.RB-ZAKAZ)
              ESCAPE ROUTINE
           END-NOREC
           MOVE ZAKAZ.BS-F TO XPRBSH1L.RB-SCHET
        END-FIND
     WHEN XPRBSH1L.RB-SCHET NE 0
        NM. FIND ZAKAZ WITH BS-F = XPRBSH1L.RB-SCHET
           IF NO RECORD
              MOVE 2011 TO #RETURN-CODE
              CP-CURS-FIELD := POS(XPRBSH1L.RB-SCHET)
              ESCAPE ROUTINE
           END-NOREC
           IF *NUMBER(NM.) > 1 THEN
              MOVE 2012 TO #RETURN-CODE
              CP-CURS-FIELD := POS(XPRBSH1L.RB-ZAKAZ)
              ESCAPE ROUTINE
           END-IF
           MOVE ZAKAZ.ZK-F TO XPRBSH1L.RB-ZAKAZ
        END-FIND
     WHEN NONE
     IGNORE
*       MOVE 2004 TO #RETURN-CODE
*       CP-CURS-FIELD := POS(XPRBSH1L.RB-ZAKAZ)
*       ESCAPE ROUTINE
  END-DECIDE
  /*
  IF XPRBSH1L.RB-SZ-CODE EQ 0 THEN
     MOVE 2011 TO #RETURN-CODE
     CP-CURS-FIELD := POS(XPRBSH1L.RB-SZ-CODE)
     ESCAPE ROUTINE
  END-IF
  /*
  IF (XPRBSH1L.RB-LENEAR-DISKARDING = FALSE AND
     XPRBSH1L.RB-PRO_RATE-DISKARDING = FALSE) OR
     (XPRBSH1L.RB-LENEAR-DISKARDING = TRUE AND
     XPRBSH1L.RB-PRO_RATE-DISKARDING = TRUE)
     MOVE 2004 TO #RETURN-CODE
     MOVE 'Введите один из способов списани ' TO #ADDITION-ERROR
     CP-CURS-FIELD := POS(XPRBSH1L.RB-LENEAR-DISKARDING)
     ESCAPE ROUTINE
  END-IF
  /*
  IF XPRBSH1L.RB-LENEAR-DISKARDING = TRUE
     IF XPRBSH1L.RB-PERIOD-DISCARDING-START = 0
        MOVE 2004 TO #RETURN-CODE
        CP-CURS-FIELD := POS(XPRBSH1L.RB-PERIOD-DISCARDING-START)
        ELSE
        IF XPRBSH1L.RB-PERIOD-DISCARDING-END = 0
          MOVE 2004 TO #RETURN-CODE
          CP-CURS-FIELD := POS(XPRBSH1L.RB-PERIOD-DISCARDING-END)
          ELSE
          IF XPRBSH1L.RB-EI-PERIOD-DISCARDING = ' '
             MOVE 2004 TO #RETURN-CODE
             CP-CURS-FIELD := POS(XPRBSH1L.RB-EI-PERIOD-DISCARDING)
             ESCAPE ROUTINE
             ELSE
             IF XPRBSH1L.RB-EI-PERIOD-DISCARDING NE 'Д'
             AND XPRBSH1L.RB-EI-PERIOD-DISCARDING NE 'М'
               MOVE 2005 TO #RETURN-CODE
               CP-CURS-FIELD := POS(XPRBSH1L.RB-EI-PERIOD-DISCARDING)
               ESCAPE ROUTINE
             END-IF
           END-IF
        END-IF
     END-IF
  ELSE
     RESET XPRBSH1L.RB-PERIOD-DISCARDING-START
     XPRBSH1L.RB-PERIOD-DISCARDING-END
     XPRBSH1L.RB-EI-PERIOD-DISCARDING
  END-IF
  /*
  IF XPRBSH1L.RB-PRO_RATE-DISKARDING = TRUE
     IF XPRBSH1L.RB-QUANTYTI-MONTH = 0
        MOVE 2004 TO #RETURN-CODE
        CP-CURS-FIELD := POS(XPRBSH1L.RB-QUANTYTI-MONTH)
        ESCAPE ROUTINE
     END-IF
  ELSE
     RESET XPRBSH1L.RB-QUANTYTI-MONTH
  END-IF
  /*
  IF FALSE AND XPRBSH1L.RB-DATA-PACT-N EQ 0 THEN
     CP-CURS-FIELD := POS(XPRBSH1L.RB-DATA-PACT-N)
     MOVE 2004 TO #RETURN-CODE
     ESCAPE ROUTINE
  END-IF
  IF XPRBSH1L.RB-DATA-PACT-N NE 0
     IF XPRBSH1L.RB-DATA-PACT-N NE MASK(YYYYMMDD) OR XPRBSH1L.RB-DATA-PACT-N < 19000000 THEN
        CP-CURS-FIELD := POS(XPRBSH1L.RB-DATA-PACT-N)
        MOVE 2008 TO #RETURN-CODE
        ESCAPE ROUTINE
     END-IF
  END-IF
/*
* INCLUDE XPXXSP0C 'XPRBSH1L.RB-PROGRAMM'
* 'XPRBSH1L.RB-PROGRAMM-A' 'XPXXCO0L.CODE-PRODUCT-PROGRAM'
/*
  INCLUDE XPXXSP0C 'XPRBSH1L.RB-DOGOVOR'
  'XPRBSH1L.RB-DOGOVOR-A' 'XPXXCO0L.CODE-DOGOVOR'
/*
  INCLUDE XPXXSP0C 'XPRBSH1L.RB-CODIFIKATOR'
  'XPRBSH1L.RB-CODIFIKATOR-A' 'XPXXCO0L.CODE-DOGOVOR'
END-SUBROUTINE
/*
DEFINE SUBROUTINE OBJECT-TO-SCREEN
  MOVE BY NAME XPRBSH0A TO XPRBSH1L
  MOVE EDITED XPRBSH0A.RB-DATA-PACT (EM=YYYYMMDD) TO XPRBSH1L.RB-DATA-PACT-A
/*
* INCLUDE XPXXSP1C 'XPRBSH1L.RB-PROGRAMM'
* 'XPRBSH1L.RB-PROGRAMM-A' 'XPXXCO0L.CODE-PRODUCT-PROGRAM'
/*
  INCLUDE XPXXSP1C 'XPRBSH1L.RB-DOGOVOR'
  'XPRBSH1L.RB-DOGOVOR-A' 'XPXXCO0L.CODE-DOGOVOR'
/*
  INCLUDE XPXXSP1C 'XPRBSH1L.RB-CODIFIKATOR'
  'XPRBSH1L.RB-CODIFIKATOR-A' 'XPXXCO0L.CODE-DOGOVOR'
  IF XPRBSH1L.RB-DITY(1) EQ "СЧФ" THEN
     IF XPRBSH1L.RB-DIND-FLAG(1) EQ "#" THEN
        FIND PPD-DOC-FILE WITH INT-NUM EQ XPRBSH1L.RB-DIND-REGNUM(1)
           MOVE INT-NUM TO XPRBSH1L.SF-REGNUM
           MOVE NA-DOC-SF TO XPRBSH1L.RB-DIND(1)
        END-FIND
     END-IF
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE SCREEN-TO-OBJECT
  IF XPRBSH1L.RB-DITY(1) EQ "СЧФ" THEN
     IF XPRBSH1L.SF-REGNUM NE 0 THEN
        MOVE "#" TO XPRBSH1L.RB-DIND-FLAG(1)
        MOVE XPRBSH1L.SF-REGNUM TO XPRBSH1L.RB-DIND-REGNUM(1)
     END-IF
  END-IF
  MOVE BY NAME XPRBSH1L TO XPRBSH0A
  IF XPRBSH1L.RB-DATA-PACT-A  NE ' '
     MOVE EDITED XPRBSH1L.RB-DATA-PACT-A TO XPRBSH0A.RB-DATA-PACT (EM=YYYYMMDD)
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE CHECK-SF
  IF XPRBSH1L.RB-DITY(1) EQ "СЧФ" THEN
     IF XPRBSH1L.RB-DIND(1) = ' '  REINPUT 'Номер с/ф' MARK *XPRBSH1L.RB-DIND(1) ALARM END-IF
     IF XPRBSH1L.RB-DIDT(1) = 0  REINPUT 'Дата с/ф' MARK *XPRBSH1L.RB-DIDT(1) ALARM  END-IF
     IF XPRBSH1L.RB-DIDT(1) NE MASK(YYYYMMDD) REINPUT 'Дата' MARK *XPRBSH1L.RB-DIDT(1) END-IF
     IF XPRBSH1L.RB-OB = 0  REINPUT 'Контрагент' MARK *XPRBSH1L.RB-OB ALARM  END-IF
     FIND PPD-DOC-FILE OG-ID = 1000 AND TD-DOC = 'FF'
              AND GM-F = XPRBSH1L.RB-DIDT-GM(1) AND DU-OK = XPRBSH1L.RB-OB
              AND NA-DOC-SF = XPRBSH1L.RB-DIND(1)
        IF NO RECORD
           RESET XPRBSH1L.SF-REGNUM
           ESCAPE BOTTOM
        END-NOREC
        MOVE INT-NUM TO XPRBSH1L.SF-REGNUM
     END-FIND
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE NEW-SF
/*  PERFORM CHECK-SF
  IF XPRBSH1L.RB-DITY(1) EQ "СЧФ" AND XPRBSH1L.SF-REGNUM EQ 0 THEN
     RESET PPD-DOC-FILE
     KEYVOOG := PPD-DOC-FILE.OG-ID := 1000
     PPD-DOC-FILE.TD-DOC := 'FF'
     PPD-DOC-FILE.DA-DOC := XPRBSH1L.RB-DIDT(1)
     PPD-DOC-FILE.GM-F := XPRBSH1L.RB-DIDT-GM(1)
     KEYVOVO := DU-OK := XPRBSH1L.RB-OB  NA-DOC-SF := XPRBSH1L.RB-DIND(1)
     PERFORM DEFNDR "СЧФ" XPRBSH1L.RB-DIDT-GM(1) XPRBSH1L.RB-DIND(1)
/*     WRITE "СЧФ" XPRBSH1L.RB-DIDT-GM(1) XPRBSH1L.RB-DIND(1)
     INT-NUM := VAL(XPRBSH1L.RB-DIND(1))
     XPRBSH1L.SF-REGNUM := INT-NUM
     MOVE NA-DOC-SF TO XPRBSH1L.RB-DIND(1)
     FIND IBS-KVO-FILE OG-VO = KEYVO
        DU-ON := NM-OG
        DU-KPP := NM-PL  DU-NN := NN-ID
     END-FIND
     STORE PPD-DOC-FILE
     END TRANSACTION
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE READ-RECORD
  IF #RB-CODE NE 0  THEN
     FIND AU_RBP RB-CODE = #RB-CODE
        MOVE BY NAME AU_RBP TO XPRBSH0A
     END-FIND
  ELSE
     MOVE 2003 TO #RETURN-CODE
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE STORE-OBJECT
  DECIDE ON FIRST VALUE #STATUS
     VALUE "NEW-OBJECT"
        VIEWSTAT.OG-ID := XPXXCO0L.OSN-GROUP
        VIEWSTAT.ST-F := XPXXCO0L.CODE-RBP
        VIEWSTAT.CT-F := XPRBSH0A.RB-CODE
        MOVE XPRBSH0A.RB-NAME TO VIEWSTAT.NM-OG
        STORE VIEWSTAT
        MOVE BY NAME XPRBSH0A TO AU_RBP
        STORE AU_RBP
     VALUE "EDIT-OBJECT"
        IF #RB-CODE NE 0  THEN
           FIND (1) AU_RBP RB-CODE = #RB-CODE
              IF NO RECORDS
                 MOVE 2003 TO #RETURN-CODE
                 ESCAPE ROUTINE
              END-NOREC
              MOVE BY NAME XPRBSH0A TO AU_RBP
              UPDATE
           END-FIND
           /*
           OG1 := XPXXCO0L.OSN-GROUP
           ST1 := XPXXCO0L.CODE-RBP
           CD1 := #RB-CODE
           FIND VIEWSTAT OG-ST = KEYST1
              VIEWSTAT.CT-F := XPRBSH0A.RB-CODE
              MOVE XPRBSH0A.RB-NAME TO VIEWSTAT.NM-OG
              UPDATE
           END-FIND
        ELSE
           MOVE #RB-CODE TO #ADDITION-ERROR
           MOVE 2006 TO #RETURN-CODE
        END-IF
     ANY VALUE
        END OF TRANSACTION
     NONE VALUE IGNORE
  END-DECIDE
END-SUBROUTINE
/*
DEFINE SUBROUTINE SEARCH-RB
 /* RESET #COUNT #NUMBER
  DECIDE FOR FIRST CONDITION
     WHEN XPRBSC0L.RB-CODE NE 0 AND XPRBSC0L.RB-NAME EQ ' '
        FIND AU_RBP RB-CODE = XPRBSC0L.RB-CODE
           MOVE BY NAME AU_RBP TO XPRBSH0L
           PERFORM STACK-PUSH
        END-FIND
     WHEN XPRBSC0L.RB-CODE NE 0 AND XPRBSC0L.RB-NAME NE ' '
        FIND AU_RBP RB-CODE = XPRBSC0L.RB-CODE
           IF AU_RBP.RB-NAME = SCAN XPRBSC0L.RB-NAME
              MOVE BY NAME AU_RBP TO XPRBSH0L
              PERFORM STACK-PUSH
           END-IF
        END-FIND
     WHEN XPRBSC0L.RB-CODE = 0 AND XPRBSC0L.RB-NAME NE ' '
        FIND AU_RBP RB-CODE NE 0
           IF AU_RBP.RB-NAME = SCAN XPRBSC0L.RB-NAME
              MOVE BY NAME AU_RBP TO XPRBSH0L
              PERFORM STACK-PUSH
           END-IF
        END-FIND
     WHEN NONE
        FIND AU_RBP RB-CODE NE 0
           MOVE BY NAME AU_RBP TO XPRBSH0L
           PERFORM STACK-PUSH
        END-FIND
  END-DECIDE
END-SUBROUTINE
/*
DEFINE SUBROUTINE LIST-VIEW
  RESET #I XPRBSR0L.STRING(*)
  MOVE (AD=PN) TO XPRBSR0L.CMD-Z(*)
  FOR #L1 = #LS-START TO #LS-END
     IF XPRBSH0L.STACK-LEN < #L1
        MOVE TRUE TO #LIST-END
        ESCAPE BOTTOM
     END-IF
     MOVE #L1 TO XPRBSH0L.STACK-POS
     PERFORM STACK-READ
     ADD 1 TO #I
     MOVE BY NAME XPRBSH0L TO STRING(#I)
     MOVE XPRBSH0L.STACK-POS TO XPRBSR0L.ELEM-STACK(#I)
     RESET XPRBSR0L.CMD-Z(#I)
     IF XPRBSH0L.STACK-LEN = #L1
        MOVE TRUE TO #LIST-END
        ESCAPE BOTTOM
     END-IF
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE SELECT-OBJECT
  RESET NMST
  DECIDE FOR FIRST CONDITION
     WHEN *CURS-FIELD = POS(XPRBSH1L.RB-OB)
       CALLNAT 'SELVON' OG-IDENT-G XPRBSH1L.RB-OB NM30
       NMOG := NM30
*    INCLUDE XPXXSP5C 'XPRBSH1L.RB-PROGRAMM'
*    'XPRBSH1L.RB-PROGRAMM-A' 'XPXXCO0L.CODE-PRODUCT-PROGRAM'
  /*
     INCLUDE XPXXSP5C 'XPRBSH1L.RB-DOGOVOR'
     'XPRBSH1L.RB-DOGOVOR-A' 'XPXXCO0L.CODE-DOGOVOR'
  /*
     INCLUDE XPXXSP5C 'XPRBSH1L.RB-CODIFIKATOR'
     'XPRBSH1L.RB-CODIFIKATOR-A' 'XPXXCO0L.CODE-DOGOVOR'
    WHEN NONE IGNORE
  END-DECIDE
END-SUBROUTINE
/*
DEFINE SUBROUTINE PRINT-OBJECT
  CALL "WINCMD" "IAGMKFLD.BAT U DF"
  REPEAT
     SET KEY OFF
     SET KEY ON
     SET KEY ALL
     SET KEY PF3 NAMED 'Выход'
     SET KEY PF5 NAMED 'Далее'
     SET WINDOW 'PARAM'
     INPUT 'Субсчет' XPRBPR0A.AC-CODE (AD=M'_' SG=OFF) /
           'С' XPRBPR0A.DT-START (AD=M'_' SG=OFF)
           'по' XPRBPR0A.DT-STOP (AD=M'_' SG=OFF)/
           'Подпись' XPRBPR0A.SIGN-OID (AD=M'_' NL=5 SG=OFF)
     IF *PF-KEY EQ "PF3" THEN ESCAPE ROUTINE END-IF
     IF XPRBPR0A.AC-CODE EQ 0 THEN
        REINPUT 'Об зательно дл  заполнени ' MARK *XPRBPR0A.AC-CODE
     END-IF
     IF XPRBPR0A.DT-START < 20090101 OR XPRBPR0A.DT-START > XPRBPR0A.DT-STOP THEN
        REINPUT 'Ошибка в периоде' MARK *XPRBPR0A.DT-START
     END-IF
     IF XPRBPR0A.SIGN-OID  EQ 0 THEN
        REINPUT 'Об зательно дл  заполнени ' MARK *XPRBPR0A.SIGN-OID
     END-IF
     IF *PF-KEY EQ "PF5" THEN ESCAPE BOTTOM END-IF
  END-REPEAT
  XPRBPR0A.OG-CODE := OG-IDENT-G
  PERFORM XPRBPR0S XXERX00A XPRBPR0A
  #STATUS := "RB-CRITERY"
  SET WINDOW OFF
END-SUBROUTINE
/*
DEFINE SUBROUTINE EXCEL-OBJECT
  SET WINDOW 'PARAM'
  INPUT(IP=OFF) 'Счет' KEYSSSS / 'Период' #DT
  IF *PF-KEY NE 'PF3'
    IF KEYSSSS = 0  REINPUT 'Счет' ALARM  END-IF
    RESET #I
  CALLNAT 'DRIVECHR' PATHFINDER
      COMPRESS PATHFINDER ':\R26\WKF10.FLE' TO #FPATH LEAVING NO
      INCLUDE FILEPATH '10' '12'
      RECORD-MODE := 'I'  HEIGHT(1) := 30
      WORK-FILE-NAME-NEW := #FPATH
      PAPER-ORIENTATION := 'LANDSCAP'
      HEADER-LEFT-TO-RIGHT(1) := 'ОАО ВПК Машиностроение'
      HEADER-LEFT-TO-RIGHT(2) := KEYSSSS
      HEADER-LEFT-TO-RIGHT(3) := #DT
      EXAMINE HEADER-LEFT-TO-RIGHT(3) FOR '<' REPLACE ' '
      EXAMINE HEADER-LEFT-TO-RIGHT(3) FOR '>' REPLACE ' '
      MOVE LEFT HEADER-LEFT-TO-RIGHT(3) TO HEADER-LEFT-TO-RIGHT(3)
      FOOTER-LEFT-TO-RIGHT(1) := '&Д'
      COMPRESS *DATG *TIME INTO FOOTER-LEFT-TO-RIGHT (2)
      FOOTER-LEFT-TO-RIGHT(3) := '&С'
      HOW-MUCH-ROWS := 14
      EXL-PARM.STYLE (1:HOW-MUCH-ROWS) := 'table-row-gray'
      CELL(1) := 'Код РБП'
      EXL-PARM.WIDTH(1) := 30
      CELL(2) := 'Наименование'
      EXL-PARM.WIDTH(2) := 200
      CELL(3) := 'Стоимость'
      CELL(4) := 'Сумма <br> списани '
      CELL(5) := 'Сальдо'
      ADD-INFO(3:5) := 'x:num'
      EXL-PARM.WIDTH(3:5) := 70
      CELL(6) := 'Договор'
      EXL-PARM.WIDTH(6) := 200
      CELL(7) := 'Дата дог'
      EXL-PARM.WIDTH(7:9) := 70
      CELL(8:9) := 'Период <br> списани '
      CELL(10) := 'Ед.изм.'
      EXL-PARM.WIDTH(10) := 30
      CELL(11) := 'Заказ'
      EXL-PARM.WIDTH(11) := 70
      CELL(12:13) := 'Счет'
      EXL-PARM.WIDTH(12:13) := 30
      CELL(14) := 'Контрагент'
      EXL-PARM.WIDTH(14) := 200
      IF #OPSYS NE 'W'
        CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
      ELSE
        CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
      END-IF
      RECORD-MODE := 'W'  HEIGHT(1) := 0
      EXL-PARM.STYLE (1:HOW-MUCH-ROWS) := 'table-row'
      FIND AU_RBP RB-CODE = 1 THRU 999999
      ACCEPT AU_RBP.RB-BS = KEYSSSS
      RESET SU-RU #SUMM
      FIND IBS-OBJ-FILE1 OG-OS = KEYSS AND DT-ID = #DT
        EXAMINE IBS-OBJ-FILE1.KK-SS(*) 'RBP' GIVING INDEX #J
        IF #J NE 0 AND IBS-OBJ-FILE1.KD-SS(#J) = AU_RBP.RB-CODE
            AND SU-RU NE 0
            IF BO-ID EQ 1 THEN
              ADD SU-RU TO #SUMM
            ELSE
              SUBTRACT SU-RU FROM #SUMM
            END-IF
        END-IF
      END-FIND
        RESET #SU
        FIND IBS-OBJ-FILE1 OG-OS = KEYSS AND DT-ID = #DT
          EXAMINE IBS-OBJ-FILE1.KK-SS(*) 'RBP' GIVING INDEX #J
          IF #J NE 0 AND IBS-OBJ-FILE1.KD-SS(#J) = AU_RBP.RB-CODE
          AND SU-RU NE 0
            #SU := SU-RU  ADD 1 TO #I
          END-IF
        END-FIND
          CELL(1) := AU_RBP.RB-CODE
          CELL(2) := AU_RBP.RB-NAME
          MOVE EDITED AU_RBP.RB-STOIMOST(EM=-Z(12)9.99) TO CELL(3)
          MOVE EDITED AU_RBP.SUMMA-RBP(EM=-Z(12)9.99) TO CELL(4)
          MOVE EDITED #SUMM(EM=-Z(12)9.99) TO CELL(5)
          CELL(6) := AU_RBP.RB-NUMBER-PACT
          MOVE EDITED AU_RBP.RB-DATA-PACT (EM=YYYYMMDD) TO CELL(7)
          MOVE EDITED AU_RBP.RB-PERIOD-DISCARDING-START (EM=YYYYMMDD) TO CELL(8)
          MOVE EDITED AU_RBP.RB-PERIOD-DISCARDING-END (EM=YYYYMMDD) TO CELL(9)
          CELL(10) := AU_RBP.RB-EI-PERIOD-DISCARDING
          CELL(11) := AU_RBP.RB-ZAKAZ
          CELL(12) := AU_RBP.RB-SCHET
          CELL(13) := AU_RBP.RB-BS
          IF AU_RBP.RB-OB NE 0
            CALLNAT 'GETNMVO' OG-IDENT-G AU_RBP.RB-OB NM-VO
            COMPRESS AU_RBP.RB-OB NM-VO TO CELL(14)
            ELSE  RESET CELL(14)
          END-IF
          IF #OPSYS NE 'W'
            CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
            ELSE  CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
          END-IF
    END-FIND
    IF #I >= 1  RECORD-MODE := 'C'
      IF #OPSYS NE 'W'
        CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
        ELSE  CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
      END-IF
      ELSE  REINPUT 'Нет данных'
    END-IF
  END-IF
  #STATUS := "RB-CRITERY"
  SET WINDOW OFF
END-SUBROUTINE
/*
INCLUDE XXSTMN0C "XPRBSH0L" "XPRBSH0LC"
        "STACK-INIT" "STACK-FREE" "STACK-REALLOC"
        "STACK-PUSH" "STACK-READ" "STACK-WRITE" "STACK-SORT"

END-SUBROUTINE
/*
END




