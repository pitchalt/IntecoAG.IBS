* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVBS3
* :UID MSA
* :Mode S
* :CP
* :Date 20101223
* :Time 0901000
* <Natural Source Header /*<<RO>
***************************
* бедемхе окюмю явернб лт *
***************************
DEFINE DATA
*  GLOBAL USING UFROG       /* цкнаюкэмше оепелеммше дкъ бяеи яхярелш
 PARAMETER USING PRMNAVI
*
  LOCAL  USING LCLBSL      /* VIEW мю тюик IBS-BS-FILE
  LOCAL  USING LCLRECL     /* VIEW мю тюик IBS-REC-FILE
  LOCAL  USING LCLFROL1       /* наыхе оепелеммше
  LOCAL  USING LCLFROL4       /* наыхе оепелеммше
  LOCAL  USING CHR1251        /* наыхе оепелеммше
  LOCAL  USING CHREBCD        /* наыхе оепелеммше
  LOCAL  USING PRMHELP
  LOCAL  USING PRMCOMM
  LOCAL  USING PRMSTBS
  LOCAL  USING LCLMSGL
  LOCAL
    1 SELFUN(A60) INIT<'оКЮМ ЯВЕРНБ'>
    1 SELREG(A40)
    1 INPUT-REC(A231/1:15)
    1 REDEFINE INPUT-REC
      2 #INPUT-REC(15)
* онкъ мебшбндхлше мю щйпюм
        3 FIELD-FF  (B001) /* ткюц хглемемхъ/сдюкемхъ гюохях
        3 FIELD-ISN (P007) /* ISN гюохях
* бшбндмне онке ткюц мюкхвхъ я/явернб
        3 FIELD-UP  (A001) /* ткюц гюыхрш гюохях
* онкъ бшбндхлше мющйпюм дкъ ббндю х хглемемхъ
        3 #FIELD-01 (N003)
        3 REDEFINE #FIELD-01
          4 #FIELD-01-A(A003)
        3 #FIELD-02 (N002)
        3 #FIELD-03 (A002)
        3 #FIELD-04 (A001)
        3 #FIELD-05 (A003)
        3 #FIELD-06 (A001)
        3 #FIELD-07 (A001)
        3 #FIELD-10 (N002)
        3 #FIELD-08 (A200)
        3 REDEFINE #FIELD-08
          4 ##FIELD-08 (A040/5)
        3 #FIELD-09 (A008)
        3  FIELD-RC (A001)
        3  FIELD-NIK(B1)
* дхмюлхвеяйхе юрпхасрш дкъ бшбндхлшу онкеи
    1 #FIELD-01C (C/1:15)
    1 #FIELD-02C (C/1:15)
    1 #FIELD-03C (C/1:15)
    1 #FIELD-04C (C/1:15)
*   1 #FIELD-05C (C/1:15)
*   1 #FIELD-06C (C/1:15)
*   1 #FIELD-07C (C/1:15)
    1 #FIELD-08C (C/1:15)
    1 #FIELD-09C (C/1:15)
    1 #FIELD-10C (C/1:15)
*
* ярпсйрспю щкелемрю ярейю я дюммшлх
*
    1 STEK-REC(A231)
    1 REDEFINE STEK-REC
      2 STEK-FF(B01)
      2 STEK-ISN(P07)
*
      2 STEK-UP(A01)
*
      2 STEK-01(N03)
      2 STEK-02(N02)
      2 STEK-03(A02)
      2 STEK-04(A01)
      2 STEK-05(A03)
      2 STEK-06(A01)
      2 STEK-07(A01)
      2 STEK-10(N02)
      2 STEK-08(A200)
      2 STEK-09(A08)
      2 STEK-RC(A01)
      2 STEK-NIK(B1)
*
*   1 INIT-03(A03/03) INIT<'ю','о','юо'>
*   1 INIT-03(A03/03) INIT<'ю','о','юо'>
*   1 INIT-04(A01/02) INIT<'д','м'>
*
    1 KEY(A8)             /* йкчв дкъ опнбепйх мюкхвхъ яса/явернб
    1 REDEFINE KEY
      2 KEY-OG(N05)       /* нпцюмхгюжхъ
      2 KEY-BS(N03)       /* а/явер
    1 NASTR(A1)
*   1 TAB-RUS(A1/1:9)  INIT < 'м','е','р','й','б','н','я','п','ю'>
*   1 TAB-ENG(A1/1:9)  INIT < 'H','E','T','K','B','O','C','P','A'>
*   1 SLOVO(A3)
*   1 REDEFINE SLOVO
*     2 SYMVOL(A1/1:3)
*   1 REDEFINE SLOVO
*     2 SYMVOLB(B1/1:3)
    1 RAB-ST(N2)
    1 FL-NIK(P7)
    1 RESID(I4)
    1 OPSYS(A3)
*
END-DEFINE
*
OPSYS := OPSYS :=#OPSYS := *OPSYS
INCLUDE DEFOPSYS
ASSIGN KEY-OG = OG-IDENT-G
DEFINE WINDOW NMW
              SIZE 8*50
              BASE 8/16
              TITLE 'мЮХЛЕМНБЮМХЕ'
              CONTROL WINDOW
              FRAMED ON
*
SET KEY PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
IF #RW = 'R'
  #FIELD-01C(*) := #FIELD-02C(*) := #FIELD-03C(*) :=
  #FIELD-04C(*) := #FIELD-08C(*) := #FIELD-09C(*) :=
  #FIELD-10C(*) := (AD=PD)
  SET KEY PF5=OFF
END-IF
INCLUDE CCASKOG
*
MOVE 7   TO N-DATA N-DATA-B     /* мнлеп ярейю я дюммшлх
MOVE 231  TO L-DATA L-DATA-B     /* дкхмю щкелемрю б ярейе я дюммшлх
MOVE 200 TO Q-DATA Q-DATA-B     /* Kнк-бн щкелемрнб б ярейе я дюммшлх
*
MOVE 8   TO N-DEL  N-DEL-B      /* мнлеп ярейю я ISN сдюкеммшу гюохяеи
MOVE 4   TO L-DEL  L-DEL-B      /* дкхмю щкелемрю б ярейе я ISN
MOVE 200 TO Q-DEL  Q-DEL-B      /* йнкхвеярбн щкелемрнб б ярейе я ISN
*
ASSIGN Q-FIELD = 7          /* онкеи б ярпнйе(хглемъелшу)
ASSIGN Q-LINE = 15          /* ярпнй мю щйпюме
ASSIGN F-LINE = 6           /* ялеыемхе оепбни ярпнйх
ASSIGN C-CURS = 1           /* ярпнйю я йспянпнл
ASSIGN T-KEY = 7            /* мювюкэмюъ онгхжхъ йкчвебнцн юрпхасрю
ASSIGN L-KEY = 3            /* дкхмю йкчвебнцн юрпхасрю
ASSIGN P-INPUT(1,1) = 6
ASSIGN P-INPUT(2,1) = 11
ASSIGN P-INPUT(3,1) = 14
ASSIGN P-INPUT(4,1) = 18
ASSIGN P-INPUT(5,1) = 21
ASSIGN P-INPUT(6,1) = 25
ASSIGN P-INPUT(7,1) = 66
ASSIGN P-INPUT(1,2) = 3
ASSIGN P-INPUT(2,2) = 2
ASSIGN P-INPUT(3,2) = 2
ASSIGN P-INPUT(4,2) = 1
ASSIGN P-INPUT(5,2) = 2
ASSIGN P-INPUT(6,2) = 40
ASSIGN P-INPUT(7,2) = 8
*
ASSIGN P-STEK(1,1) = 7
ASSIGN P-STEK(2,1) = 10
ASSIGN P-STEK(3,1) = 12
ASSIGN P-STEK(4,1) = 14
ASSIGN P-STEK(5,1) = 20
ASSIGN P-STEK(6,1) = 22
ASSIGN P-STEK(7,1) = 62
ASSIGN P-STEK(8,1) = 70
ASSIGN P-STEK(1,2) = 3
ASSIGN P-STEK(2,2) = 2
ASSIGN P-STEK(3,2) = 2
ASSIGN P-STEK(4,2) = 1
ASSIGN P-STEK(5,2) = 2
ASSIGN P-STEK(6,2) = 40
ASSIGN P-STEK(7,2) = 8
*
* RESET MAX-EL(N-DATA)
INCLUDE CCNAVC1
*
* нямнбмни жхйк
*
REPEAT
*
  RESET #FIELD-01(*) #FIELD-02(*) #FIELD-03(*) #FIELD-04(*)
        #FIELD-08(*) #FIELD-09(*) #FIELD-10(*)
         FIELD-RC(*)
*
  PERFORM ARRY-PROC
 REPEAT
   INPUT MARK F-MARK USING MAP 'NAVBS3M1'
*
   FOR C-CURS 1 Q-LINE
     IF *CURS-FIELD = POS(#FIELD-01(C-CURS)) OR
                    = POS(#FIELD-02(C-CURS)) OR
                    = POS(#FIELD-03(C-CURS)) OR
                    = POS(#FIELD-04(C-CURS)) OR
                    = POS(#FIELD-10(C-CURS)) OR
                    = POS(#FIELD-08(C-CURS)) OR
                    = POS(#FIELD-09(C-CURS))
            ESCAPE BOTTOM  END-IF
   END-FOR
*  COMPUTE C-CURS = *CURS-LINE - F-LINE
*
    IF *PF-KEY = 'PF3'
      IF FL-NIK NE 0 OR OP-IDENT-G NE 0
*       PERFORM CHECK-ALL
       REINPUT
*       'мЕЯННРБЕРЯРБХЕ ЙНДХТХЙЮРНПНБ ЯРЮРЭХ СПНБМЧ.мЮФЛХРЕ PF5'
   'б ОПНЖЕЯЯЕ ПЮАНРШ АШКН ХГЛЕМЕМХЕ СПНБМ  ЙНДХТХЙЮРНПНБ ЯРЮРЭХ.'-
   'мЮФЛХРЕ PF5'
*        MARK *#FIELD-10(FL-NIK)
        ALARM
      END-IF
      ESCAPE  BOTTOM
    END-IF
*
  IF *PF-KEY = 'PF11' AND #FIELD-10(C-CURS) NE 0
    IF FIELD-ISN(C-CURS) NE 0
      GET IBS-BS-FILE FIELD-ISN(C-CURS)
      ASSIGN IBS-BS-FILE.CS-NN = #FIELD-10(C-CURS)
      ASSIGN IBS-BS-FILE.NM-BS = #FIELD-08(C-CURS)
      ASSIGN FIELD-NIK(C-CURS) = H'11'
      UPDATE
     ELSE
      ASSIGN IBS-BS-FILE.OG-ID = OG-IDENT-G
      ASSIGN IBS-BS-FILE.BS-ID = #FIELD-01(C-CURS)
      ASSIGN IBS-BS-FILE.CS-NN = #FIELD-10(C-CURS)
      ASSIGN IBS-BS-FILE.SS-ID = 0
      ASSIGN IBS-BS-FILE.NM-BS = #FIELD-08(C-CURS)
      ASSIGN FIELD-NIK(C-CURS) = H'22'
ST.   STORE IBS-BS-FILE
      ASSIGN FIELD-ISN(C-CURS) = *ISN(ST.)
    END-IF
   END OF TRANSACTION
   PERFORM SCAN-PROC
*   ASSIGN FIELD-FF(C-CURS) = H'01'
   RESET PARSTBS ;
   PARSTBS.OG_ID := OG-IDENT-G
   PARSTBS.BS_ID := #FIELD-01(C-CURS)
   PARSTBS.SS_ID := 0
   PARSTBS.NLEV  := #FIELD-10(C-CURS)
   PERFORM SPSTBSED PARSTBS PRMNAV ;
   INCLUDE CCRFUNNM
   RESID := PARSTBS.RESULT_ID
   IF NOT PARSTBS.RESULT OR PARSTBS.RESULT_ID EQ 1 THRU MAXERRMSG THEN
      REINPUT STATMSGL(RESID) MARK *#FIELD-01(C-CURS) ALARM
    ESCAPE TOP
   END-IF
   IF C*GS-F NE #FIELD-10(C-CURS) ASSIGN FL-NIK = C-CURS END-IF
   ESCAPE TOP
  END-IF
*
  INCLUDE     CCNAVC2   /* напюанрйю от
***
  IF *PF-KEY = 'PF1'
    SET WINDOW 'NMW'
    INPUT(AD=MIL) ##FIELD-08(C-CURS,1) / ##FIELD-08(C-CURS,2)
    / ##FIELD-08(C-CURS,3) / ##FIELD-08(C-CURS,4)
    / ##FIELD-08(C-CURS,5)
    SET WINDOW OFF
    ESCAPE TOP
  END-IF
  IF *PF-KEY = 'PF6' AND FL-CURS = 0 AND #FIELD-01(C-CURS) NE 0 THEN
    COMPUTE COU-EL(N-DATA) = FIRST-EL(N-DATA) + C-CURS - 1
*    STACK TOP COMMAND 'NAVBS3' /* *PROGRAM
*    STACK TOP COMMAND 'NAVDK0' #FIELD-01(C-CURS)
*    STOP
     STACK TOP DATA #FIELD-01(C-CURS)
     CALLNAT 'SNAVDK0' PRMNAV
     INCLUDE CCRFUNNM
     CALLNAT 'SNAVBS3' PRMNAV
     INCLUDE CCRFUNNM
  END-IF
*
***
  IF *PF-KEY = 'PF2' AND FL-CURS = 0 AND #FIELD-01(C-CURS) NE 0 THEN
    COMPUTE COU-EL(N-DATA) = FIRST-EL(N-DATA) + C-CURS - 1
    ASSIGN OP-IDENT-G = FL-NIK
*    STACK TOP COMMAND 'NAVBS3' /* *PROGRAM
*    STACK TOP COMMAND 'NAVSS3' #FIELD-01(C-CURS)
*    STOP
     STACK TOP DATA #FIELD-01(C-CURS)
     CALLNAT 'SNAVSS3' PRMNAV
     INCLUDE CCRFUNNM
     CALLNAT 'SNAVBS3' PRMNAV
     INCLUDE CCRFUNNM
  END-IF
*
  IF *PF-KEY NE 'PF11' ESCAPE BOTTOM END-IF
  END-REPEAT
  IF *PF-KEY = 'PF3' OR = 'PF5'
      RESET FL-NIK COU-EL(N-DATA) OP-IDENT-G
      ESCAPE BOTTOM
  END-IF
END-REPEAT
*
INCLUDE   CCNAVC3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* времхе дюммшу хг IBS-BS-FILE б ярей я дюммшлх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE LOAD-PROC
* вхярхл явервхй гюохяеи б ярейе я дюммшлх
  ASSIGN C-DATA = 0
* бшахпюел дюммше хг ад
  FIND IBS-BS-FILE OG-ID = OG-IDENT-G  /* SORTED OG-BS
* нрахпюел рнкэйн мсфмше гюохях
    ACCEPT IF SS-ID = 0
* сбекхвхбюел явервхй гюохяеи б ярейе
    ADD 1 TO C-DATA
* опебшьемю цпюмхжю ярейю
    IF C-DATA > Q-DATA THEN ESCAPE BOTTOM END-IF
* опхябюхбюел гмювемхъ яксфеамшл оепелеммшл
    ASSIGN STEK-FF  = H'00'
    ASSIGN STEK-ISN = *ISN
* бгбндхл ткюц дносярхлнярх хглемемхи
    ASSIGN KEY-BS = BS-ID
F1.    FIND NUMBER IBS-BS-FILE OG-BS = KEY
    IF *NUMBER(F1.) > 1
      THEN ASSIGN STEK-UP = '+'
      ELSE ASSIGN STEK-UP = ' '
    END-IF
* опхябюхбюел гмювемхъ онкеи ад
    ASSIGN STEK-01 = BS-ID
    ASSIGN STEK-02 = RZ-ID
    ASSIGN STEK-03 = AP-ID
    ASSIGN STEK-04 = FL-BL
*   ASSIGN STEK-05 = FL-AN
*   ASSIGN STEK-06 = FL-DI
*   ASSIGN STEK-07 = FL-PO
    ASSIGN STEK-08 = NM-BS
    ASSIGN STEK-09 = PG-ID
    IF CS-NN = 0
      ASSIGN STEK-10 = 0
     ELSE
      ASSIGN STEK-10 = CS-NN
    END-IF
* опнбепйю мю мюкхвхе гюохяеи он дюммнлс яверс б REC-FILE
*   PERFORM REC-PROC
* гюохяшбюел ярпнйс б ярей я дюммшлх
    ASSIGN C-DATA-B = C-DATA
    CALL 'RWSX' C-DATA-B STEK-REC WR-REC N-DATA-B
*
  END-FIND
* опхябюхбюел гмювемхъ цкнаюкэмшл явервхйюл
  ASSIGN MAX-EL(N-DATA)   = C-DATA /* й_бн гюохяеи б ярейе дюммшу
  ASSIGN FIRST-EL(N-DATA) = 1      /* N б ярейе оепбни мю щйпюме
  ASSIGN COU-EL(N-DATA)   = 0      /* N б ярейе нрнапюммни гюохях
  ASSIGN MAX-EL(N-DEL)    = 0      /* й_бн гюохяеи б ярейе сдк. гюо.
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнбепйх дюммшу щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-PROC
* яхмупнмхгхпсел явервхй ярпнй мю щйпюме х явервхй гюохяеи б ярейе
IF #RW NE 'R'
ASSIGN C-DATA = FIRST-EL(N-DATA)
* опнялюрпхбюел ярпнйх щйпюмю
FOR C-LINE = 1 TO Q-LINE
* времхе яннрберярбсчыеи гюохях хг ярейю
  ASSIGN C-DATA-B = C-DATA
  CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
* опнбепйю мю дносярхлнярэ хглемемхъ йкчвебнцн онкъ
  IF #FIELD-01(C-LINE) NE STEK-01 AND FIELD-UP(C-LINE) = '+' THEN
    COMPRESS 'явер' STEK-01
             'хлеер яса/яверю хглемемхе ме дносярхлн' INTO RE-MSG
    REINPUT RE-MSG MARK *#FIELD-01(C-LINE) ALARM
  END-IF
* опнбепйю мю дносярхлнярэ хглемемхъ юмюкхрхйх
* IF #FIELD-05(C-LINE) NE STEK-05
**   #FIELD-06(C-LINE) NE STEK-06 OR
**   #FIELD-07(C-LINE) NE STEK-07
*    ASSIGN KEY-BS =  STEK-01
*    PERFORM REC-PROC
*    IF STEK-RC = '+'
*     MOVE  'хглемемхе ме дносяйюеряъ.еярэ гюохях б IBS-REC-FILE '
*                                                       TO RE-MSG
**    REINPUT RE-MSG MARK *#FIELD-01(C-LINE) ALARM
*    END-IF
* END-IF
* йкчвебне онке ме 0 бшонкмъел опнбепйх
  IF #FIELD-01(C-LINE) NE 0 THEN
* опнбепйю мю дсакхпнбюмхе йкчвебнцн онкъ б опедекюу щйпюмю
   EXAMINE #FIELD-01-A(*) #FIELD-01-A(C-LINE) GIVING NUMBER C-DUBL
   IF C-DUBL > 1 AND FIELD-UP(C-LINE) = ' ' THEN
     REINPUT'дсакхпнбюмхе а/яверю' MARK *#FIELD-01(C-LINE) ALARM
   END-IF
* опнбепйю мю дсакхпнбюмхе йкчвебнцн онкъ б опедекюу ярейю
   RESET C-DATA-B
   COMPUTE C-DATA2 = FIRST-EL(N-DATA) + Q-LINE - 1
   REPEAT
     ASSIGN C-DATA1-B = T-KEY
     ASSIGN C-DATA2-B = L-KEY
     CALL 'CMPX' #FIELD-01(C-LINE) C-DATA1-B C-DATA2-B N-DATA-B C-DATA-B
     IF C-DATA1-B = H'00000000' THEN ESCAPE BOTTOM END-IF
     ASSIGN C-DATA1 = C-DATA1-B
     IF NOT(C-DATA1 = FIRST-EL(N-DATA) THRU C-DATA2) THEN
       REINPUT'дсакхпнбюмхе а/яверю' MARK *#FIELD-01(C-LINE) ALARM
     END-IF
     ASSIGN C-DATA-B = C-DATA1-B
    END-REPEAT
*
*   ASSIGN SLOVO = #FIELD-03(C-LINE)
*   PERFORM TRANS-PROC
*   ASSIGN #FIELD-03(C-LINE) = SLOVO
    IF NOT ( #FIELD-03(C-LINE) = SYS-A OR = SYS-AP OR = 'о' )
      RE-MSG := 'дносярхлше гмювемхъ:ю, юо, о'
*   EXAMINE INIT-03(*) #FIELD-03(C-LINE) GIVING NUMBER C-DUBL
*   IF C-DUBL = 0 THEN
*     COMPRESS 'дносярхлше гмювемхъ:' INIT-03(*) INTO RE-MSG
      REINPUT RE-MSG MARK *#FIELD-03(C-LINE) ALARM
    END-IF
*
*   ASSIGN SLOVO = #FIELD-04(C-LINE)
*   PERFORM TRANS-PROC
*   ASSIGN #FIELD-04(C-LINE) = SLOVO
    IF NOT ( #FIELD-04(C-LINE) = 'д' OR = SYS-N )
      RE-MSG := 'дносярхлше гмювемхъ: д, м'
*   EXAMINE INIT-04(*) #FIELD-04(C-LINE) GIVING NUMBER C-DUBL
*   IF C-DUBL = 0 THEN
*     COMPRESS 'дносярхлше гмювемхъ:' INIT-04(*) INTO RE-MSG
      REINPUT RE-MSG MARK *#FIELD-04(C-LINE) ALARM
    END-IF
*
   IF #FIELD-10(C-LINE) NE 0
       RESET PARCOMM
       PARCOMM.OG_ID := OG-IDENT-G
       PERFORM SPSTCOMM PARCOMM
       IF #FIELD-10(C-LINE) < 0 OR #FIELD-10(C-LINE)
                                          > PARCOMM.MAXLEV
        REINPUT 'лЮЙЯХЛЮКЭМНЕ ЙНК-БН СПНБМЕИ Б ЯХЯРЕЛЕ:1:',
        PARCOMM.MAXLEV MARK *#FIELD-10(C-LINE) ALARM
       END-IF
* ЕЯКХ БШЬКХ ОН PF3 ХГ НОПЕДЕКЕМХ  ЙНДХТ. ОН ЯРЮРЭЕ
       IF FIELD-ISN(C-LINE) NE 0
       GET IBS-BS-FILE FIELD-ISN(C-LINE)
       IF C*GS-F  NE #FIELD-10(C-LINE)
            ASSIGN FL-NIK = C-LINE /* '*'
*    INPUT *OUT C*GS-F *OUT #FIELD-10(C-LINE) *OUT FIELD-ISN(C-LINE)
            REINPUT 'мЕЯННРБЕРЯРБХЕ ЙНДХТХЙЮРНПНБ ЯРЮРЭХ СПНБМЧ'
            MARK *#FIELD-10(C-LINE) ALARM
       END-IF
       END-IF
*
   END-IF
*
    IF #FIELD-08(C-LINE) = ' ' THEN
      REINPUT'мюхлемнбюмхе ?' MARK *#FIELD-08(C-LINE) ALARM
    END-IF
*
  END-IF
* сбекхвхбюел явервхй ярейю я дюммшлх
  ADD 1 TO C-DATA
*
END-FOR
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю хглемемхъ дюммшу
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE UPD-PROC
* сдюкъел гюохях
FOR C-DEL 1 TO MAX-EL(N-DEL)
  ASSIGN C-DEL-B = C-DEL
  CALL 'RWSX' C-DEL-B STEK-ISN RD-REC N-DEL-B
  GET IBS-BS-FILE STEK-ISN
  DELETE
END-FOR
* опнялюрпхбюел ярей я дюммшлх
FOR C-DATA 1 TO MAX-EL(N-DATA)
* вхрюел хг ярейю нвепедмсч гюохяэ
  ASSIGN C-DATA-B = C-DATA
  CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
* гюохяэ мнбюъ хкх хглемеммюъ
  IF STEK-FF = H'01' THEN
    IF STEK-ISN NE 0
         GET IBS-BS-FILE STEK-ISN
    END-IF
    ASSIGN IBS-BS-FILE.OG-ID = OG-IDENT-G
    ASSIGN IBS-BS-FILE.BS-ID = STEK-01
    ASSIGN IBS-BS-FILE.RZ-ID = STEK-02
    ASSIGN IBS-BS-FILE.AP-ID = STEK-03
    ASSIGN IBS-BS-FILE.FL-BL = STEK-04
*   ASSIGN IBS-BS-FILE.FL-AN = STEK-05
*   ASSIGN IBS-BS-FILE.FL-DI = STEK-06
*   ASSIGN IBS-BS-FILE.FL-PO = STEK-07
    ASSIGN IBS-BS-FILE.NM-BS = STEK-08
    ASSIGN IBS-BS-FILE.PG-ID = STEK-09
    ASSIGN IBS-BS-FILE.CS-NN = STEK-10
    RESET  IBS-BS-FILE.SS-ID
    IF STEK-ISN NE 0
      THEN UPDATE
      ELSE STORE IBS-BS-FILE
    END-IF
*
    ASSIGN KEY-BS = STEK-01
    FIND IBS-BS-FILE OG-BS = KEY
      ACCEPT IF SS-ID NE 0
      ASSIGN RZ-ID = STEK-02
      ASSIGN AP-ID = STEK-03
      ASSIGN FL-BL = STEK-04
*     ASSIGN FL-AN = STEK-05
*     ASSIGN FL-DI = STEK-06
*     ASSIGN FL-PO = STEK-07
      ASSIGN PG-ID = STEK-09
      UPDATE
    END-FIND
*
  END-IF
*
  END OF TRANSACTION
*
END-FOR
*
*  дкъ хглемемхъ явернб б ярейе 10
   ASSIGN COU-EL(10) = 1 /* оепегюцпсгйю явернб ('UFRO3')
END-SUBROUTINE
*************************************************
* опнбепйю он REC-FILE
*************************************************
  DEFINE SUBROUTINE REC-PROC
   RESET STEK-RC
   FIND IBS-BS-FILE OG-BS = KEY
    IF SS-ID NE 0
F2.       FIND IBS-REC-FILE  OS-F = SS-ID AND SY-F = 'UFRO'
          ACCEPT IF KD-F = OG-IDENT-G
          IF *COUNTER(F2.) > 0
             ASSIGN  STEK-RC = '+'
             ESCAPE BOTTOM
          END-IF
       END-FIND
       IF STEK-RC = '+'
          ESCAPE BOTTOM
       END-IF
    END-IF
   END-FIND
 END-SUBROUTINE
*******************************
* оепебнд б ьхпнйхи рпюйр
*******************************
* DEFINE SUBROUTINE TRANS-PROC
*  FOR C-DATA1   1 3
*    EXAMINE TAB-ENG(*) FOR SYMVOL(C-DATA1) GIVING INDEX C-DEL
*   IF C-DEL NE 0
*    ASSIGN SYMVOL(C-DATA1) = TAB-RUS(C-DEL)
*   END-IF
*  END-FOR
*  END-SUBROUTINE
*********************************
* онкмши йнмрпнкэ
*********************************
 DEFINE SUBROUTINE CHECK-ALL
   FOR C-DATA 1 MAX-EL(N-DATA)
     ASSIGN C-DATA-B = C-DATA
     CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
   END-FOR
 END-SUBROUTINE
*
END
