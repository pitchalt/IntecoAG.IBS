* >Natural Source Header 000000 /*<RO>>
* :NatName SPSTSLCT
* :UID UOCNEW2
* :Mode S
* :CP
* :Date 20010924
* :Time 1531330
* <Natural Source Header /*<<RO>
DEFINE DATA
* GLOBAL USING UFROG
 PARAMETER USING PRMSELSF
 PARAMETER USING PRMNAVI
 LOCAL USING PRMSELSS
 LOCAL USING LCLMSGL
 LOCAL USING LCLSTAT
 LOCAL USING PRMCOMM
 LOCAL USING PRMSELSV
 LOCAL
1 WR-REC(B4) CONST <H'00000001'> /* œ–»«Õ¿  «¿œ»—» ¬ —“≈ 
1 RD-REC(B4) CONST <H'00000000'> /* œ–»«Õ¿  ◊“≈Õ»ﬂ »« —“≈ ¿
1 N_RELOADST(I4) /* IN GLOBAL
1 I_RELOADST(I4) /*   AREA
/*****************************
1 KEYSTFR(A16)
1 REDEFINE KEYSTFR
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTO(A16)
1 REDEFINE KEYSTTO
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTM(A16)
1 REDEFINE KEYSTTM
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
/*****************************
1 LISTKEY VIEW OF IBS-SYS-FILE
 2 OG-ST
/*****************************
1 INFO
/****** COMMON ********
  2 OGID(I4)
  2 POINT(A1)
  2 NULL(A1)
  2 FILL(A1)
  2 MAXLEV(N2)
/**********************
  2 SCHID(I4)
  2 NAMEBS(A70)
  2 NUMLEV(I4)
  2 LIST(1:10)
   3 BL_F(A1)
   3 ST_F(A5)
   3 NS_F(I4/1:30)
  2 NAMEST(A70/1:10)
  2 CURLEV(I4)
/*****************************
1 LSELECT
 2 MESS1(A10)
 2 SELFST(A30)
 2 NM_CURFSTAT(A118)
 2 REDEFINE NM_CURFSTAT
   3 STRNAME1(A59)
   3 STRNAME2(A59)
 2 ARRAY(10)
  3 CODE(I4)
/*****************************
1 SCREEN
 2 CURFSTAT(A30)
 2 NM_CURFSTAT(A177)
 2 REDEFINE NM_CURFSTAT
   3 STRNAME1(A59)
   3 STRNAME2(A59)
   3 STRNAME3(A59)
 2 SCREENTABLE(10)
   3 SUBLEV(I4/1:10)
   3 ATTR(C/1:10)
/*****************************
1 DATA(10)
 2 NUMDAT(B4)      /* ÕŒÃ≈– —“≈ ¿
 2 COLDAT(B4)      /*  ŒÀ-¬Œ ¬€ƒ≈À≈ÕÕ€’ ›À≈Ã≈Õ“Œ¬
 2 LENDAT(B4)      /* ƒÀ»Õ¿ —“≈ ¿
 2 MAXDAT(I4)      /*  ŒÀ-¬Œ «¿√–”∆≈ÕÕ€’ ƒ¿ÕÕ€’
 2 CURDAT(I4)      /* œ≈–¬€… ›À≈Ã≈Õ“ —“≈ ¿ Œ“Œ¡–¿∆¿≈Ã€… Õ¿ SCREEN
 2 LSTACK(N6)
1 TMPSTK(A6)
/*****************************
1 OTBOR
 2 CODE_FR (I4)
 2 CODE_TO (I4)
 2 NAME (A050)
1 OTBORSCR
  2 CODE_FR (I4)
  2 CODE_TO (I4)
  2 NAME (A050)
/*****************************
1 B(B4)
1 BL(B4)
1 I(I4)
1 J(I4)
1 D1(I4)
1 D2(I4)
1 ERRORID(I4)
1 POSIT(I4)
1 MESSAGE(A75)
1 NN(N6)
END-DEFINE
DEFINE SUBROUTINE SPSTSLCT
 DEFINE WINDOW OUT_WINDOW
  SIZE 24*63
  BASE 1/8
  TITLE '¬˚·Ó Û˜ÂÚÌÓÈ ÒÚ‡Ú¸Ë.'
  CONTROL SCREEN
  FRAMED ON POSITION OFF ;
/************************************************
DEFINE WINDOW WINDOWOTBOR
 SIZE 7*55
 BASE 6/12
 TITLE 'ŒÚ·Ó ÒÚ‡ÚÂÈ ÔÓ ÍËÚÂË Ï'
 CONTROL SCREEN
 FRAMED POSITION OFF
******************************************
 RESET SELSSPAR ;
 SELSSPAR.SEL_OG := SELSFPAR.SEL_OG ;
 SELSSPAR.SEL_SS := SELSFPAR.SEL_SS ;
 RESET SELSFPAR ;
 RESET INFO ;
 IF SELSSPAR.SEL_OG > 0 THEN
  SELSFPAR.SEL_OG := SELSSPAR.SEL_OG ;
  SELSFPAR.SEL_SS := SELSSPAR.SEL_SS
  CALLNAT 'SBCHKSS' SELSSPAR ;
  IF SELSSPAR.SEL_SS EQ 0 THEN
    INCLUDE CCMSG 'STATMSGL(5)'
    ESCAPE ROUTINE
   ELSE
    INFO.SCHID  := SELSSPAR.SEL_SS
    INFO.NAMEBS := SELSSPAR.SEL_NM ;
  END-IF
  IF SELSSPAR.CS_NN EQ 0 THEN
   IF SELSSPAR.SEL_BS EQ 0 THEN
     INCLUDE CCMSG 'STATMSGL(5)'
     ESCAPE ROUTINE
    ELSE
     SELSSPAR.SEL_SS := 0
     CALLNAT 'SBCHKSS' SELSSPAR ;
   END-IF
  END-IF
  IF SELSSPAR.CS_NN EQ 0 THEN
    INCLUDE CCMSG 'STATMSGL(13)'
   ESCAPE ROUTINE
  END-IF
  INFO.OGID   := SELSFPAR.SEL_OG ;
  I := SELSSPAR.CS_NN
  INFO.NUMLEV := I
  MOVE BY NAME SELSSPAR.LIST_STAT(1:I) TO INFO.LIST(1:I) ;
  FOR I = 1 TO INFO.NUMLEV
   IF INFO.ST_F(I) EQ ' ' THEN ESCAPE TOP END-IF
   RESET PARCOMM ;
   PARCOMM.OG_ID := INFO.OGID
   PARCOMM.SHORT := INFO.ST_F(I)
    PERFORM SPSTCOMM PARCOMM ;
   IF NOT PARCOMM.RESULT OR PARCOMM.RESULT_ID EQ 1 THRU MAXERRMSG THEN
    ERRORID := PARCOMM.RESULT_ID
    INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
    ESCAPE ROUTINE
   END-IF
  END-FOR
  RESET PARCOMM ;
  PARCOMM.OG_ID := INFO.OGID
   PERFORM SPSTCOMM PARCOMM ;
  IF NOT PARCOMM.RESULT OR PARCOMM.RESULT_ID EQ 1 THRU MAXERRMSG THEN
   ERRORID := PARCOMM.RESULT_ID
   INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
   ESCAPE ROUTINE
  END-IF
  INFO.POINT  := PARCOMM.POINT
  INFO.NULL   := PARCOMM.NULL
  INFO.FILL   := PARCOMM.FILL
  INFO.MAXLEV := PARCOMM.MAXLEV
  IF INFO.MAXLEV < INFO.NUMLEV THEN
   INCLUDE CCMSG 'STATMSGL(14)' ;
   ESCAPE ROUTINE
  END-IF
  IF INFO.NULL EQ ' ' THEN
   IF INFO.ST_F(1:NUMLEV) EQ ' ' THEN
    INCLUDE CCMSG 'STATMSGL(14)' ;
    ESCAPE ROUTINE
   END-IF
  END-IF
/************************************************
RESET OTBOR OTBORSCR ;
 PERFORM LOAD_DATA ;
IF ERRORID EQ 1 THRU MAXERRMSG THEN
  PERFORM FREE_DATA ;
 INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
 ESCAPE ROUTINE
END-IF
* SET CONTROL 'N'
* INPUT USING MAP 'MAPMAND9' NO ERASE ;
REPEAT
  PERFORM LOAD_SCREEN ;
 SET WINDOW 'OUT_WINDOW'
 INCLUDE CCSETKEY ;
 INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT USING MAP 'MAPSFM01'
 POSIT := *CURS-FIELD
 INFO.CURLEV := 0
 FOR I = 1 TO INFO.NUMLEV
  IF POSIT EQ POS(SCREEN.SUBLEV(I,1)) THEN
     INFO.CURLEV := I ESCAPE BOTTOM END-IF
 END-FOR
 SET WINDOW OFF
 ERRORID := 0
 RESET MESSAGE ;
 DECIDE ON FIRST VALUE *PF-KEY
  VALUE 'PF2'
   RESET LSELECT ;
  VALUE 'PF3'
   IF LSELECT.SELFST NE ' ' THEN
     SELSFPAR.STAT_A := LSELECT.SELFST
     SELSFPAR.CODE(1:NUMLEV)  := LSELECT.CODE(1:NUMLEV)
     SELSFPAR.SHORT(1:NUMLEV) := INFO.ST_F(1:NUMLEV)
     FOR I = 1 TO INFO.NUMLEV
      KEYSTTM.KEYOG := INFO.OGID
      KEYSTTM.KEYST := SELSFPAR.SHORT(I)
      KEYSTTM.KEYCD := SELSFPAR.CODE(I)
      IF KEYSTTM.KEYCD > 0 THEN
       FIND (1) VIEWSTAT OG-ST EQ KEYSTTM
        SELSFPAR.NAME(I) := VIEWSTAT.NM-OG ;
       END-FIND
      END-IF
     END-FOR
    ELSE
     RESET SELSFPAR ;
   END-IF
    PERFORM FREE_DATA;
   ESCAPE BOTTOM ;
  VALUE 'PF4'
   IF INFO.CURLEV EQ 1 THRU INFO.NUMLEV
    SET WINDOW OFF
    SET CONTROL 'N'
    INPUT USING MAP 'MAPMAND2'
    SET CONTROL 'N'
    SET WINDOW 'OUT_WINDOW'
    INPUT USING MAP 'MAPSFM01'
    SET WINDOW OFF
    MOVE BY NAME OTBOR TO OTBORSCR ;
    ERRORID := 0
    REPEAT
     DECIDE ON FIRST VALUE ERRORID
      VALUE 1
       MESSAGE := 'Õ‡˜‡Î¸ÌÓÂ ÁÌ‡˜ÂÌËÂ ÌÂ ÏÓÊÂÚ ·˚Ú¸ ·ÓÎ¸¯Â ÍÓÌÂ˜ÌÓ„Ó'
      NONE VALUE IGNORE
     END-DECIDE
     SET WINDOW 'WINDOWOTBOR'
     INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT USING MAP 'MAPTEDM2' ;
     POSIT := *CURS-FIELD
     ERRORID := 0
     SET WINDOW OFF
     RESET MESSAGE;
     IF *PF-KEY EQ 'PF3' THEN ESCAPE BOTTOM END-IF
     OTBORSCR.CODE_FR := ABS(OTBORSCR.CODE_FR)
     OTBORSCR.CODE_TO := ABS(OTBORSCR.CODE_TO)
     IF OTBORSCR.CODE_FR > OTBORSCR.CODE_TO AND
        OTBORSCR.CODE_TO NE 0 THEN
      POSIT := POS(OTBORSCR.CODE_FR)
      ERRORID := 1
     END-IF
     IF ERRORID NE 0 THEN ESCAPE TOP END-IF
     IF OTBORSCR.CODE_FR NE 0 AND OTBORSCR.CODE_TO EQ 0 THEN
      OTBORSCR.CODE_TO := OTBORSCR.CODE_FR END-IF
     IF OTBORSCR.CODE_FR EQ 0 AND OTBORSCR.CODE_TO EQ 0 THEN
      OTBORSCR.CODE_FR := 1
      OTBORSCR.CODE_TO := 999999           END-IF
     IF OTBORSCR.CODE_FR EQ 0 THEN OTBORSCR.CODE_FR := 1 END-IF
     IF *PF-KEY EQ 'ENTR' THEN
      IF OTBORSCR.CODE_FR NE OTBOR.CODE_FR OR
         OTBORSCR.CODE_TO NE OTBOR.CODE_TO OR
         OTBORSCR.NAME    NE OTBOR.NAME    THEN
       MOVE BY NAME OTBORSCR TO OTBOR ;
       KEYSTFR.KEYOG := KEYSTTO.KEYOG := SELSFPAR.SEL_OG
       I := INFO.CURLEV
       KEYSTFR.KEYST := KEYSTTO.KEYST := INFO.ST_F(I)
       KEYSTFR.KEYCD := OTBOR.CODE_FR
       KEYSTTO.KEYCD := OTBOR.CODE_TO
       DATA.MAXDAT(I) := 0
       IF OTBOR.NAME EQ ' ' THEN
         HISTOGRAM LISTKEY OG-ST FROM KEYSTFR THRU KEYSTTO
          KEYSTTM := OG-ST
          IF NOT (KEYSTTM.KEYCD EQ 1 THRU 999999) THEN ESCAPE TOP END-IF
          ADD 1 TO DATA.MAXDAT(I) ;
          B := DATA.MAXDAT(I)
          DATA.LSTACK(I) := KEYSTTM.KEYCD
          CALL 'RWSX' B DATA.LSTACK(I) WR-REC DATA.NUMDAT(I) ;
         END-HISTOGRAM
        ELSE
         FIND VIEWSTAT OG-ST EQ KEYSTFR THRU KEYSTTO
                             WHERE NM-OG EQ SCAN OTBOR.NAME
          ADD 1 TO DATA.MAXDAT(I) ;
          B := DATA.MAXDAT(I)
          DATA.LSTACK(I) := VIEWSTAT.CT-F
          CALL 'RWSX' B DATA.LSTACK(I) WR-REC DATA.NUMDAT(I) ;
         END-FIND
       END-IF
       DATA.CURDAT(I) := 1
/**********************************************************************
      END-IF
      ESCAPE BOTTOM
     END-IF
    END-REPEAT
    SET WINDOW OFF
    SET CONTROL 'N'
    INPUT USING MAP 'MAPMAND9'
   END-IF
  VALUE 'PF7'
   IF INFO.CURLEV EQ 1 THRU INFO.NUMLEV
    I := INFO.CURLEV
    ADD -1 TO DATA.CURDAT(I)
    IF DATA.CURDAT(I) < 1 THEN ADD 1 TO DATA.CURDAT(I) END-IF
   END-IF
  VALUE 'PF8'
   IF INFO.CURLEV EQ 1 THRU INFO.NUMLEV
    I := INFO.CURLEV
    ADD 1 TO DATA.CURDAT(I)
    IF DATA.CURDAT(I) > DATA.MAXDAT(I) THEN ADD -1 TO DATA.CURDAT(I)
    END-IF
   END-IF
  VALUE 'PF9'
   IF INFO.CURLEV EQ 1 THRU INFO.NUMLEV
    I := INFO.CURLEV
    DATA.CURDAT(I) := 1
   END-IF
  VALUE 'PF10'
   IF INFO.CURLEV EQ 1 THRU INFO.NUMLEV
    I := INFO.CURLEV
    DATA.CURDAT(I) := DATA.MAXDAT(I)
   END-IF
  VALUE 'PF11'
    PERFORM CHECK_SCREEN ;
   IF ERRORID < 0 THEN ESCAPE TOP END-IF
   RESET LSELECT;
   LSELECT.SELFST := SCREEN.CURFSTAT
   FOR I = 1 TO INFO.NUMLEV
    B := DATA.CURDAT(I)
    LSELECT.CODE(I) := SCREEN.SUBLEV(I,1)
    IF B EQ 1 THRU DATA.MAXDAT(I) THEN
     CALL 'RWSX' B DATA.LSTACK(I) RD-REC DATA.NUMDAT(I) ;
     LSELECT.CODE(I) := DATA.LSTACK(I)
    END-IF
    KEYSTTM.KEYOG   := INFO.OGID
    KEYSTTM.KEYST   := INFO.ST_F(I)
    KEYSTTM.KEYCD   := LSELECT.CODE(I)
    VIEWSTAT.NM-OG := 'œÛÒÚÓ'
    IF KEYSTTM.KEYCD > 0 THEN
     FIND (1) VIEWSTAT OG-ST EQ KEYSTTM
      IF NO RECORDS FOUND
       VIEWSTAT.NM-OG := 'ÕÂ Ì‡È‰ÂÌÓ!' ESCAPE BOTTOM
      END-NOREC
     END-FIND
    END-IF
    COMPRESS LSELECT.NM_CURFSTAT VIEWSTAT.NM-OG '|'
    TO LSELECT.NM_CURFSTAT;
   END-FOR
  NONE VALUE  PERFORM CHECK_SCREEN ;
 END-DECIDE
END-REPEAT
 END-IF
/************************************************
 DEFINE SUBROUTINE FREE_DATA
  FOR I = 1 TO INFO.NUMLEV
   CALL 'FRSX' DATA.NUMDAT(I)
  END-FOR
 END-SUBROUTINE
/************************************************
 DEFINE SUBROUTINE LOAD_DATA
   PERFORM FREE_DATA ;
  ERRORID := 0
  RESET DATA(*);
  FOR I = 1 TO INFO.NUMLEV /* INIT
   DATA.NUMDAT(I) := 0
   DATA.COLDAT(I) := 1000
   DATA.LENDAT(I) := 6
   DATA.MAXDAT(I) := 0
  END-FOR
  FOR I = 1 TO INFO.NUMLEV /* GET MEMORY
   ASSIGN DATA.NUMDAT(I) = MAX-NS
   CALL 'GTNX' DATA.NUMDAT(I) ;
   IF DATA.NUMDAT(I) EQ 0 THEN
    ERRORID := 8
    ESCAPE ROUTINE
   END-IF
   CALL 'GTSX' DATA.LENDAT(I) DATA.COLDAT(I) DATA.NUMDAT(I) ;
   IF INFO.NULL NE ' ' THEN /* ADD NULL VALUE
    ADD 1 TO DATA.MAXDAT(I)
    B := DATA.MAXDAT(I)
    DATA.LSTACK(I) := 0
    CALL 'RWSX' B DATA.LSTACK(I) WR-REC DATA.NUMDAT(I) ;
   END-IF
  END-FOR
  KEYSTFR.KEYOG := KEYSTTO.KEYOG := SELSFPAR.SEL_OG
  MOVE ALL H'00' TO KEYSTFR.KEYST ;
  MOVE ALL H'FF' TO KEYSTTO.KEYST ;
  KEYSTFR.KEYCD := 1
  KEYSTTO.KEYCD := 999999
/*  HISTOGRAM LISTKEY IN ASCENDING OG-ST /* The sorting is not required
/*                    FROM KEYSTFR THRU KEYSTTO
  HISTOGRAM LISTKEY OG-ST FROM KEYSTFR THRU KEYSTTO
   KEYSTTM := OG-ST
   IF NOT (KEYSTTM.KEYCD EQ 1 THRU 999999) THEN ESCAPE TOP END-IF
   EXAMINE INFO.ST_F(1:NUMLEV) FOR KEYSTTM.KEYST GIVING INDEX I
   IF NOT (I EQ 1 THRU INFO.NUMLEV) THEN ESCAPE TOP END-IF
   FOR I = 1 TO INFO.NUMLEV
    IF KEYSTTM.KEYST NE INFO.ST_F(I) THEN ESCAPE TOP END-IF
    ADD 1 TO DATA.MAXDAT(I)
    IF DATA.MAXDAT(I) > DATA.COLDAT(I) THEN
      PERFORM RELOADATA END-IF
    B := DATA.MAXDAT(I)
    DATA.LSTACK(I) := KEYSTTM.KEYCD
    CALL 'RWSX' B DATA.LSTACK(I) WR-REC DATA.NUMDAT(I) ;
   END-FOR
  END-HISTOGRAM
  POSIT   := 0
  MESSAGE := ' '
  ERRORID := 0
  RESET LSELECT;
  DATA.CURDAT(*) := 1
  INFO.CURLEV := 1
 END-SUBROUTINE
/************************************************
 DEFINE SUBROUTINE LOAD_SCREEN
  RESET SCREEN;
  RESET PRMSELSV;
  SCREEN.ATTR(*,*) := (AD=NP)
  FOR I = 1 TO INFO.NUMLEV
   FOR J = 1 TO 10
    B := J + DATA.CURDAT(I) - 1
    IF B <= DATA.MAXDAT(I) THEN
      CALL 'RWSX' B DATA.LSTACK(I) RD-REC DATA.NUMDAT(I) ;
      SCREEN.SUBLEV(I,J) := DATA.LSTACK(I)
      IF J EQ 1 THEN
       VIEWSTAT.NM-OG := 'œÛÒÚÓ'
       IF DATA.LSTACK(I) > 0 THEN
        KEYSTTM.KEYOG := INFO.OGID
        KEYSTTM.KEYST := INFO.ST_F(I)
        KEYSTTM.KEYCD := DATA.LSTACK(I)
        FIND (1) VIEWSTAT OG-ST EQ KEYSTTM
         IF NO RECORDS FOUND
          VIEWSTAT.NM-OG := 'ÕÂ Ì‡È‰ÂÌÓ!' ESCAPE BOTTOM
         END-NOREC
        END-FIND
       END-IF
       COMPRESS SCREEN.NM_CURFSTAT VIEWSTAT.NM-OG '|'
                    TO SCREEN.NM_CURFSTAT;
        SCREEN.ATTR(I,J) := (AD=D)
        PRMSELSV.CODE(I) := DATA.LSTACK(I)
       ELSE
        SCREEN.ATTR(I,J) := (AD=DP)
      END-IF
    END-IF
   END-FOR
  END-FOR
  PRMSELSV.OG_ID           := SELSFPAR.SEL_OG ;
  PRMSELSV.SS_ID           := INFO.SCHID
  PRMSELSV.SHORT(1:NUMLEV) := INFO.ST_F(1:NUMLEV)
  PRMSELSV.N_LEV           := INFO.NUMLEV
   PERFORM SPSTN2A PRMSELSV ;
  IF NOT PRMSELSV.RESULT OR PRMSELSV.RESULT_ID NE 0 THEN
   ERRORID := PRMSELSV.RESULT_ID
   ESCAPE ROUTINE
  END-IF
  SCREEN.CURFSTAT := PRMSELSV.STAT_A;
  IF LSELECT.SELFST NE ' ' THEN
   LSELECT.MESS1 := '¬˚·‡ÌÓ :'
  END-IF
 END-SUBROUTINE
/************************************************
 DEFINE SUBROUTINE CHECK_SCREEN
  FOR I = 1 TO INFO.NUMLEV
    B := DATA.CURDAT(I)
    IF NOT(B EQ 1 THRU DATA.MAXDAT(I)) THEN ESCAPE TOP END-IF
    CALL 'RWSX' B DATA.LSTACK(I) RD-REC DATA.NUMDAT(I) ;
    IF SCREEN.SUBLEV(I,1) NE DATA.LSTACK(I) THEN
     NN := SCREEN.SUBLEV(I,1)
     B  := 1
     BL := 6
     CALL 'CMPXF' NN B BL DATA.NUMDAT(I);
     IF B NE 0 THEN
       DATA.CURDAT(I) := B ;
        PERFORM LOAD_SCREEN ;
      ELSE
       D1 := 1
       D2 := DATA.MAXDAT(I)
       REPEAT
        B := NN := (D1 + D2) / 2 ;
        IF (D2 - D1) < 3 THEN
         DATA.CURDAT(I) := B ; /* ”œ–ŒŸ≈ÕÕ€… ¬¿–»¿Õ“  ŒÕ÷Œ¬ »
         ESCAPE BOTTOM
        END-IF
        CALL 'RWSX' B DATA.LSTACK(I) RD-REC DATA.NUMDAT(I) ;
        IF SCREEN.SUBLEV(I,1) > DATA.LSTACK(I) THEN
          D1 := NN
         ELSE
          D2 := NN
        END-IF
       END-REPEAT
       ERRORID := -1
       MESSAGE := 'œÓ‰ÒÚ‡Ú¸Ë Ò Ú‡ÍËÏ ÍÓ‰ÓÏ ÌÂ Ì‡È‰ÂÌÓ.';
       POSIT   := POS(SCREEN.SUBLEV(I,1))
       ESCAPE ROUTINE
     END-IF
    END-IF
  END-FOR
 END-SUBROUTINE
/************************************************
INCLUDE CCRLDST 'RELOADATA' 'LENDAT(I)' 'COLDAT(I)' 'NUMDAT(I)' 'TMPSTK';
END-SUBROUTINE
END
