* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVBNMN
* :UID IEN
* :Mode S
* :CP
* :Date 20001019
* :Time 1211330
* <Natural Source Header /*<<RO>
*********************************************************************
*                                                                   *
* бедемхе йндхтхйюрнпю аюмйнб                                       *
*                                                                   *
*********************************************************************
DEFINE DATA
PARAMETER USING PRMNAVI    /* цкнаюкэмше оепелеммше дкъ бяеи яхярелш
  LOCAL  USING LCLVOL     /* VIEW мю тюик IBS-SYS-FILE
  LOCAL  USING LCLBNL     /* VIEW мю тюик IBS-SYS-FILE
  LOCAL  USING LCLKKL     /* VIEW мю тюик IBS-SYS-FILE
  LOCAL  USING LCLFROL1      /* наыхе оепелеммше
  LOCAL
    1 INPUT-REC         (A253/5)
    1 REDEFINE INPUT-REC
      2 #INPUT-REC      (5)
* онкъ мебшбндхлше мю щйпюм
        3 FIELD-FF      (B001) /* ткюц хглемемхъ/сдюкемхъ гюохях
        3 FIELD-ISN     (P007) /* ISN гюохях
        3 FIELD-UP      (A001) /* ткюц гюыхрш гюохях
* онкъ бшбндхлше мю щйпюм
        3 #FIELD-01     (N008)      /* йнд аюмйю
        3 REDEFINE #FIELD-01
          4 #FIELD-01-A (A008)
        3 #FIELD-02     (A009)      /* йнд лтн 9 гм
        3 #FIELD-03     (A002)      /* свюярмхй
        3 #FIELD-04     (A020)      /* йнп.явер
        3 #FIELD-05     (A025)      /* юдпея йнп.яверю
        3 #FIELD-06     (A035)      /* юдпея аюмйю
        3 #FIELD-07     (A009)      /* лтн Pйж 9 гм
        3 #FIELD-08     (A068)      /* мюхлем.аюмйю
        3 #FIELD-09     (A006)      /* лтн 6 гм
        3 #FIELD-10     (A006)      /* лтн 6 гм
        3 #FIELD-11     (A059)
*
* ярпсйрспю щкелемрю ярейю я дюммшлх
*
    1 STEK-REC          (A253)
    1 REDEFINE STEK-REC
      2 STEK-FF         (B001)
      2 STEK-ISN        (P007)
      2 STEK-UP         (A001)
      2 STEK-01         (N008)
      2 STEK-02         (A009)
      2 STEK-03         (A002)
      2 STEK-04         (A020)
      2 STEK-05         (A025)
      2 STEK-06         (A030)
      2 STEK-07         (A009)
      2 STEK-08         (A068)
      2 STEK-09         (A006)
      2 STEK-10         (A006)
      2 STEK-11         (A059)
    1 KEY1              (A013)      /* онхяйнбши йкчв мювюкэмши
    1 REDEFINE KEY1
      2 KEYOG1          (N005)      /* нпцюмхгюжхъ
      2 KEYKD1          (N008)      /* йнд
    1 KEY2              (A013)      /* онхяйнбши йкчв йнмевмши
    1 REDEFINE KEY2
      2 KEYOG2          (N005)
      2 KEYKD2          (N008)
    1 KEY3              (A013)      /* онхяйнбши йкчв йнмрпнкэмши
    1 REDEFINE KEY3
      2 KEYOG3          (N005)
      2 KEYKD3          (N008)
    1 #DATA             (N003)
    1 CURS-L            (N003)
    1 L-FIELD           (N2/10)  INIT <01,01,01,01,01,02,02,02,02,03>
* FOR MAP
    1 #KB               (N008)      /* йнд аюмйю
    1 #MF               (A015)      /* йнд лтн
    1 #UT               (A003)      /* свюярмхй
    1 #KS               (A020)      /* йнп. явер
    1 #NAME             (A060)
    1 #ADRES            (A060)
*
    1 #KKB              (N008)
    1 #MF-SH            (A006)
    1 FL-NEW            (N001) INIT <0>
    1 #NA-F-ALT         (A059)
    1 #NA-F-TXT         (A059)
    1 III               (I004)
END-DEFINE
*
SET KEY PF1 PF2 PF3 PF4 PF5 PF6 PF7 PF8 PF9 PF10 PF11 PF12
*
MOVE 7   TO N-DATA N-DATA-B     /* мнлеп ярейю я дюммшлх
MOVE 253 TO L-DATA L-DATA-B     /* дкхмю щкелемрю б ярейе я дюммшлх
MOVE 5000 TO Q-DATA Q-DATA-B    /* йнк-бн щкелемрнб б ярейе я дюммшлх
*
MOVE  0   TO N-DEL-B            /* мнлеп ярейю я ISN сдюкеммшу гюохяеи
MOVE  1   TO N-DEL              /* мнлеп ярейю я ISN сдюкеммшу гюохяеи
MOVE  4   TO L-DEL  L-DEL-B     /* дкхмю щкелемрю б ярейе я ISN
MOVE 5000 TO Q-DEL  Q-DEL-B     /* йнк-бн щкелемрнб б ярейе я ISN
*
ASSIGN Q-LINE = 5               /* ярпнй мю щйпюме
*
ASSIGN P-STEK(1,1) = 15
ASSIGN P-STEK(2,1) = 24
ASSIGN P-STEK(3,1) = 26
ASSIGN P-STEK(4,1) = 46
ASSIGN P-STEK(5,1) = 71
ASSIGN P-STEK(6,1) = 101
ASSIGN P-STEK(7,1) = 110
ASSIGN P-STEK(8,1) = 178
ASSIGN P-STEK(9,1) = 184
ASSIGN P-STEK(1,2) = 9
ASSIGN P-STEK(2,2) = 2
ASSIGN P-STEK(3,2) = 20
ASSIGN P-STEK(4,2) = 25
ASSIGN P-STEK(5,2) = 30
ASSIGN P-STEK(6,2) = 9
ASSIGN P-STEK(7,2) = 68
ASSIGN P-STEK(8,2) = 6
ASSIGN P-STEK(9,2) = 6
*
*
* нямнбмни жхйк
*
MOVE OG-IDENT-G TO KEYOG1 KEYOG2 KEYOG3
RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
REPEAT
  ASSIGN #DATA = *DATA
  INPUT USING MAP 'MAPBNM11'
  IF *PF-KEY = 'PF3'
    CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
    RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
    ESCAPE BOTTOM
  END-IF
  ASSIGN C-CURS = 1           /* ярпнйю я йспянпнл
  IF #KB = 0  AND #DATA > 0
    SET CONTROL 'WBM'
    SET CONTROL 'WL67C15B010/005F'
    INPUT USING MAP 'MAPBNM3'
    SET CONTROL 'WB'
    IF *PF-KEY = 'PF3' THEN  ESCAPE BOTTOM END-IF
  END-IF
  ASSIGN #KKB = #KB
  ASSIGN KEYKD1 = 1  ASSIGN KEYKD2 = 99999999
*
  CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B /* ярей C дюмшлх
  CALL 'GTSX' L-DEL-B  Q-DEL-B  N-DEL-B  /* ярей я ISN сдюк. гюохяеи
*
  STACK TOP DATA  #KB #MF #UT #KS #NAME #ADRES #MF-SH
  CALLNAT 'SNAVBN3' PRMNAV
**  FETCH RETURN 'NAVBN1' #KB #MF #UT #KS #NAME #ADRES #MF-SH
*
  REPEAT
    RESET INPUT-REC(*) #FIELD-01(*) FIELD-ISN(*) FIELD-FF(*)
    PERFORM ARRY-PROC
    IF FL-NEW =  1
      ASSIGN FL-NEW = 2
    END-IF
    INPUT MARK III USING MAP 'MAPBNM25'  /* 'NAVBNM23'
    III := *CURS-FIELD
    FOR C-CURS 1 Q-LINE
      IF III = POS(#FIELD-02(C-CURS)) P-CURS := 1 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-03(C-CURS)) P-CURS := 2 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-04(C-CURS)) P-CURS := 3 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-05(C-CURS)) P-CURS := 4 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-06(C-CURS)) P-CURS := 5 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-07(C-CURS)) P-CURS := 6 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-08(C-CURS)) P-CURS := 7 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-09(C-CURS)) P-CURS := 8 ESCAPE BOTTOM END-IF
      IF III = POS(#FIELD-10(C-CURS)) P-CURS := 9 ESCAPE BOTTOM END-IF
    END-FOR
    DECIDE FOR EVERY CONDITION
      WHEN *PF-KEY = 'PF3' AND FL-NEW NE 0
        REINPUT 'сдюкхре ярпнйс' MARK *#FIELD-02(1) ALARM
      WHEN *PF-KEY = 'PF4' AND FL-NEW NE 0
        SET CONTROL 'KP1'
      WHEN *PF-KEY = 'PF4' AND FL-NEW = 0
        ASSIGN FL-NEW = 1
        FIND IBS-KK-FILE OG-ID = OG-IDENT-G AND KK-F = 'MB'
          IF NO
            ASSIGN OG-ID = OG-IDENT-G
            ASSIGN KK-F  = 'MB'
            ASSIGN KD-F  = 1
          END-NOREC
          ADD 1 TO KD-F
          ADD 1 TO MAX-EL(N-DATA)
          ASSIGN FIRST-EL(N-DATA) = MAX-EL(N-DATA)
          RESET INPUT-REC(*) #FIELD-01(*) FIELD-ISN(*) FIELD-FF(*)
          ASSIGN #FIELD-01(1) = KD-F
          ASSIGN FIELD-FF(1) = H'01'
          IF *NUMBER = 0
            THEN STORE IBS-KK-FILE
            ELSE UPDATE
          END-IF
          END OF TRANSACTION
        END-FIND
        SET CONTROL 'K10'
      WHEN *PF-KEY = 'PF6' AND #FIELD-01(C-CURS) NE 0
        FIND NUMBER IBS-KVO-FILE OG-ID = OG-IDENT-G
                           AND BN-OG(1) = #FIELD-01(C-CURS)
        IF *NUMBER NE 0
          REINPUT 'сдюкемхе мебнглнфмн' MARK *#FIELD-02(C-CURS) ALARM
        END-IF
        RESET #FIELD-01(C-CURS)
      WHEN *PF-KEY = 'PF11' AND #DATA > 0
        ASSIGN BN-IDENT-G = #FIELD-01(C-CURS)
        IF FL-NEW = 0
          ESCAPE BOTTOM
         ELSE
          SET CONTROL 'K5'
        END-IF
      WHEN *PF-KEY = 'PF3'
        CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
        RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
        ESCAPE BOTTOM
      WHEN *PF-KEY = 'PF2'
        PERFORM CHECK-PROC
        SET CONTROL 'WL65C8B08/10F'
        ASSIGN #NA-F-ALT = #FIELD-11(C-CURS)
        ASSIGN #NA-F-TXT = #FIELD-08(C-CURS)
        REPEAT
          INPUT USING MAP 'MAPBNM4'
          IF *PF-KEY = 'PF3'
            ASSIGN #FIELD-11(C-CURS) = #NA-F-ALT
            ESCAPE BOTTOM
          END-IF
        END-REPEAT
        SET CONTROL 'K0'
        SET CONTROL 'WBM'
      WHEN *PF-KEY NE 'PF3'
        PERFORM CHECK-PROC
        PERFORM SCAN-PROC
      WHEN *PF-KEY = 'PF5'
        CALLNAT 'SNAVBN4' PRMNAV  /* 'NAVBN2'
        CALL 'FRSX' N-DATA-B CALL 'FRSX' N-DEL-B
        RESET MAX-EL(N-DATA) MAX-EL(N-DEL) COU-EL(N-DATA)
        ESCAPE BOTTOM
      WHEN *PF-KEY = 'PF7'
        RESET III
        COMPUTE FIRST-EL(N-DATA) = FIRST-EL(N-DATA) - Q-LINE
        IF FIRST-EL(N-DATA) <= 0  FIRST-EL(N-DATA) := 1 END-IF
      WHEN *PF-KEY = 'PF8'
        RESET III
        COMPUTE C-DATA1 = FIRST-EL(N-DATA) + Q-LINE - 1
        IF C-DATA1 <= MAX-EL(N-DATA) THEN
          COMPUTE FIRST-EL(N-DATA) = C-DATA1 + 1
        END-IF
      WHEN *PF-KEY = 'PF9'
        RESET III
        ASSIGN FIRST-EL(N-DATA) = 1
      WHEN *PF-KEY = 'PF10'
        RESET III
        ASSIGN FIRST-EL(N-DATA) = MAX-EL(N-DATA)
      WHEN *PF-KEY = 'PF12'
        PERFORM SORT-PROC
      WHEN NONE IGNORE
    END-DECIDE
*
  END-REPEAT
  SET CONTROL 'K0'
  IF #DATA > 0  ESCAPE BOTTOM  END-IF
END-REPEAT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю оепеяшкйх дюммшу б люяяхб щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ARRY-PROC
  RESET FIELD-FF(*) FIELD-ISN(*) FIELD-UP(*)
* дкъ бшдювх яохяйю, мювхмюъ я сйюгюммнцн йндю
   IF #KKB NE 0
    ASSIGN C-DATA1-B = H'00000007'
    CALL 'CMPXF' #KB C-DATA1-B H'00000008' N-DATA-B
    IF C-DATA1-B NE 0
       ASSIGN FIRST-EL(N-DATA) = C-DATA1-B
    END-IF
   END-IF
   RESET #KKB
   ASSIGN C-DATA = FIRST-EL(N-DATA)
   FOR C-LINE = 1 TO Q-LINE
     IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
     ASSIGN C-DATA-B = C-DATA
     CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) RD-REC N-DATA-B
     ADD 1 TO C-DATA
   END-FOR
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнялнрпю ярпнй щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SCAN-PROC
 ASSIGN C-DATA = FIRST-EL(N-DATA)
 RESET C-DEL
 FOR C-LINE = 1 TO Q-LINE               /* опнялюрпхбюел ярпнйх щйпюмю
   ASSIGN C-DATA-B = C-DATA
   IF #FIELD-01(C-LINE) NE 0 THEN                 /* ярпнйю ме сдюкемю
     CALL 'RWSX' C-DATA-B STEK-REC RD-REC N-DATA-B
     IF STEK-REC NE INPUT-REC(C-LINE) THEN        /* ярпнйю хглемемю
       ASSIGN FIELD-FF(C-LINE) = H'01'            /* бгбндхл ткюц хглем
       CALL 'RWSX' C-DATA-B INPUT-REC(C-LINE) WR-REC N-DATA-B
     END-IF
     IF C-DATA > MAX-EL(N-DATA)  MAX-EL(N-DATA) := C-DATA END-IF
    ELSE                                          /* ярпнйю сдюкемю
     IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
     CALL 'RWSX' C-DATA-B H'FF' WR-REC N-DATA-B WR-REC WR-REC
     ADD 1 TO C-DEL
     IF FIELD-ISN(C-LINE) NE 0 THEN
       ADD 1 TO MAX-EL(N-DEL)
       ASSIGN C-DEL-B = MAX-EL(N-DEL)
       CALL 'RWSX' C-DEL-B FIELD-ISN(C-LINE) WR-REC N-DEL-B
     END-IF
   END-IF
   ADD 1 TO C-DATA
 END-FOR
 IF C-DEL NE 0 THEN
   CALL 'PRSX' H'00000001' H'00000001' N-DATA-B
   COMPUTE MAX-EL(N-DATA) = MAX-EL(N-DATA) - C-DEL
 END-IF
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю опнбепйх дюммшу щйпюмю
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-PROC
 FOR C-LINE = 1 TO Q-LINE                /* опнялюрпхбюел ярпнйх щйпюмю
   IF #FIELD-01(C-LINE) NE 0 AND FL-NEW NE 1 THEN
     IF #FIELD-02(C-LINE)  = ' '
       REINPUT 'йнд лтн' MARK *#FIELD-02(C-LINE) ALARM
     END-IF
     IF #FIELD-06(C-LINE) = ' '
       REINPUT 'юдпея' MARK *#FIELD-06(C-LINE) ALARM
     END-IF
     IF #FIELD-08(C-LINE)  = ' '
       REINPUT 'мюгбюмхе' MARK *#FIELD-08(C-LINE) ALARM
     END-IF
    ELSE                                 /* ярпнйю сдюкемю
     IF C-DATA > MAX-EL(N-DATA) THEN ESCAPE BOTTOM END-IF
   END-IF
 END-FOR
 IF FL-NEW = 2 RESET FL-NEW END-IF
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* опнжедспю янпрхпнбйх
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SORT-PROC
  ASSIGN C-DATA1-B = P-STEK(P-CURS,1)
  ASSIGN C-DATA2-B = P-STEK(P-CURS,2)
  CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
END-SUBROUTINE
END
