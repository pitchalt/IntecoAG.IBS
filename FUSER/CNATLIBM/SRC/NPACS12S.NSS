* >Natural Source Header 000000 /*<RO>>
* :NatName NPACS12S
* :UID INTECO
* :Mode S
* :CP
* :Date 20090226
* :Time 1102330
* <Natural Source Header /*<<RO>
DEFINE DATA
PARAMETER USING NPACS10A
LOCAL USING XXERX00A
LOCAL USING XXCTXX0A
LOCAL USING XXXXEC0L
LOCAL USING IBS-OBJL
LOCAL USING IBS-RECL
LOCAL USING IBS-BSL
LOCAL USING IBS-VOL
LOCAL USING NPXXANSA
LOCAL USING NPXXANSL
LOCAL USING NPACS1SA
LOCAL USING NPACS1SL
LOCAL USING NPACS2SA
LOCAL USING NPACS2SL
LOCAL USING NPACS3SA
LOCAL USING NPACS3SL
LOCAL USING XPPBXX0A
LOCAL USING NPACS1ML
LOCAL USING NPACS2ML
LOCAL USING NPACS3ML
LOCAL
/*
1 #AC-LIST-C  (I4)
1 #AC-LIST    (1000)
2 AC-CODE-N   (N5)
2 REDEFINE AC-CODE-N
3 AC-CODE-A   (A5)
2 AC-SL-A     (A6)
2 REDEFINE AC-SL-A
3 AC-SL-N     (N1/6)
/*
1 #BS         (N3)
1 #AC-CURRENT (I4)
1 #I          (I4)
1 #J          (I4)
/*
1 #OGOS       (B10)
1 REDEFINE #OGOS
2 #OGOS-OG    (N5)
2 #OGOS-OS    (N5)
/*
1 #OGSS       (B10)
1 REDEFINE #OGSS
2 #OGSS-OG    (N5)
2 #OGSS-SS    (N5)
/*
1 #OGVO       (B10)
1 REDEFINE #OGVO
2 #OGVO-OG    (N5)
2 #OGVO-VO    (N5)
/*
1 S1
2 STACK-POS   (I4)
2 FIELD-POS   (I4)
2 PF-KEY      (A4)
/*
1 S2
2 STACK-POS   (I4)
2 FIELD-POS   (I4)
2 PF-KEY      (A4)
/*
1 S3
2 DI-POS      (I4)
2 DI-BO       (N1)
2 STACK-POS   (I4)
2 FIELD-POS   (I4)
2 PF-KEY      (A4)
/*
1 #ST-CODE    (N6)
1 #SUMM       (P13.2)
1 #SUMM-OB    (P13.2)
/*
1 #DI-ID      (A25)
1 REDEFINE #DI-ID
2 #DI4        (A4)
2 #DI-GM      (N6)
2 #DI-AC      (N5)
2 #DI-VO      (N5)
2 #DI-ST      (N5)
/*
1 #OGBS       (B8)
1 REDEFINE #OGBS
2 #OGBS-OG    (N5)
2 #OGBS-BS    (N3)
/*
1 #STR        (A20)
1 #AC-CUR     (I4)
1 #AC-N       (N5)
1 REDEFINE #AC-N
2 #AC-A       (A5)
/*
 1 #LOC-INT
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:NPACS2SL-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 SA-ID (B4)
 4 STACK-KEY-B (B1/1:NPACS2SL-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 SALDO-OS (I4)
 6 SALDO-KS (I4)
 4 INT-TZ (N1)
 4 INT-INT-ID (I4)
 4 SUMM-IN-DEBET (P13.2)
 4 SUMM-IN-CREDIT (P13.2)
 4 SUMM-OB-DEBET (P13.2)
 4 SUMM-OB-CREDIT (P13.2)
 4 SUMM-OUT-DEBET (P13.2)
 4 SUMM-OUT-CREDIT (P13.2)
END-DEFINE
DEFINE SUBROUTINE NPACS12S
DEFINE WINDOW ANAL
  SIZE 10*40
  BASE 5/20
/*
IF NPACS10A.BO-ID EQ 0 THEN
  NPACS10A.BO-ID := 2
END-IF
* INPUT '1'
PERFORM ORG-ITEM-EDIT
* INPUT '2'
/*
DEFINE SUBROUTINE INT-SAVE
  FOR #I = 1 TO NPACS2SA.STACK-LEN
     MOVE #I TO NPACS2SL.STACK-POS
* INPUT '3'
     PERFORM INT-READ
* INPUT '4'
     IF NPACS2SL.INT-INT-ID EQ 0 THEN ESCAPE TOP END-IF
     MOVE BY NAME NPACS2SL TO #LOC-INT
     IF #LOC-INT.INT-TZ EQ 1 THEN
        MOVE #LOC-INT.SALDO-KS TO NPXXANSL.STACK-POS
* INPUT '5'
        PERFORM SALDO-READ
* INPUT '6'
        IF NPXXANSL.IS-ERROR THEN
           FOR #J = 1 TO NPACS2SA.STACK-LEN
              MOVE #J TO NPACS2SL.STACK-POS
              PERFORM INT-READ
              IF #LOC-INT.SALDO-KS EQ NPACS2SL.SALDO-OS AND NPACS2SL.INT-INT-ID EQ 0 THEN
                 NPACS2SL.SUMM-OB-DEBET := NPACS2SL.SUMM-OB-DEBET -
                       #LOC-INT.SUMM-OB-DEBET
                 NPACS2SL.SUMM-OB-CREDIT := NPACS2SL.SUMM-OB-CREDIT -
                       #LOC-INT.SUMM-OB-CREDIT
                 PERFORM INT-WRITE
                 #LOC-INT.SALDO-KS := NPACS2SL.SALDO-KS
                 MOVE BY NAME #LOC-INT TO NPACS2SL
                 PERFORM INT-WRITE
                 ESCAPE BOTTOM
              END-IF
           END-FOR
        END-IF
        ESCAPE TOP
     END-IF
     IF #LOC-INT.INT-TZ EQ 2 THEN
/******************
/*/*        ESCAPE TOP
/********************
        MOVE #LOC-INT.SALDO-OS TO NPXXANSL.STACK-POS
        PERFORM SALDO-READ
        IF NPXXANSL.IS-ERROR THEN
/*           WRITE "KS" NPACS2SL.INT-INT-ID NPACS2SL.INT-TZ NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
           FOR #J = 1 TO NPACS2SA.STACK-LEN
              MOVE #J TO NPACS2SL.STACK-POS
              PERFORM INT-READ
/*              WRITE "TEST"  NPACS2SL.INT-INT-ID NPACS2SL.INT-TZ NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
              IF #LOC-INT.SALDO-OS EQ NPACS2SL.SALDO-KS AND NPACS2SL.INT-INT-ID EQ 0 THEN
/*                 WRITE "KS FOUND" NPACS2SL.INT-INT-ID NPACS2SL.INT-TZ NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
                 NPACS2SL.SUMM-OB-DEBET := NPACS2SL.SUMM-OB-DEBET -
                       #LOC-INT.SUMM-OB-DEBET
                 NPACS2SL.SUMM-OB-CREDIT := NPACS2SL.SUMM-OB-CREDIT -
                       #LOC-INT.SUMM-OB-CREDIT
                 PERFORM INT-WRITE
                 #LOC-INT.SALDO-OS := NPACS2SL.SALDO-OS
                 MOVE BY NAME #LOC-INT TO NPACS2SL
/*                 WRITE "KS CHANGED" NPACS2SL.INT-INT-ID NPACS2SL.INT-TZ NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
                 PERFORM INT-WRITE
                 ESCAPE BOTTOM
              END-IF
           END-FOR
        END-IF
        ESCAPE TOP
     END-IF
  END-FOR
  RESET #DI-ID
  #DI4 := "NPAC"
  #DI-GM := PERIOD
  #DI-AC := NPACS10A.AC-CODE
  #DI-VO := NPACS10A.VO-CODE
  #DI-ST := NPACS10A.ST-KD
/*  WRITE #DI-ID #DI-ST
  FIND IBS-REC-FILE WITH GM-F EQ PERIOD AND OB-OS EQ NPACS10A.VO-CODE AND
        (OS-F EQ NPACS10A.AC-CODE OR KS-F EQ NPACS10A.AC-CODE) AND DI-ID EQ #DI-ID
     ACCEPT KD-F EQ 1000
     IF DI4 EQ "NPAC" THEN
        KD-F := -1133
/*        WRITE "DELETE" OS-F KS-F BO-F TZ-ID OB-OS IBS-REC-FILE.OB-ID SU-F
/*        DELETE
        UPDATE
     END-IF
  END-FIND
  #DI-VO := -NPACS10A.VO-CODE
  FIND IBS-REC-FILE WITH GM-F EQ PERIOD AND OB-OS EQ NPACS10A.VO-CODE AND
        (OS-F EQ NPACS10A.AC-CODE OR KS-F EQ NPACS10A.AC-CODE) AND DI-ID EQ #DI-ID
     ACCEPT KD-F EQ 1000
     IF DI4 EQ "NPAC" THEN
        KD-F := -1133
/*        WRITE "DELETE" OS-F KS-F BO-F TZ-ID OB-OS IBS-REC-FILE.OB-ID SU-F
/*        DELETE
        UPDATE
     END-IF
  END-FIND
  FOR #I = 1 TO NPACS2SA.STACK-LEN
     MOVE #I TO NPACS2SL.STACK-POS
     PERFORM INT-READ
     IF NPACS2SL.INT-TZ NE 1 THEN
        IF NPACS2SL.INT-TZ NE 2 THEN
           WRITE "INT FAIL" NPACS2SL.INT-TZ NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
        END-IF
        ESCAPE TOP
     END-IF
     RESET IBS-REC-FILE
/*     #DI4 := "NPAC"
/*     #DI-GM := PERIOD
/*     #DI-AC := NPACS10A.AC-CODE
     #DI-VO := NPACS10A.VO-CODE
/*     #DI-ST := NPACS10A.ST-KD
     MOVE #DI-ID TO IBS-REC-FILE.DI-ID
     MOVE OG-CODE TO IBS-REC-FILE.KD-F
     IBS-REC-FILE.SY-F := "UFRO"
     MOVE PERIOD TO IBS-REC-FILE.GM-F
     PERFORM DEF-DATM IBS-REC-FILE.GM-F IBS-REC-FILE.DT-ID
     IBS-REC-FILE.ND-ID := 777
     IBS-REC-FILE.VA-ID := 'пса'
     IBS-REC-FILE.FL-AN := 'бн'
     IBS-REC-FILE.FL-KS := ' '
     IBS-REC-FILE.KU-ID := 0
     IBS-REC-FILE.N-PROV := NPACS2SL.N-PROV
     IF IBS-REC-FILE.N-PROV EQ 0 THEN
        IBS-REC-FILE.N-PROV := NPACS10A.N-PROV
     END-IF
/*     WRITE NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
     IF NPACS2SL.SUMM-OB-DEBET NE 0 THEN
        MOVE 3 TO IBS-REC-FILE.BO-F
        MOVE NPACS2SL.SUMM-OB-DEBET TO IBS-REC-FILE.SU-F
     ELSE
        IF NPACS2SL.SUMM-OB-CREDIT NE 0 THEN
           MOVE 4 TO IBS-REC-FILE.BO-F
           MOVE NPACS2SL.SUMM-OB-CREDIT TO IBS-REC-FILE.SU-F
        ELSE
           ESCAPE TOP
        END-IF
     END-IF
     IBS-REC-FILE.TZ-ID := 1
/*
     MOVE NPACS2SL.SALDO-OS TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     MOVE NPXXANSL.AC-CODE TO IBS-REC-FILE.OS-F
     MOVE NPXXANSL.ZK-CODE TO IBS-REC-FILE.ZK-OS
     MOVE NPXXANSL.PO-CODE TO IBS-REC-FILE.PO-OS
     MOVE NPXXANSL.VO-CODE TO IBS-REC-FILE.OB-OS
     MOVE NPXXANSL.DI-ID(1:2) TO IBS-REC-FILE.DI-OS(1:2)
     MOVE NPXXANSL.ST-KK(*) TO IBS-REC-FILE.KK-OS(*)
     MOVE NPXXANSL.ST-KD(*) TO IBS-REC-FILE.KD-OS(*)
/*
     MOVE NPACS2SL.SALDO-KS TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     MOVE NPXXANSL.AC-CODE TO IBS-REC-FILE.KS-F
     MOVE NPXXANSL.ZK-CODE TO IBS-REC-FILE.ZK-F
     MOVE NPXXANSL.PO-CODE TO IBS-REC-FILE.PO-F
     MOVE NPXXANSL.VO-CODE TO IBS-REC-FILE.OB-ID
     MOVE NPXXANSL.DI-ID(1:2) TO IBS-REC-FILE.DI-KS(1:2)
     MOVE NPXXANSL.ST-KK(*) TO IBS-REC-FILE.KK-KS(*)
     MOVE NPXXANSL.ST-KD(*) TO IBS-REC-FILE.KD-KS(*)
/*
/*     WRITE OS-F KS-F BO-F TZ-ID OB-OS IBS-REC-FILE.OB-ID SU-F
/*     WRITE OS-F KS-F BO-F TZ-ID 'OS' IBS-REC-FILE.DI-OS(1:2) 'KS' IBS-REC-FILE.DI-KS(1:2) SU-F
     IF OS-F EQ KS-F THEN
        #DI-VO := -#DI-VO
        MOVE #DI-ID TO IBS-REC-FILE.DI-ID
        MOVE "UFRO-INT" TO IBS-REC-FILE.SY-F
        DUBL-REC := "N"
     END-IF
* 1-ъ
STREC100.
     STORE IBS-REC-FILE
     GET IBS-REC-FILE *ISN(STREC100.)
     ISN-REC := *ISN(STREC100.)
     UPDATE(STREC100.)
/*
     IF IBS-REC-FILE.BO-F EQ 3 THEN
        IBS-REC-FILE.BO-F := 4
     ELSE
        IBS-REC-FILE.BO-F := 3
     END-IF
     IBS-REC-FILE.TZ-ID := 2
/*
     MOVE NPACS2SL.SALDO-OS TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     MOVE NPXXANSL.AC-CODE TO IBS-REC-FILE.KS-F
     MOVE NPXXANSL.ZK-CODE TO IBS-REC-FILE.ZK-F
     MOVE NPXXANSL.PO-CODE TO IBS-REC-FILE.PO-F
     MOVE NPXXANSL.VO-CODE TO IBS-REC-FILE.OB-ID
     MOVE NPXXANSL.DI-ID(1:2) TO IBS-REC-FILE.DI-KS(1:2)
     MOVE NPXXANSL.ST-KK(*) TO IBS-REC-FILE.KK-KS(*)
     MOVE NPXXANSL.ST-KD(*) TO IBS-REC-FILE.KD-KS(*)
/*
     MOVE NPACS2SL.SALDO-KS TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     MOVE NPXXANSL.AC-CODE TO IBS-REC-FILE.OS-F
     MOVE NPXXANSL.ZK-CODE TO IBS-REC-FILE.ZK-OS
     MOVE NPXXANSL.PO-CODE TO IBS-REC-FILE.PO-OS
     MOVE NPXXANSL.VO-CODE TO IBS-REC-FILE.OB-OS
     MOVE NPXXANSL.DI-ID(1:2) TO IBS-REC-FILE.DI-OS(1:2)
     MOVE NPXXANSL.ST-KK(*) TO IBS-REC-FILE.KK-OS(*)
     MOVE NPXXANSL.ST-KD(*) TO IBS-REC-FILE.KD-OS(*)
/*
     IF OS-F EQ KS-F THEN
        TZ-ID := 1
        IF BO-F EQ 3 THEN
           BO-F := 4
        ELSE
           BO-F := 3
        END-IF
        SU-F := -SU-F
        DUBL-REC := "N"
     END-IF
/*     WRITE OS-F KS-F BO-F TZ-ID 'OS' IBS-REC-FILE.DI-OS(1:2) 'KS' IBS-REC-FILE.DI-KS(1:2) SU-F
     STORE IBS-REC-FILE
  END-FOR
  END TRANSACTION
END-SUBROUTINE
/*
DEFINE SUBROUTINE DI-ITEM-EDIT
  MOVE S3.DI-POS TO NPXXANSL.STACK-POS
  PERFORM SALDO-READ
  RESET #SUMM #SUMM-OB
  #SUMM := NPXXANSL.SUMM-OUT-DEBET - NPXXANSL.SUMM-OUT-CREDIT
  FOR #J = 1 TO NPACS2SA.STACK-LEN
     MOVE #J TO NPACS2SL.STACK-POS
     PERFORM INT-READ
     IF NPACS2SL.SALDO-OS EQ S3.DI-POS
        #SUMM-OB := #SUMM-OB + NPACS2SL.SUMM-OB-DEBET - NPACS2SL.SUMM-OB-CREDIT
/*        WRITE #J NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
     END-IF
  END-FOR
/*  WRITE "IN" #SUMM #SUMM-OB
  #SUMM := #SUMM - #SUMM-OB
/*
  IF #SUMM GE 0 THEN
     S3.DI-BO := 1
  ELSE
     S3.DI-BO := 2
  END-IF
  PERFORM DI-INIT
  FOR #I = 1 TO NPXXANSA.STACK-LEN
     MOVE #I TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     #SUMM := NPXXANSL.SUMM-OUT-DEBET - NPXXANSL.SUMM-OUT-CREDIT
     RESET #SUMM-OB
     FOR #J = 1 TO NPACS2SA.STACK-LEN
        MOVE #J TO NPACS2SL.STACK-POS
        PERFORM INT-READ
        IF NPACS2SL.SALDO-OS EQ S3.DI-POS AND
           NPACS2SL.SALDO-KS EQ #I THEN
/*           WRITE S3.DI-POS #I NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
           #SUMM-OB := #SUMM-OB - NPACS2SL.SUMM-OB-DEBET + NPACS2SL.SUMM-OB-CREDIT
        END-IF
     END-FOR
/*     WRITE #I S3.DI-BO #SUMM #SUMM-OB
/*
     IF #SUMM-OB NE 0 OR
        S3.DI-BO EQ 1 AND #SUMM < 0 OR
        S3.DI-BO EQ 2 AND #SUMM > 0 THEN
/*        PRINT NPACS10A.BO-ID #SUMM #SUMM-OB
        RESET NPACS3SL.STACK-REC-G NPACS3SL.STACK-KEY-G
        MOVE #I TO NPACS3SL.SALDO-OS
        MOVE NPXXANSL.IS-ERROR TO NPACS3SL.IS-ERROR
        IF #SUMM > 0 THEN
           NPACS3SL.SUMM-OUT-DEBET := #SUMM
        ELSE
           NPACS3SL.SUMM-OUT-CREDIT := ABS(#SUMM)
        END-IF
        IF #SUMM-OB > 0 THEN
           NPACS3SL.SUMM-OB-DEBET := #SUMM-OB
        ELSE
           NPACS3SL.SUMM-OB-CREDIT := ABS(#SUMM-OB)
        END-IF
        PERFORM DI-PUSH
     END-IF
  END-FOR
/*
  SET KEY OFF
  SET KEY ON
  SET KEY ALL
  SET KEY PF3 NAMED 'бШУНД'
  SET KEY PF7 NAMED 'бБЕПУ'
  SET KEY PF8 NAMED 'бМХГ'
  SET KEY PF9 NAMED '100%'
  SET KEY PF10 NAMED '50%'
  S3.FIELD-POS := POS(NPACS3ML.DL-CMD(1))
  S3.STACK-POS := 1
  REPEAT
     RESET NPACS3ML
     MOVE S3.DI-POS TO NPXXANSL.STACK-POS
     PERFORM SALDO-READ
     MOVE NPXXANSL.SUMM-OUT-DEBET TO NPACS3ML.DI-SUMM-DEBET
     MOVE NPXXANSL.SUMM-OUT-CREDIT TO NPACS3ML.DI-SUMM-CREDIT
     FOR #I = 1 TO 5
        NPACS3SL.STACK-POS := S3.STACK-POS + #I - 1
        IF NPACS3SL.STACK-POS > NPACS3SA.STACK-LEN THEN ESCAPE BOTTOM END-IF
        PERFORM DI-READ
        MOVE NPACS3SL.SALDO-OS TO NPXXANSL.STACK-POS
        PERFORM SALDO-READ
        MOVE BY NAME NPXXANSL.STACK-REC-G TO NPACS3ML.SALDO-LIST(#I)
        FOR #J = 1 TO 10
           IF NPXXANSL.DI-EXT(#J) EQ " " THEN ESCAPE BOTTOM END-IF
           COMPRESS NPACS3ML.DI-VAL(#I) NPXXANSL.DI-EXT-TYPE(#J)
                    NPXXANSL.DI-EXT-NUMBER(#J) NPXXANSL.DI-EXT-DATE(#J)
                 INTO NPACS3ML.DI-VAL(#I)
        END-FOR
        MOVE NPXXANSL.ST-KD(1) TO #ST-CODE
        IF #ST-CODE NE 0 THEN
           MOVE #ST-CODE TO NPACS3ML.ST-CODE(#I)
           FOR #J = 2 TO 10
              IF NPXXANSL.ST-KD(#J) EQ 0 THEN ESCAPE BOTTOM END-IF
              MOVE NPXXANSL.ST-KD(#J) TO #ST-CODE
              COMPRESS NPACS3ML.ST-CODE(#I) #ST-CODE
                    INTO NPACS3ML.ST-CODE(#I) WITH DELIMITER "."
           END-FOR
        END-IF
        IF NPACS3SL.IS-ERROR THEN
           MOVE (CD=RE) TO NPACS3ML.DI-C(#I)
        END-IF
        MOVE NPACS3SL.SUMM-OUT-DEBET TO NPACS3ML.SUMM-OUT-DEBET(#I)
        MOVE NPACS3SL.SUMM-OUT-CREDIT TO NPACS3ML.SUMM-OUT-CREDIT(#I)
/*        WRITE "POS>" #I NPACS3SL.SUMM-OUT-DEBET NPACS3SL.SUMM-OUT-CREDIT
/*                 NPACS3SL.SUMM-OB-debet NPACS3SL.SUMM-OB-CREDIT
        #SUMM := NPACS3SL.SUMM-OUT-DEBET - NPACS3SL.SUMM-OUT-CREDIT -
                 NPACS3SL.SUMM-OB-DEBET + NPACS3SL.SUMM-OB-CREDIT
        IF #SUMM >= 0 THEN
           IF NPACS3SL.SUMM-OB-DEBET > 0 THEN
              NPACS3ML.SUMM-OBOROT(#I) := -NPACS3SL.SUMM-OB-DEBET
           ELSE
              NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OB-CREDIT
           END-IF
        ELSE
           IF NPACS3SL.SUMM-OB-DEBET > 0 THEN
              NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OB-DEBET
           ELSE
              NPACS3ML.SUMM-OBOROT(#I) := -NPACS3SL.SUMM-OB-CREDIT
           END-IF
        END-IF
     END-FOR
     INPUT MARK S3.FIELD-POS USING MAP "NPACS3MM"
     S3.FIELD-POS := *CURS-FIELD
     S3.PF-KEY := *PF-KEY
     IF S3.PF-KEY EQ "PF3" THEN ESCAPE BOTTOM END-IF
     IF S3.PF-KEY EQ "PF9" OR EQ "PF10" THEN
        FOR #I = 1 TO 5
           IF S3.FIELD-POS EQ POS(NPACS3ML.DL-CMD(#I)) OR EQ POS(NPACS3ML.SUMM-OBOROT(#I)) THEN
              NPACS3SL.STACK-POS := S3.STACK-POS + #I - 1
              IF NPACS3SL.STACK-POS > NPACS3SA.STACK-LEN THEN ESCAPE BOTTOM END-IF
              PERFORM DI-READ
              IF S3.PF-KEY EQ "PF9" THEN
                 IF NPACS3SL.SUMM-OUT-DEBET NE 0 THEN
                    NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OUT-DEBET
                 ELSE
                    NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OUT-CREDIT
                 END-IF
              END-IF
              IF S3.PF-KEY EQ "PF10" THEN
                 IF NPACS3SL.SUMM-OUT-DEBET NE 0 THEN
                    NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OUT-DEBET / 2
                 ELSE
                    NPACS3ML.SUMM-OBOROT(#I) := NPACS3SL.SUMM-OUT-CREDIT / 2
                 END-IF
              END-IF
           END-IF
        END-FOR
     END-IF
     FOR #I = 1 TO 5
        NPACS3SL.STACK-POS := S3.STACK-POS + #I - 1
        IF NPACS3SL.STACK-POS > NPACS3SA.STACK-LEN THEN ESCAPE BOTTOM END-IF
        PERFORM DI-READ
        RESET #SUMM
        IF S3.DI-BO EQ 1 THEN
           #SUMM := NPACS3ML.SUMM-OBOROT(#I) - NPACS3SL.SUMM-OB-DEBET
        ELSE
           #SUMM := NPACS3ML.SUMM-OBOROT(#I) - NPACS3SL.SUMM-OB-CREDIT
        END-IF
/*        WRITE "LIST" S3.DI-BO #SUMM NPACS3ML.SUMM-OBOROT(#I)
/*              NPACS3SL.SUMM-OB-DEBET NPACS3SL.SUMM-OB-CREDIT
        IF #SUMM NE 0 THEN
           MOVE S3.DI-POS TO NPXXANSL.STACK-POS
           PERFORM SALDO-READ
           RESET NPACS2SL.STACK-REC-G NPACS2SL.STACK-KEY-G
           MOVE S3.DI-POS TO NPACS2SL.SALDO-OS
           MOVE NPACS3SL.SALDO-OS TO NPACS2SL.SALDO-KS
           PERFORM INT-LOCATE
           IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
              PERFORM INT-PUSH
           ELSE
              PERFORM INT-READ
           END-IF
           IF S3.DI-BO EQ 1 THEN
              NPXXANSL.SUMM-OB-CREDIT := NPXXANSL.SUMM-OB-CREDIT + #SUMM
              NPXXANSL.SUMM-OUT-DEBET := NPXXANSL.SUMM-OUT-DEBET - #SUMM
              NPACS2SL.SUMM-OB-CREDIT := NPACS2SL.SUMM-OB-CREDIT + #SUMM
           END-IF
           IF S3.DI-BO EQ 2 THEN
              NPXXANSL.SUMM-OB-DEBET := NPXXANSL.SUMM-OB-DEBET + #SUMM
              NPXXANSL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-OUT-CREDIT - #SUMM
              NPACS2SL.SUMM-OB-DEBET := NPACS2SL.SUMM-OB-DEBET + #SUMM
           END-IF
           NPACS2SL.INT-TZ := 1
           NPACS2SL.INT-INT-ID := NPACS2SL.STACK-POS
           PERFORM INT-WRITE
/*           WRITE "SAVE OS" NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
           PERFORM SALDO-WRITE
/*
           MOVE NPACS3SL.SALDO-OS TO NPXXANSL.STACK-POS
           PERFORM SALDO-READ
           RESET NPACS2SL.STACK-REC-G NPACS2SL.STACK-KEY-G
           MOVE S3.DI-POS TO NPACS2SL.SALDO-KS
           MOVE NPACS3SL.SALDO-OS TO NPACS2SL.SALDO-OS
           PERFORM INT-LOCATE
           IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
              PERFORM INT-PUSH
           ELSE
              PERFORM INT-READ
           END-IF
           IF S3.DI-BO EQ 1 THEN
              NPXXANSL.SUMM-OB-DEBET := NPXXANSL.SUMM-OB-DEBET + #SUMM
              NPXXANSL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-OUT-CREDIT - #SUMM
              NPACS2SL.SUMM-OB-DEBET := NPACS2SL.SUMM-OB-DEBET + #SUMM
           END-IF
           IF S3.DI-BO EQ 2 THEN
              NPXXANSL.SUMM-OB-CREDIT := NPXXANSL.SUMM-OB-CREDIT + #SUMM
              NPXXANSL.SUMM-OUT-DEBET := NPXXANSL.SUMM-OUT-DEBET - #SUMM
              NPACS2SL.SUMM-OB-CREDIT := NPACS2SL.SUMM-OB-CREDIT + #SUMM
           END-IF
           NPACS2SL.INT-TZ := 2
           NPACS2SL.INT-INT-ID := NPACS2SL.STACK-POS
           PERFORM INT-WRITE
/*           WRITE "SAVE KS" NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
           PERFORM SALDO-WRITE
/*
           RESET NPACS3SL.SUMM-OUT-DEBET NPACS3SL.SUMM-OUT-CREDIT
                 NPACS3SL.SUMM-OB-DEBET NPACS3SL.SUMM-OB-CREDIT
           IF NPXXANSL.SUMM-OUT-DEBET - NPXXANSL.SUMM-OUT-CREDIT > 0 THEN
              NPACS3SL.SUMM-OUT-DEBET := NPXXANSL.SUMM-OUT-DEBET - NPXXANSL.SUMM-OUT-CREDIT
           ELSE
              NPACS3SL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-OUT-CREDIT - NPXXANSL.SUMM-OUT-DEBET
           END-IF
           IF NPACS2SL.SUMM-OB-DEBET - NPACS2SL.SUMM-OB-CREDIT  > 0 THEN
              NPACS3SL.SUMM-OB-DEBET := NPACS2SL.SUMM-OB-DEBET - NPACS2SL.SUMM-OB-CREDIT
           ELSE
              NPACS3SL.SUMM-OB-CREDIT := NPACS2SL.SUMM-OB-CREDIT - NPACS2SL.SUMM-OB-DEBET
           END-IF
/*           MOVE NPACS3ML.SUMM-OBOROT(#I) TO NPACS3SL.SUMM-OB-DEBET
           PERFORM DI-WRITE
        END-IF
     END-FOR
     IF S3.PF-KEY EQ "PF7" THEN
        SUBTRACT 5 FROM S3.STACK-POS
        IF S3.STACK-POS < 1 THEN S3.STACK-POS := 1 END-IF
     END-IF
     IF S3.PF-KEY EQ "PF8" THEN
        ADD 5 TO S3.STACK-POS
        IF S3.STACK-POS > NPXXANSA.STACK-LEN THEN
           SUBTRACT 5 FROM S3.STACK-POS
        END-IF
     END-IF
  END-REPEAT
  PERFORM DI-FREE
END-SUBROUTINE
/*
DEFINE SUBROUTINE ORG-ITEM-EDIT
* INPUT '11'
  PERFORM SALDO-INIT
* INPUT '12'
  PERFORM INT-INIT
* INPUT '13'
  PERFORM LOAD-DATA
* INPUT '14'
  MOVE 5 TO NPXXANSL.STACK-FIELD-POS
  MOVE 86 TO NPXXANSL.STACK-FIELD-LEN
  CALL "SRTX" NPXXANSL.STACK-FIELD-POS NPXXANSL.STACK-FIELD-LEN NPXXANSA.STACK-NUMBER
/*
  PERFORM LOAD-INT-NUM
/*
  SET KEY OFF
  SET KEY ON
  SET KEY ALL
  SET KEY PF3 NAMED 'бШУНД'
  SET KEY PF5 NAMED 'яНУПМ'
  SET KEY PF7 NAMED 'бБЕПУ'
  SET KEY PF8 NAMED 'бМХГ'
  SET KEY PF4 NAMED 'пЕДЮЙ'
  S2.FIELD-POS := POS(NPACS2ML.DL-CMD(1))
  S2.STACK-POS := 1
  REPEAT
     RESET NPACS2ML
     FOR #I = 1 TO 5
        NPXXANSL.STACK-POS := S2.STACK-POS + #I - 1
        IF NPXXANSL.STACK-POS > NPXXANSA.STACK-LEN THEN ESCAPE BOTTOM END-IF
        PERFORM SALDO-READ
        MOVE BY NAME NPXXANSL.STACK-REC-G TO NPACS2ML.SALDO-LIST(#I)
        FOR #J = 1 TO 10
           IF NPXXANSL.DI-EXT(#J) EQ " " THEN ESCAPE BOTTOM END-IF
           COMPRESS NPACS2ML.DI-VAL(#I) NPXXANSL.DI-EXT-TYPE(#J)
                    NPXXANSL.DI-EXT-NUMBER(#J) NPXXANSL.DI-EXT-DATE(#J)
                 INTO NPACS2ML.DI-VAL(#I)
        END-FOR
        MOVE NPXXANSL.ST-KD(1) TO #ST-CODE
        IF #ST-CODE NE 0 THEN
           MOVE #ST-CODE TO NPACS2ML.ST-CODE(#I)
           FOR #J = 2 TO 10
              IF NPXXANSL.ST-KD(#J) EQ 0 THEN ESCAPE BOTTOM END-IF
              MOVE NPXXANSL.ST-KD(#J) TO #ST-CODE
              COMPRESS NPACS2ML.ST-CODE(#I) #ST-CODE
                    INTO NPACS2ML.ST-CODE(#I) WITH DELIMITER "."
           END-FOR
        END-IF
        IF NPXXANSL.IS-ERROR THEN
           MOVE (CD=RE) TO NPACS2ML.DI-C(#I)
        END-IF
     END-FOR
     INPUT MARK S2.FIELD-POS USING MAP "NPACS2MM"
     S2.FIELD-POS := *CURS-FIELD
     S2.PF-KEY := *PF-KEY
     IF S2.PF-KEY EQ "PF3" THEN ESCAPE BOTTOM END-IF
     IF S2.PF-KEY EQ "PF5" THEN
        PERFORM INT-SAVE
        ESCAPE BOTTOM
     END-IF
     IF S2.PF-KEY EQ "PF7" THEN
        SUBTRACT 5 FROM S2.STACK-POS
        IF S2.STACK-POS < 1 THEN S2.STACK-POS := 1 END-IF
     END-IF
     IF S2.PF-KEY EQ "PF8" THEN
        ADD 5 TO S2.STACK-POS
        IF S2.STACK-POS > NPXXANSA.STACK-LEN THEN
           SUBTRACT 5 FROM S2.STACK-POS
        END-IF
     END-IF
     IF S2.PF-KEY EQ "PF4" THEN
        FOR #I = 1 TO 5
           IF S2.FIELD-POS EQ POS(NPACS2ML.DL-CMD(#I)) THEN
              DI-POS := S2.STACK-POS + #I - 1
              MOVE DI-POS TO NPXXANSL.STACK-POS
              PERFORM SALDO-READ
              IF NPXXANSL.AC-CODE EQ NPACS10A.AC-CODE AND
                 (NPACS10A.ST-KK EQ " " OR
                    NPACS10A.ST-KK EQ NPXXANSL.ST-KK(1) AND
                    NPACS10A.ST-KD EQ NPXXANSL.ST-KD(1) ) THEN
/*                    WRITE NPACS10A.ST-KK NPXXANSL.ST-KK(1) NPACS10A.ST-KD NPXXANSL.ST-KD(1)
/*              IF NPACS10A.BO-ID EQ 1 AND NPACS2ML.SUMM-OUT-DEBET(#I) GE 0 OR
/*                 NPACS10A.BO-ID EQ 2 AND NPACS2ML.SUMM-OUT-CREDIT(#I) GE 0 THEN
                 PERFORM DI-ITEM-EDIT
/*              END-Ii
              END-IF
              ESCAPE BOTTOM
           END-IF
        END-FOR
     END-IF
     IF S2.PF-KEY EQ "PF2" THEN
        FOR #I = 1 TO 5
           IF S2.FIELD-POS EQ POS(NPACS2ML.DL-CMD(#I)) THEN
              DI-POS := S2.STACK-POS + #I - 1
              MOVE DI-POS TO NPXXANSL.STACK-POS
              PERFORM SALDO-READ
              IF NPXXANSL.AC-CODE EQ NPACS10A.AC-CODE THEN
                 FOR #J = 1 TO NPACS2SA.STACK-LEN
                    MOVE #J TO NPACS2SL.STACK-POS
                    PERFORM INT-READ
                    IF NPACS2SL.SALDO-OS EQ DI-POS THEN
                       MOVE NPACS2SL.SALDO-OS TO NPXXANSL.STACK-POS
                       PERFORM SALDO-READ
                    END-IF
                    IF NPACS2SL.SALDO-KS EQ DI-POS THEN
                       MOVE NPACS2SL.SALDO-OS TO NPXXANSL.STACK-POS
                       PERFORM SALDO-READ
                    END-IF
                    NPXXANSL.SUMM-OB-DEBET := NPXXANSL.SUMM-OB-DEBET - NPACS2SL.SUMM-OB-DEBET
                    NPXXANSL.SUMM-OUT-DEBET := NPXXANSL.SUMM-OUT-DEBET - NPACS2SL.SUMM-OB-DEBET
                    NPXXANSL.SUMM-OB-CREDIT := NPXXANSL.SUMM-OB-CREDIT - NPACS2SL.SUMM-OB-CREDIT
                    NPXXANSL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-OUT-CREDIT - NPACS2SL.SUMM-OB-CREDIT
                    PERFORM SALDO-WRITE
                    RESET NPACS2SL.SUMM-OB-DEBET NPACS2SL.SUMM-OB-CREDIT
                    PERFORM INT-WRITE
                 END-FOR
              END-IF
              ESCAPE BOTTOM
           END-IF
        END-FOR
     END-IF
  END-REPEAT
/*
  PERFORM INT-FREE
  PERFORM SALDO-FREE
END-SUBROUTINE
/*
DEFINE SUBROUTINE ORG-ITEM-LOAD
  IGNORE
END-SUBROUTINE
/*
DEFINE SUBROUTINE LOAD-DATA
* INPUT 'LD1'
  RESET #AC-LIST-C
  #OGSS-OG := NPACS10A.OG-CODE
  #OGSS-SS := NPACS10A.AC-CODE
  FIND IBS-BS-FILE WITH OG-SS EQ #OGSS
     MOVE BS-ID TO #BS
  END-FIND
* INPUT 'LD2'
  DECIDE ON EVERY VALUE #BS
     VALUE 60, 62, 76
        #OGBS-OG := OG-CODE
        #OGBS-BS := #BS
        FIND IBS-BS-FILE WITH OG-BS EQ #OGBS
           ACCEPT IBS-BS-FILE.VA-ID EQ "пса" AND IBS-BS-FILE.FL-AN EQ "бн"
           ADD 1 TO #AC-LIST-C
IF PERIOD < 200901 THEN
  DECIDE ON FIRST VALUE IBS-BS-FILE.SS-ID
  VALUE 6011, 6041, 6042, 6043
     IBS-BS-FILE.MSL-UR(3) := '2'
  NONE VALUE
     IBS-BS-FILE.MSL-UR(3) := '1'
  END-DECIDE
END-IF
           MOVE IBS-BS-FILE.SS-ID TO #AC-LIST.AC-CODE-N(#AC-LIST-C)
           MOVE IBS-BS-FILE.SL-UR TO #AC-LIST.AC-SL-A(#AC-LIST-C)
        END-FIND
     VALUE 76
        #OGBS-OG := OG-CODE
        #OGBS-BS := 62
        FIND IBS-BS-FILE WITH OG-BS EQ #OGBS
           ACCEPT IBS-BS-FILE.VA-ID EQ "пса" AND IBS-BS-FILE.FL-AN EQ "бн"
           ADD 1 TO #AC-LIST-C
IF PERIOD < 200901 THEN
  DECIDE ON FIRST VALUE IBS-BS-FILE.SS-ID
  VALUE 6011, 6041, 6042, 6043
     IBS-BS-FILE.MSL-UR(3) := '2'
  NONE VALUE
     IBS-BS-FILE.MSL-UR(3) := '1'
  END-DECIDE
END-IF
           MOVE IBS-BS-FILE.SS-ID TO #AC-LIST.AC-CODE-N(#AC-LIST-C)
           MOVE IBS-BS-FILE.SL-UR TO #AC-LIST.AC-SL-A(#AC-LIST-C)
        END-FIND
     NONE VALUE
     IGNORE
  END-DECIDE
* INPUT 'LD3'
  FOR #AC-CUR EQ 1 TO #AC-LIST-C
     PERFORM LOAD-OST
* INPUT 'LD31'
     PERFORM LOAD-REC
* INPUT 'LD32'
  END-FOR
* INPUT 'LD4'
/* яБЕПМЕЛ ЯЮКЭДН
  FOR #I = 1 TO NPXXANSA.STACK-LEN
     MOVE #I TO NPXXANSL.STACK-POS
* INPUT 'LD5'
     PERFORM SALDO-READ
* INPUT 'LD6'
     IF NPXXANSL.SUMM-IN-DEBET > NPXXANSL.SUMM-IN-CREDIT THEN
        NPXXANSL.SUMM-IN-DEBET := NPXXANSL.SUMM-IN-DEBET - NPXXANSL.SUMM-IN-CREDIT
        RESET NPXXANSL.SUMM-IN-CREDIT
     ELSE
        NPXXANSL.SUMM-IN-CREDIT := NPXXANSL.SUMM-IN-CREDIT - NPXXANSL.SUMM-IN-DEBET
        RESET NPXXANSL.SUMM-IN-DEBET
     END-IF
     NPXXANSL.SUMM-OUT-DEBET := NPXXANSL.SUMM-IN-DEBET + NPXXANSL.SUMM-OB-DEBET
     NPXXANSL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-IN-CREDIT + NPXXANSL.SUMM-OB-CREDIT
     IF NPXXANSL.SUMM-OUT-DEBET > NPXXANSL.SUMM-OUT-CREDIT THEN
        NPXXANSL.SUMM-OUT-DEBET := NPXXANSL.SUMM-OUT-DEBET - NPXXANSL.SUMM-OUT-CREDIT
        RESET NPXXANSL.SUMM-OUT-CREDIT
     ELSE
        NPXXANSL.SUMM-OUT-CREDIT := NPXXANSL.SUMM-OUT-CREDIT - NPXXANSL.SUMM-OUT-DEBET
        RESET NPXXANSL.SUMM-OUT-DEBET
     END-IF
* INPUT 'LD7'
     PERFORM SALDO-WRITE
* INPUT 'LD8'
  END-FOR
  /*
END-SUBROUTINE
/*
DEFINE SUBROUTINE SALDO-CHECK
  IF NPACS10A.AC-CODE EQ NPXXANSL.AC-CODE THEN
     IF NPACS10A.VO-CODE NE 0 AND NPACS10A.VO-CODE NE NPXXANSL.VO-CODE THEN
        RETURN-CODE := EC-OBJECT-NOT-FOUND
        ESCAPE ROUTINE
     END-IF
     IF NPACS10A.ST-KK NE " " AND (NPACS10A.ST-KK NE NPXXANSL.ST-KK(1) OR
        NPACS10A.ST-KD NE NPXXANSL.ST-KD(1)) THEN
        RETURN-CODE := EC-OBJECT-NOT-FOUND
        ESCAPE ROUTINE
     END-IF
  END-IF
  PERFORM SALDO-LOCATE
  IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
     IF NPXXANSL.AC-CODE EQ NPACS10A.AC-CODE THEN
        NPXXANSL.IS-ERROR := TRUE
     END-IF
     PERFORM SALDO-PUSH
  ELSE
     PERFORM SALDO-READ
  END-IF
  RESET RETURN-CODE
END-SUBROUTINE
/*
DEFINE SUBROUTINE LOAD-OST
  #OGOS-OG := OG-CODE
  #OGOS-OS := #AC-LIST.AC-CODE-N(#AC-CUR) /* IBS-BS-FILE.SS-ID
/*  AC-LIST(#AC-CURRENT)
  IF NPACS10A.VO-CODE EQ 0 THEN
     FIND NUMBER IBS-OBJ-FILE1 WITH OG-OS EQ #OGOS AND DT-ID EQ PERIOD
           RETAIN AS "NPACS10R"
  ELSE
     FIND NUMBER IBS-OBJ-FILE1 WITH OG-OS EQ #OGOS AND DT-ID EQ PERIOD AND
                             OB-ID EQ NPACS10A.VO-CODE
           RETAIN AS "NPACS10R"
  END-IF
  FIND IBS-OBJ-FILE1 WITH "NPACS10R"
     AT START OF DATA
        COMPRESS 'гЮЦПСГЙЮ НЯРЮРЙНБ ОН ЯВЕРС' #AC-LIST.AC-CODE-N(#AC-CUR) /*IBS-BS-FILE.SS-ID /*AC-LIST(#AC-CURRENT)
              INTO XPPBXX0A.PB-HEADER
        INCLUDE XPPBIN0C "*NUMBER" "XPPBXX0A.PB-HEADER"
     END-START
     INCLUDE XPPBST0C "*COUNTER"
/*     IF IBS-OBJ-FILE1.OB-ID EQ 788 THEN
/*        WRITE "OBJ" IBS-OBJ-FILE1.DI-ID(1) IBS-OBJ-FILE1.DI-ID(2)
/*                 IBS-OBJ-FILE1.KK-SS(1) IBS-OBJ-FILE1.KD-SS(1) IBS-OBJ-FILE1.KK-SS(2) IBS-OBJ-FILE1.KD-SS(2) SU-RU
/*     END-IF
     RESET NPXXANSL.STACK-REC-G NPXXANSL.STACK-KEY-G
     MOVE IBS-OBJ-FILE1.OS-ID TO NPXXANSL.AC-CODE
     MOVE IBS-OBJ-FILE1.OS-ID TO #AC-N
     EXAMINE AC-CODE-A(*) FOR #AC-A GIVING INDEX #AC-CURRENT
/*     WRITE #AC-A #AC-CURRENT
     IF AC-SL-N(#AC-CURRENT, 1) EQ 1 THEN
        MOVE IBS-OBJ-FILE1.OB-ID TO NPXXANSL.VO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 2) EQ 1 THEN
        FOR #I = 1 TO C*GS-SS
           MOVE IBS-OBJ-FILE1.KK-SS(#I) TO NPXXANSL.ST-KK(#I)
           MOVE IBS-OBJ-FILE1.KD-SS(#I) TO NPXXANSL.ST-KD(#I)
        END-FOR
     END-IF
     IF AC-SL-N(#AC-CURRENT, 3) NE 0 THEN
        IF AC-SL-N(#AC-CURRENT, 3) EQ 1 THEN
           MOVE IBS-OBJ-FILE1.DI-ID(1) TO NPXXANSL.DI-ID(1)
           RESET NPXXANSL.DI-ID(2)
        ELSE
           MOVE IBS-OBJ-FILE1.DI-ID(1:2) TO NPXXANSL.DI-ID(1:2)
        END-IF
     END-IF
     IF AC-SL-N(#AC-CURRENT, 4) EQ 1 THEN
        MOVE IBS-OBJ-FILE1.PO-ID TO NPXXANSL.PO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 5) EQ 1 THEN
        MOVE IBS-OBJ-FILE1.ZK-ID TO NPXXANSL.ZK-CODE
     END-IF
     PERFORM SALDO-CHECK
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        ESCAPE TOP
     END-IF
     FOR #I = 1 TO C*DI-ID
        FOR #J = 1 TO 10
           IF IBS-OBJ-FILE1.DI-ID(#I) EQ NPXXANSL.DI-EXT(#J) THEN
              ESCAPE BOTTOM
           END-IF
           IF NPXXANSL.DI-EXT(#J) EQ " " THEN
              MOVE IBS-OBJ-FILE1.DI-ID(#I) TO NPXXANSL.DI-EXT(#J)
              ESCAPE BOTTOM
           END-IF
        END-FOR
     END-FOR
     NPXXANSL.IS-ERROR := FALSE
     IF IBS-OBJ-FILE1.BO-ID EQ 1 THEN
        ADD IBS-OBJ-FILE1.SU-RU TO NPXXANSL.SUMM-IN-DEBET
     END-IF
     IF IBS-OBJ-FILE1.BO-ID EQ 2 THEN
        ADD IBS-OBJ-FILE1.SU-RU TO NPXXANSL.SUMM-IN-CREDIT
     END-IF
     PERFORM SALDO-WRITE
  END-FIND
  RELEASE SET "NPACS10R"
END-SUBROUTINE
/*
DEFINE SUBROUTINE LOAD-REC
* INPUT 'R1'
  IF NPACS10A.VO-CODE EQ 0 THEN
     FIND NUMBER IBS-REC-FILE WITH OS-F EQ #AC-LIST.AC-CODE-N(#AC-CUR) AND GM-F EQ PERIOD
/*     AC-LIST(#AC-CURRENT)
           RETAIN AS "NPACS10R"
  ELSE
     FIND NUMBER IBS-REC-FILE WITH OS-F EQ #AC-LIST.AC-CODE-N(#AC-CUR) AND GM-F EQ PERIOD AND
                             OB-OS EQ NPACS10A.VO-CODE
/*     AC-LIST(#AC-CURRENT) AND
           RETAIN AS "NPACS10R"
  END-IF
* INPUT 'R2'
  FIND IBS-REC-FILE WITH "NPACS10R"
     AT START OF DATA
        COMPRESS 'гЮЦПСГЙЮ НАНПНРНБ ОН ЯВЕРС' #AC-LIST.AC-CODE-N(#AC-CUR)/* IBS-BS-FILE.SS-ID /* AC-LIST(#AC-CURRENT)
              INTO XPPBXX0A.PB-HEADER
* INPUT 'R3'
        INCLUDE XPPBIN0C "*NUMBER" "XPPBXX0A.PB-HEADER"
* INPUT 'R4'
     END-START
* INPUT 'R5'
     INCLUDE XPPBST0C "*COUNTER"
* INPUT 'R6'
     IF KD-F NE OG-CODE THEN ESCAPE TOP END-IF
/* нЯМНБМНИ ЯВЕР
     RESET NPXXANSL.STACK-REC-G NPXXANSL.STACK-KEY-G
     MOVE IBS-REC-FILE.OS-F TO NPXXANSL.AC-CODE
     MOVE IBS-REC-FILE.OS-F TO #AC-N
     EXAMINE AC-CODE-A(*) FOR #AC-A GIVING INDEX #AC-CURRENT
     IF AC-SL-N(#AC-CURRENT, 1) EQ 1 THEN
        MOVE IBS-REC-FILE.OB-OS TO NPXXANSL.VO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 2) EQ 1 THEN
        FOR #I = 1 TO C*ST-OS
           IF IBS-REC-FILE.KD-OS(#I) EQ 0 THEN ESCAPE BOTTOM END-IF
           MOVE IBS-REC-FILE.KK-OS(#I) TO NPXXANSL.ST-KK(#I)
           MOVE IBS-REC-FILE.KD-OS(#I) TO NPXXANSL.ST-KD(#I)
        END-FOR
     END-IF
     IF AC-SL-N(#AC-CURRENT, 3) NE 0 THEN
        IF AC-SL-N(#AC-CURRENT, 3) EQ 1 THEN
           MOVE IBS-REC-FILE.DI-OS(1) TO NPXXANSL.DI-ID(1)
           RESET NPXXANSL.DI-ID(2)
        ELSE
           MOVE IBS-REC-FILE.DI-OS(1:2) TO NPXXANSL.DI-ID(1:2)
        END-IF
     END-IF
     IF AC-SL-N(#AC-CURRENT, 4) EQ 1 THEN
        MOVE IBS-REC-FILE.PO-OS TO NPXXANSL.PO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 5) EQ 1 THEN
        MOVE IBS-REC-FILE.ZK-OS TO NPXXANSL.ZK-CODE
     END-IF
     PERFORM SALDO-CHECK
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        ESCAPE TOP
     END-IF
     FOR #I = 1 TO C*DI-OS
        FOR #J = 1 TO 10
           IF IBS-REC-FILE.DI-OS(#I) EQ NPXXANSL.DI-EXT(#J) THEN
              ESCAPE BOTTOM
           END-IF
           IF NPXXANSL.DI-EXT(#J) EQ " " THEN
              MOVE IBS-REC-FILE.DI-OS(#I) TO NPXXANSL.DI-EXT(#J)
              ESCAPE BOTTOM
           END-IF
        END-FOR
     END-FOR
     IF DI4 NE "NPAC" THEN
        NPXXANSL.IS-ERROR := FALSE
     END-IF
     IF IBS-REC-FILE.BO-F EQ 3 THEN
        ADD IBS-REC-FILE.SU-F TO NPXXANSL.SUMM-OB-DEBET
     END-IF
     IF IBS-REC-FILE.BO-F EQ 4 THEN
        ADD IBS-REC-FILE.SU-F TO NPXXANSL.SUMM-OB-CREDIT
     END-IF
* INPUT 'R7'
     PERFORM SALDO-WRITE
* INPUT 'R8'
  END-FIND
  RELEASE SET "NPACS10R"
END-SUBROUTINE
/*
DEFINE SUBROUTINE LOAD-INT-NUM
  IF NPACS10A.VO-CODE EQ 0 THEN
     FIND NUMBER IBS-REC-FILE WITH (OS-F EQ NPACS10A.AC-CODE OR KS-F EQ NPACS10A.AC-CODE) AND
                                      GM-F EQ PERIOD
/*     AC-LIST(#AC-CURRENT)
           RETAIN AS "NPACS10R"
  ELSE
     FIND NUMBER IBS-REC-FILE WITH (OS-F EQ NPACS10A.AC-CODE OR KS-F EQ NPACS10A.AC-CODE) AND
                                   GM-F EQ PERIOD AND
                                   OB-OS EQ NPACS10A.VO-CODE
/*     AC-LIST(#AC-CURRENT) AND
           RETAIN AS "NPACS10R"
  END-IF
  FIND IBS-REC-FILE WITH "NPACS10R"
     AT START OF DATA
        COMPRESS 'гЮЦПСГЙЮ НАНПНРНБ ОН ЯВЕРС' NPACS10A.AC-CODE /*#AC-LIST.AC-CODIBS-BS-FILE.SS-ID /* AC-LIST(#AC-CURRENT)
              INTO XPPBXX0A.PB-HEADER
        INCLUDE XPPBIN0C "*NUMBER" "XPPBXX0A.PB-HEADER"
     END-START
     INCLUDE XPPBST0C "*COUNTER"
/*     IF IBS-REC-FILE.OB-OS EQ 788 THEN
/*        WRITE "REC" DI-OS(1) DI-OS(2) SU-F
/*     END-IF
     IF KD-F NE OG-CODE OR DI4 NE "NPAC" THEN ESCAPE TOP END-IF
     IF SU-F < 0 THEN
        TZ-ID := 2
        IF BO-F EQ 3 THEN
           BO-F := 4
        ELSE
           BO-F := 3
        END-IF
        SU-F := -SU-F
     END-IF
/* нЯМНБМНИ ЯВЕР
     RESET NPXXANSL.STACK-REC-G NPXXANSL.STACK-KEY-G
     MOVE IBS-REC-FILE.OS-F TO NPXXANSL.AC-CODE
     MOVE IBS-REC-FILE.OS-F TO #AC-N
     EXAMINE AC-CODE-A(*) FOR #AC-A GIVING INDEX #AC-CURRENT
     IF AC-SL-N(#AC-CURRENT, 1) EQ 1 THEN
        MOVE IBS-REC-FILE.OB-OS TO NPXXANSL.VO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 2) EQ 1 THEN
        FOR #I = 1 TO C*ST-OS
           IF IBS-REC-FILE.KD-OS(#I) EQ 0 THEN ESCAPE BOTTOM END-IF
           MOVE IBS-REC-FILE.KK-OS(#I) TO NPXXANSL.ST-KK(#I)
           MOVE IBS-REC-FILE.KD-OS(#I) TO NPXXANSL.ST-KD(#I)
        END-FOR
     END-IF
     IF AC-SL-N(#AC-CURRENT, 3) NE 0 THEN
        IF AC-SL-N(#AC-CURRENT, 3) EQ 1 THEN
           MOVE IBS-REC-FILE.DI-OS(1) TO NPXXANSL.DI-ID(1)
           RESET NPXXANSL.DI-ID(2)
        ELSE
           MOVE IBS-REC-FILE.DI-OS(1:2) TO NPXXANSL.DI-ID(1:2)
        END-IF
     END-IF
     IF AC-SL-N(#AC-CURRENT, 4) EQ 1 THEN
        MOVE IBS-REC-FILE.PO-OS TO NPXXANSL.PO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 5) EQ 1 THEN
        MOVE IBS-REC-FILE.ZK-OS TO NPXXANSL.ZK-CODE
     END-IF
     PERFORM SALDO-CHECK
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN ESCAPE TOP END-IF
/*
     RESET NPACS2SL.STACK-REC-G NPACS2SL.STACK-KEY-G
     MOVE NPXXANSL.STACK-POS TO NPACS2SL.SALDO-OS
     RESET NPXXANSL.STACK-REC-G NPXXANSL.STACK-KEY-G
     MOVE IBS-REC-FILE.KS-F TO NPXXANSL.AC-CODE
     MOVE IBS-REC-FILE.KS-F TO #AC-N
     EXAMINE AC-CODE-A(*) FOR #AC-A GIVING INDEX #AC-CURRENT
     IF #AC-CURRENT < 1 THEN ESCAPE TOP END-IF
     IF AC-SL-N(#AC-CURRENT, 1) EQ 1 THEN
        MOVE IBS-REC-FILE.OB-ID TO NPXXANSL.VO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 2) EQ 1 THEN
        FOR #I = 1 TO C*ST-KS
           IF IBS-REC-FILE.KD-KS(#I) EQ 0 THEN ESCAPE BOTTOM END-IF
           MOVE IBS-REC-FILE.KK-KS(#I) TO NPXXANSL.ST-KK(#I)
           MOVE IBS-REC-FILE.KD-KS(#I) TO NPXXANSL.ST-KD(#I)
        END-FOR
     END-IF
     IF AC-SL-N(#AC-CURRENT, 3) NE 0 THEN
        IF AC-SL-N(#AC-CURRENT, 3) EQ 1 THEN
           MOVE IBS-REC-FILE.DI-KS(1) TO NPXXANSL.DI-ID(1)
           RESET NPXXANSL.DI-ID(2)
        ELSE
           MOVE IBS-REC-FILE.DI-KS(1:2) TO NPXXANSL.DI-ID(1:2)
        END-IF
     END-IF
     IF AC-SL-N(#AC-CURRENT, 4) EQ 1 THEN
        MOVE IBS-REC-FILE.PO-F TO NPXXANSL.PO-CODE
     END-IF
     IF AC-SL-N(#AC-CURRENT, 5) EQ 1 THEN
        MOVE IBS-REC-FILE.ZK-F TO NPXXANSL.ZK-CODE
     END-IF
     PERFORM SALDO-CHECK
     MOVE NPXXANSL.STACK-POS TO NPACS2SL.SALDO-KS
/*     IF OB-OS EQ 557 THEN
/*        WRITE OS-F KS-F BO-F TZ-ID RETURN-CODE NPACS2SL.SALDO-OS NPACS2SL.SALDO-KS
/*              IBS-REC-FILE.DI-ID DI-OS(1) DI-KS(1) SU-F
/*        MOVE NPACS2SL.SALDO-OS TO NPXXANSL.STACK-POS
/*        PERFORM SALDO-READ
/*        WRITE NPXXANSL.AC-CODE NPXXANSL.VO-CODE NPXXANSL.DI-ID(1)
/*        MOVE NPACS2SL.SALDO-KS TO NPXXANSL.STACK-POS
/*        PERFORM SALDO-READ
/*        WRITE NPXXANSL.AC-CODE NPXXANSL.VO-CODE NPXXANSL.DI-ID(1)
/*     END-IF
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        ESCAPE TOP
     END-IF
     IF NPACS2SL.SALDO-OS EQ NPACS2SL.SALDO-KS THEN
        ESCAPE TOP
     END-IF
     PERFORM INT-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        PERFORM INT-PUSH
     ELSE
        PERFORM INT-READ
     END-IF
     NPACS2SL.INT-TZ := TZ-ID
     NPACS2SL.N-PROV := IBS-REC-FILE.N-PROV
     IF BO-F EQ 3 THEN
        ADD IBS-REC-FILE.SU-F TO NPACS2SL.SUMM-OB-DEBET
     ELSE
        ADD IBS-REC-FILE.SU-F TO NPACS2SL.SUMM-OB-CREDIT
     END-IF
     PERFORM INT-WRITE
  END-FIND
  RELEASE SET "NPACS10R"
  FOR #I = 1 TO NPACS2SA.STACK-LEN
     MOVE #I TO NPACS2SL.STACK-POS
     PERFORM INT-READ
     MOVE BY NAME NPACS2SL.STACK-REC-G TO #LOC-INT
     IF #LOC-INT.INT-TZ EQ 1 THEN
        MOVE #LOC-INT.SALDO-OS TO NPACS2SL.SALDO-KS
        MOVE #LOC-INT.SALDO-KS TO NPACS2SL.SALDO-OS
        PERFORM INT-LOCATE
        IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
           PERFORM INT-PUSH
        ELSE
           PERFORM INT-READ
        END-IF
        MOVE 4 TO NPACS2SL.INT-TZ
        MOVE #LOC-INT.SUMM-OB-DEBET TO NPACS2SL.SUMM-OB-CREDIT
        MOVE #LOC-INT.SUMM-OB-CREDIT TO NPACS2SL.SUMM-OB-DEBET
        PERFORM INT-WRITE
     END-IF
  END-FOR
  FOR #I = 1 TO NPACS2SA.STACK-LEN
     MOVE #I TO NPACS2SL.STACK-POS
     PERFORM INT-READ
     IF NPACS2SL.INT-TZ EQ 1 THEN ESCAPE TOP END-IF
     IF NPACS2SL.INT-TZ EQ 2 THEN
        RESET NPACS2SL.SUMM-OB-CREDIT NPACS2SL.SUMM-OB-DEBET
     END-IF
     IF NPACS2SL.INT-TZ EQ 4 THEN
        NPACS2SL.INT-TZ := 2
     END-IF
     PERFORM INT-WRITE
  END-FOR
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "NPACS1SA" "NPACS1SL-CONST" "NPACS1SL"
        "ORG-INIT" "ORG-FREE" "ORG-REALLOC"
        "ORG-PUSH" "ORG-READ" "ORG-WRITE" "ORG-LOCATE"
/*
INCLUDE XXSTMN4C "NPACS2SA" "NPACS2SL-CONST" "NPACS2SL"
        "INT-INIT" "INT-FREE" "INT-REALLOC"
        "INT-PUSH" "INT-READ" "INT-WRITE" "INT-LOCATE"
/*
INCLUDE XXSTMN4C "NPACS3SA" "NPACS3SL-CONST" "NPACS3SL"
        "DI-INIT" "DI-FREE" "DI-REALLOC"
        "DI-PUSH" "DI-READ" "DI-WRITE" "DI-LOCATE"
/*
INCLUDE XXSTMN4C "NPXXANSA" "NPXXANSL-CONST" "NPXXANSL"
        "SALDO-INIT" "SALDO-FREE" "SALDO-REALLOC"
        "SALDO-PUSH" "SALDO-READ" "SALDO-WRITE" "SALDO-LOCATE"
END-SUBROUTINE
END
