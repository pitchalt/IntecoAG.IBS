* >Natural Source Header 000000 /*<RO>>
* :NatName SVARZA
* :UID MSA
* :Mode S
* :CP
* :Date 20110811
* :Time 1054390
* <Natural Source Header /*<<RO>
**************************
* BEƒEH»E APX»BA «AKA«OB
**************************
DEFINE DATA
PARAMETER USING PRMNAVI
LOCAL USING LCLZAKL
LOCAL USING LCLRECL
LOCAL USING LCLBSL
LOCAL USING LCLLX
LOCAL USING LCLKKL
LOCAL USING PRMHELP
LOCAL USING CHR1251
LOCAL USING CHREBCD
LOCAL USING LCLFROL4
LOCAL USING EXL-PARM
LOCAL
1 NAME_OF_MODULE(A8)
1 TEXT1(A40)
1 PFKEY(A4)
1 REDEFINE PFKEY
  2 FILLER 2X
  2 REGA(A2)
  2 REDEFINE REGA
    3 REG(N2)
1 SS1(N2)  1 SS2(N2)  1 BB1(N2)  1 BB2(N2)
1 LHI(A120)
1 REDEFINE LHI
  2 #LHI(A60/2)
1 TEI(A10)  1 DGI(A20) 1 ZKI(A9)  1 BSI(N5)  1 GZK(N5)  1 DTO(N8)
1 DTZ(N8)  1 CFI(N2.2)  1 NDSI(A1)
1 OPSYS(A3)
1 TX-PF4(A3)   INIT <'ŒÔ'>
1 TX-PF11(A4)  INIT <'¬˚·'>
1 DTO-C(C)  1 DTZ-C(C)  1 ZKI-C(C)  1 ZKP-C(C)  1 ZKPN-C(C/2)
1 KEY1(A10)
1 REDEFINE KEY1
  2 KEYOG(N5)  2 KEYKD(N5)
1 GRI(N5)  1 MOI(N5)  1 ZK-STAT(N1)
1 WORK-REC(A201)
1 REDEFINE WORK-REC
  2 FILLER 1X
  2 WORK-ISNA(A4)
  2 REDEFINE WORK-ISNA
    3 WORK-ISN(P7)
  2 FILLER 1X
  2 WORK-ZK(A9)
  2 FILLER 74X
1 STEK-REC(A221)
1 REDEFINE STEK-REC
  2 STEK-FF(B1)
  2 STEK-ISN(P7)
  2 REDEFINE STEK-ISN
    3 STEK-ISNA(A4)
  2 STEK-UP(A1)
  2 STEK-ZK(A9)  2 STEK-BS(N5)
  2 FDV(A4)
  2 REDEFINE FDV
    3 FDVM(A1/4)
  2 STEK-RR(A3)  2 STEK-TE(A10)  2 STEK-DO(N8)  2 STEK-DZ(N8)
  2 STEK-LH(A120)  2 STEK-OPR(A3)  2 STEK-GZ(N5)  2 STEK-DG(A20)
  2 STEK-CF(N2.2)  2 STEK-NDS(A1)
  2 STEK-NAK-OZM (N3.4) 2 STEK-NAK-KB (N3.4) 2 STEK-ZK-TYPE (N1)
1 ONE-ZK-TYPE(N1) 1 ONE-NAK-OZM(N3.4) 1 ONE-NAK-KB(N3.4)
1 FLG-OP(N1)  1 I(P7)  1 J(P7)  1 #K(P7)  1 FLG(N1)  1 F-EL(P7)
1 M-EL(P7)  1 M-DEL(P7)  1 #NOL(A1)
1 INPUT-REC(A221/5)
1 REDEFINE INPUT-REC
  2 INP-REC(5)
    3 FIELD-FF(B1)  3 FIELD-ISN(P7)  3 FIELD-UP(A1)  3 FIELD-ZK(A9)
    3 FIELD-BS(N5)  3 FIELD-ZP(A1)   3 FIELD-MT(A1)  3 FIELD-KM(A1)
    3 FIELD-OC(A1)  3 FIELD-RR(A3)  3 FIELD-TE(A10)  3 FIELD-DO(N8)
    3 FIELD-DZ(N8)
    3 FIELD-LH(A120)
    3 REDEFINE FIELD-LH
      4 #FIELD-LH(A60/2)
    3 FIELD-OPR(A3)  3 FIELD-GZ(N5)
    3 FIELD-DG(A20)  3 FIELD-CF(N2.2)  3 FIELD-NDS(A1)
    3 FIELD-NAK-OZM (N3.4) 3 FIELD-NAK-KB (N3.4) 3 FIELD-ZK-TYPE (N1)
1 BSS(N5)  1 ZKS(A9)  1 ARR-ISN(P7/1:20)  1 CCC(I4)
END-DEFINE
DEFINE WINDOW WIN
SIZE SS1 * SS2
BASE BB1 / BB2
TITLE TEXT1
CONTROL SCREEN
*
SET KEY PF1 PF2 PF3 PF4 PF6
KEYOG := OG-IDENT-G  #OPSYS := *OPSYS
INCLUDE DEFOPSYS
MOVE 1    TO N-DATA N-DATA-B
MOVE 221  TO L-DATA L-DATA-B
MOVE 5000 TO Q-DATA Q-DATA-B
MOVE 2    TO N-DEL  N-DEL-B
MOVE 4    TO L-DEL  L-DEL-B
MOVE 200  TO Q-DEL  Q-DEL-B
Q-LINE := 5 T-KEY := 7 L-KEY := 14
*
REPEAT
  TEXT1 := 'BEƒEH»E «AKA«OB'
  SS1 := 18 SS2 := 42 BB1 := 03 BB2 := 19
  SET WINDOW 'WIN'
  IF #OPSYS = 'W'
    INPUT USING MAP 'NAVZKM1'
    ELSE
    INPUT WITH TEXT RE-MSG
      /  'C ƒ E À A … T E   B A ÿ   B € ¡ O P' (AD=I)
      // 3T 'OTKP€T‹ «AKA« (ÿœ«)      -' '"œ‘1"' (I)
      // 3T '«AKP€T‹ «AKA« (ÿœ«)      -' '"œ‘2"' (I)
      // 3T 'PA¡OTA C APX»BOM «AKA«OB -' '"œ‘4"' (I)
      // 3T '"œ‘3"'(I) '- B€’Œƒ' 4X '"œ‘6"' (I) '- œŒÃŒŸ‹'
  END-IF
  SET WINDOW OFF
RESET RE-MSG
DECIDE ON EVERY VALUES *PF-KEY
VALUES 'PF3' ESCAPE ROUTINE
* VALUES 'PF6'
*  INCLUDE CCHELP '16'
*  SET CONTROL 'K0' ESCAPE TOP
VALUES 'PF1','PF2','PF4','PF6'
  PFKEY := *PF-KEY
  MOVE RIGHT REGA TO REGA
  DECIDE ON EVERY VALUES REG
  VALUES 1
    RESET FDV LHI TEI ZKI BSI DTZ DTO FLG-OP
    RESET INITIAL TX-PF4 TX-PF11 ZKI-C ZKP-C ZKPN-C(*)
    REG-NM-G := '<œPO÷Eƒ”PA OTKP€T»ﬂ «AKA«A (ÿœ«)>'
    CALLNAT 'CENTER40' REG-NM-G
/*    MOVE (AD=P) TO DTZ-C
    SET KEY PF11
    PERFORM PROC-ONE
    SET KEY PF11 = OFF
  VALUES 2
    RESET FDV LHI TEI ZKI BSI DTZ DTO FLG-OP TX-PF4 TX-PF11
    RESET INITIAL ZKI-C
    REG-NM-G := '<œPO÷Eƒ”PA «AKP€T»ﬂ «AKA«A (ÿœ«)>'
    CALLNAT 'CENTER40' REG-NM-G
    MOVE (AD=P) TO ZKP-C DTO-C ZKPN-C(*)  SET KEY PF4 = OFF
    PERFORM PROC-ONE
    SET KEY PF4
  VALUES 4
    RESET BSI GRI MOI TEI ZK-STAT ZKI REG
    ZK-STAT := 1
    REG-NM-G := '<¿–’»¬ «¿ ¿«Œ¬>'
    CALLNAT 'CENTER40' REG-NM-G
/*    REPEAT
    INPUT USING MAP 'NAVZKM2'
    SET WINDOW OFF
/*    IF *PF-KEY = 'PF3' THEN ESCAPE BOTTOM END-IF
/*    IF *PF-KEY = 'ENTR' THEN
      PERFORM PROC-ARXIV
/*    END-IF
/*    END-REPEAT
/*    ESCAPE BOTTOM
  VALUES 6
    REG-NM-G := '<œPO—–Œ◊≈ÕÕ€≈ «AKA«€ (ÿœ«)>'
    CALLNAT 'CENTER40' REG-NM-G
    PERFORM P-ZAKAZ PRMNAV
    ESCAPE TOP
  NONE VALUES IGNORE
  END-DECIDE
/*  SET CONTROL 'K0' ESCAPE BOTTOM
NONE VALUES
  RE-MSG := '¬˚·op ÂÊËÏ‡ ÔÓ ÙÛÌÍˆËÓÌ‡Î¸ÌÓÈ ÍÎa‚Ë¯e'
END-DECIDE
END-REPEAT
*
DEFINE SUBROUTINE PROC-ONE
SET KEY PF5
SET KEY PF1 = OFF PF2 = OFF PF6 = OFF
REPEAT
IF RE-MSG = ' ' THEN
  INPUT MARK CCC USING MAP 'NAVZKM3'
  ELSE
  INPUT WITH TEXT RE-MSG MARK CCC ALARM USING MAP  'NAVZKM3'
END-IF
RESET RE-MSG
CCC := *CURS-FIELD
/*IF REG = 1 THEN RESET DTZ END-IF
DECIDE FOR EVERY CONDITION
WHEN *PF-KEY = 'PF3'
  ESCAPE BOTTOM
WHEN *PF-KEY = 'PF11' AND REG = 1
  IF CCC = POS(BSI) THEN
     CALLNAT 'SELBS' OG-IDENT-G BSI
  END-IF
  IF CCC = POS(GZK) THEN
     CALLNAT 'SELGZ' OG-IDENT-G GZK
  END-IF
  SET CONTROL 'K0' ESCAPE TOP
WHEN *PF-KEY NE 'PF3'
  PERFORM PROC-CHEK-ONE
WHEN *PF-KEY = 'PF4' AND REG = 1
  IF WORK-ISN = 0
    RE-MSG := 'œepe‰ oÔËcaÌËeÏ ÁaÍaÁa e„o Ìa‰o coxpaÌËÚ¸.'
    CCC := POS(ZKI) FLG-OP := 1 ESCAPE TOP END-IF
  CALLNAT 'EDITZAK' PRMNAV WORK-ISN
  SET CONTROL 'K0'
WHEN *PF-KEY = 'PF5'
  PERFORM PROC-SAVE-ONE
WHEN NONE IGNORE
END-DECIDE
END-REPEAT
SET KEY PF5 = OFF
SET KEY PF1 PF2 PF6
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-CHEK-ONE
RESET WORK-ISN
IF ZKI = ' ' THEN
   RE-MSG := '«‡Í‡Á ?' CCC := POS(ZKI) ESCAPE TOP
END-IF
Z. FIND ZAKAZ ZK-F = ZKI
   WORK-ISN := *ISN(Z.)
   TEI := TE-F(Z.) BSI := BS-F(Z.) FDV := FD-F(Z.)
   LHI := NM-F(Z.) GZK := GZ-F(Z.) DTO := DT-OT(Z.)
   END-FIND
DECIDE ON EVERY VALUE REG
VALUES 1
   IF *NUMBER(Z.) > 0 THEN
      RE-MSG := '«aÍaÁ oÚÍp˚Ú paÌee' CCC := POS(ZKI)
      ESCAPE TOP END-IF
   IF BSI = 0 THEN
IGNORE
*     RE-MSG := 'CÛ·Ò˜ÂÚ ?' CCC := POS(BSI) ESCAPE TOP
   ELSE
      KEYKD := BSI PERFORM CHEK-BSH
      IF RE-MSG NE ' ' THEN CCC := POS(BSI) ESCAPE TOP END-IF
   END-IF
   IF DTO = 0 THEN DTO := *DATN
   ELSE
      IF DTO NE MASK(YYYYMMDD) OR DTO = MASK(0) THEN
         RE-MSG := 'ƒ‡Ú‡ ÓÚÍ˚ÚË  ?' CCC := POS(DTO)
         ESCAPE TOP END-IF
   END-IF
   IF NOT ( NDSI = 'Œ' OR = '–' OR = 'Õ' )
     RE-MSG := '”Í‡ÊËÚÂ Œ ËÎË – ËÎË Õ'  CCC := POS(NDSI)
   END-IF
   IF GZK NE 0 THEN
*      KEYKD := GZK PERFORM CHEK-GZ
      IF RE-MSG NE ' ' THEN CCC := POS(GZK) ESCAPE TOP END-IF
   END-IF
VALUES 2
   IF *NUMBER(Z.) = 0 THEN
      RE-MSG := '”Í‡Á‡ÌÌ˚È Á‡Í‡Á ÌÂ ÓÚÍ˚Ú' CCC := POS(ZKI)
      ESCAPE TOP END-IF
   IF DTZ = 0 THEN DTZ := *DATN
   ELSE
      IF DTZ = MASK(0) OR DTZ NE MASK(YYYYMMDD) THEN
         RE-MSG := 'ƒ‡Ú‡ Á‡Í˚ÚË  ?' CCC := POS(DTZ)
         ESCAPE TOP END-IF
   END-IF
NONE VALUES IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-SAVE-ONE
DECIDE ON EVERY VALUE REG
VALUES 1
S. FIND ZAKAZ ZZ-F = ZKI
   IF NO RECORDS FOUND
      RESET ZAKAZ
   END-NOREC
   RESET ZAKAZ.ZZ-F /*ZAKAZ.DT-ZA
   ZAKAZ.ZK-F  := ZKI ZAKAZ.BS-F  := BSI
   ZAKAZ.FD-F  := FDV ZAKAZ.NM-F  := LHI
   ZAKAZ.GZ-F  := GZK ZAKAZ.TE-F  := TEI
   ZAKAZ.DT-OT := DTO  ZAKAZ.DT-ZA := DTZ
   ZAKAZ.DG-F := DGI   ZAKAZ.C-FOND := CFI
   ZAKAZ.NDS-PRIZN := NDSI
   ZAKAZ.ZT-OID := ONE-ZK-TYPE
   ZAKAZ.NAK-COEFF := ONE-NAK-OZM
   ZAKAZ.NAK-KB := ONE-NAK-KB
   MOVE LEFT JUSTIFIED ZAKAZ.BS-F TO ZAKAZ.B-SCET
   IF *NUMBER(S.) = 0 THEN
      CALLNAT 'SBGZKN' ZAKAZ.INT-NUM-ZK
   W. STORE ZAKAZ
   ELSE
      UPDATE (S.)
   END-IF
   END-FIND
   END OF TRANSACTION
   IF FLG-OP = 1 THEN
      RESET FLG-OP SET CONTROL 'K0' ESCAPE TOP END-IF
VALUES 2
   ADD 1 TO FLG-OP
   IF FLG-OP = 1 THEN
      MOVE (AD=P) TO ZKI-C DTZ-C
      RE-MSG := 'œo‰Ú‚ep‰ËÚe «AKP€T»E, ÌaÊa‚ "œ‘5"'
      SET CONTROL 'K0' ESCAPE TOP
   END-IF
U. FIND ZAKAZ ZK-F = ZKI
   ZZ-F(U.) := ZKI ZAKAZ.DT-ZA := DTZ
   RESET ZK-F(U.)
   UPDATE (U.)
   END-FIND
   END OF TRANSACTION
NONE VALUES IGNORE
END-DECIDE
SET CONTROL 'K0' ESCAPE BOTTOM
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-ARXIV
SET KEY PF5 PF7 PF8 PF9 PF10 PF11 PF12
SET KEY PF2 = OFF
PERFORM PROC-LOAD
REPEAT
PERFORM ARRY-PROC
IF RE-MSG NE ' ' THEN
    INPUT TEXT RE-MSG MARK CCC ALARM USING MAP 'NAVZKM4'
ELSE
  INPUT MARK CCC USING MAP 'NAVZKM4'
END-IF
RESET RE-MSG
CCC := *CURS-FIELD
FOR C-CURS 1 C-LINE
IF *CURS-FIELD = POS(FIELD-ZK(C-CURS)) OR = POS(FIELD-BS(C-CURS))
   OR = POS(FIELD-ZP(C-CURS)) OR = POS(FIELD-KM(C-CURS))
   OR = POS(FIELD-OC(C-CURS)) OR = POS(FIELD-MT(C-CURS))
   THEN ESCAPE BOTTOM END-IF
IF *CURS-FIELD = POS(FIELD-TE(C-CURS))
   OR = POS(FIELD-DO(C-CURS)) OR = POS(FIELD-DZ(C-CURS))
   OR = POS(FIELD-LH(C-CURS)) OR = POS(FIELD-GZ(C-CURS))
   THEN ESCAPE BOTTOM END-IF
END-FOR
DECIDE FOR EVERY CONDITION
WHEN *PF-KEY = 'PF3'
  ESCAPE BOTTOM
WHEN *PF-KEY = 'PF2'
#FPATH := 'C:\R26\WKF10.FLE'
INCLUDE FILEPATH '10' '12'
RECORD-MODE := 'I'
WORK-FILE-NAME-NEW := 'C:\R26\WKF10.FLE'
PAPER-ORIENTATION := 'LANDSCAP'
HEADER-LEFT-TO-RIGHT (1) := 'Œ¿Œ ¬œ  "ÕœŒ Ã‡¯ËÌÓÒÚÓÂÌËÂ"'
HEADER-LEFT-TO-RIGHT(2) := '¿ıË‚ Á‡Í‡ÁÓ‚'
FOOTER-LEFT-TO-RIGHT (1) := '&ƒ'
COMPRESS *DATG *TIME INTO FOOTER-LEFT-TO-RIGHT (2)
FOOTER-LEFT-TO-RIGHT (3) := '&C'
HOW-MUCH-ROWS := 13  HEIGHT(1) := 30
EXL-PARM.STYLE (1:HOW-MUCH-ROWS) := 'TABLE-ROW-GRAY'
EXL-PARM.WIDTH (1) := 55  EXL-PARM.WIDTH (2) := 30
EXL-PARM.WIDTH (3:6) := 10  EXL-PARM.WIDTH (7) := 70
EXL-PARM.WIDTH (8) := 100 EXL-PARM.WIDTH (9:10) := 50
EXL-PARM.WIDTH (11) := 250  EXL-PARM.WIDTH (12) := 50
EXL-PARM.CELL (1) := '«‡Í‡Á'  EXL-PARM.CELL (2) := '—˜ÂÚ'
EXL-PARM.CELL (3) := '«'  EXL-PARM.CELL (4) := 'M'
EXL-PARM.CELL (5) := ' '  EXL-PARM.CELL (6) := '‘'
EXL-PARM.CELL (7) := '“ÂÏ‡'  EXL-PARM.CELL (8) := 'ƒÓ„Ó‚Ó'
EXL-PARM.CELL (9) := 'ƒ‡Ú‡ ÓÚÍ.'  EXL-PARM.CELL (10) := 'ƒ‡Ú‡ Á‡Í.'
EXL-PARM.CELL(11) := 'Õ‡ËÏÂÌÓ‚‡ÌËÂ'
EXL-PARM.CELL(12) := '÷‘'
EXL-PARM.CELL(13) := 'Õƒ—'
CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
HEIGHT(1) := 0
EXL-PARM.STYLE (1:HOW-MUCH-ROWS) := 'TABLE-ROW'
RECORD-MODE := 'W'
FOR C-DATA1 1 M-EL
  C-DATA-B4 := C-DATA1
  CALL 'RWSX' C-DATA-B4 STEK-REC RD-REC N-DATA-B
  EXL-PARM.CELL (1) := STEK-ZK  EXL-PARM.CELL (2) := STEK-BS
  EXL-PARM.CELL(3:6) := FDVM(*)  EXL-PARM.CELL (7) := STEK-TE
  EXL-PARM.CELL (9) := STEK-DO  EXL-PARM.CELL (10) :=  STEK-DZ
  EXL-PARM.CELL (11) := STEK-LH  EXL-PARM.CELL (8) := STEK-DG
  MOVE EDITED STEK-CF(EM=99.99) TO EXL-PARM.CELL (12)
  EXL-PARM.CELL(12) := STEK-NDS
  CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
END-FOR
RECORD-MODE := 'C'
CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
WHEN *PF-KEY = 'PF11'
  IF CCC = POS(FIELD-BS(C-CURS)) THEN
     CALLNAT 'SELBS' OG-IDENT-G FIELD-BS(C-CURS)
  END-IF
  IF CCC = POS(FIELD-GZ(C-CURS)) THEN
     CALLNAT 'SELGZ' OG-IDENT-G FIELD-GZ(C-CURS)
  END-IF
  SET CONTROL 'K11' ESCAPE TOP
WHEN *PF-KEY = 'PF12' AND M-EL NE 0
  PERFORM PROC-SORT
WHEN *PF-KEY NE 'PF3'
  PERFORM PROC-CHECK-ARX
WHEN *PF-KEY = 'PF4' AND C-CURS = 1 THRU C-LINE
  PERFORM PROC-OPR
WHEN *PF-KEY = 'PF5'
  PERFORM PROC-SAVE-ARX
WHEN *PF-KEY = 'PF6'
  PERFORM PROC-POISK
WHEN *PF-KEY = 'PF7'
  IF F-EL > Q-LINE THEN F-EL := F-EL - Q-LINE
    ELSE RESET F-EL END-IF
WHEN *PF-KEY = 'PF8' AND C-DATA < M-EL
  ADD Q-LINE TO F-EL
WHEN *PF-KEY = 'PF9'
  RESET F-EL
WHEN *PF-KEY = 'PF10'
  F-EL := M-EL - 1
WHEN NONE IGNORE
END-DECIDE
CCC := 1
END-REPEAT
FLG := 0  CALL 'FRSX' N-DATA-B  CALL 'FRSX' N-DEL-B
SET KEY PF5 = OFF PF7 = OFF PF8 = OFF PF9 = OFF
        PF10 = OFF PF11 = OFF PF12 = OFF
SET KEY PF2
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-OPR
CALLNAT 'EDITZAK' PRMNAV FIELD-ISN(C-CURS)
RESET FIELD-OPR(C-CURS)
G. GET ZAKAZ FIELD-ISN(C-CURS)
IF C*GM-F(G.) NE 0 THEN FIELD-OPR(C-CURS) := 'OÔp' END-IF
C-DATA2 := F-EL + C-CURS C-DATA-B4 := C-DATA2
CALL 'RWSX' C-DATA-B4 INPUT-REC(C-CURS) WR-REC N-DATA-B
SET CONTROL 'K0' ESCAPE TOP
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-POISK
RESET C-DATA1-B
IF ZKS NE ' ' THEN
   C-DATA1-B := T-KEY C-DATA2-B := 9
   CALL 'CMPXF' ZKS C-DATA1-B C-DATA2-B N-DATA-B
ELSE
   IF BSS NE 0 THEN
      C-DATA1-B := 16 C-DATA2-B := 5
      CALL 'CMPXF' BSS C-DATA1-B C-DATA2-B N-DATA-B
   END-IF
END-IF
IF C-DATA1-B NE 0
   F-EL := C-DATA1-B F-EL := F-EL - 1 END-IF
SET CONTROL 'K0' ESCAPE TOP
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-LOAD
CALL 'GTSX' L-DEL-B Q-DEL-B N-DEL-B
RESET M-EL F-EL M-DEL FLG
IF ZKI NE ' '
  FIND ZAKAZ ZK-F = ZKI OR ZZ-F = ZKI
  Q-DATA-B := *NUMBER + 1 STEK-ISN := *ISN
  PERFORM PROC-STEK
  END-FIND
ELSE
  IF BSI NE 0
    FIND ZAKAZ BS-F = BSI
    Q-DATA-B := *NUMBER + 1 STEK-ISN := *ISN
    PERFORM PROC-STEK
    END-FIND
  ELSE
    IF TEI NE ' ' THEN
      FIND ZAKAZ TE-F = TEI
      Q-DATA-B := *NUMBER + 1 STEK-ISN := *ISN
      PERFORM PROC-STEK
      END-FIND
    ELSE
      IF MOI NE 0
        FIND ZAKAZ MO-F = MOI
        Q-DATA-B := *NUMBER + 1 STEK-ISN := *ISN
        PERFORM PROC-STEK
        END-FIND
      ELSE  Q-DATA-B := 5000
        READ ZAKAZ
        STEK-ISN := *ISN PERFORM PROC-STEK
        END-READ
      END-IF
    END-IF
  END-IF
END-IF
IF M-EL NE 0 THEN
  C-DATA1-B := T-KEY C-DATA2-B := L-KEY
  CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
END-IF
CCC := 1
END-SUBROUTINE
*
DEFINE PROC-STEK
IF FLG = 0 THEN
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B
END-IF
FLG := 1
RESET STEK-OPR STEK-FF STEK-DZ STEK-DO
IF BSI NE 0 AND ZAKAZ.BS-F NE BSI THEN ESCAPE TOP END-IF
IF ZAKAZ.BS-F NE 0 AND #NOL NE ' ' THEN ESCAPE TOP END-IF
IF TEI NE ' ' AND ZAKAZ.TE-F NE TEI THEN ESCAPE TOP END-IF
IF MOI NE 0 AND NOT ( ZAKAZ.MO-F(*,*) = MOI ) THEN ESCAPE TOP END-IF
IF GRI NE 0 AND ZAKAZ.GZ-F NE GRI THEN ESCAPE TOP END-IF
IF ZK-STAT = 1 AND ZAKAZ.ZK-F = ' ' THEN ESCAPE TOP END-IF
IF ZK-STAT = 2 AND ZAKAZ.ZZ-F = ' ' THEN ESCAPE TOP END-IF
IF ZAKAZ.ZK-F NE ' ' THEN STEK-ZK := ZAKAZ.ZK-F
   ELSE STEK-ZK := ZAKAZ.ZZ-F END-IF
STEK-LH := ZAKAZ.NM-F STEK-BS := ZAKAZ.BS-F
FDV     := ZAKAZ.FD-F STEK-TE := ZAKAZ.TE-F
STEK-GZ := ZAKAZ.GZ-F STEK-DO := ZAKAZ.DT-OT
STEK-DG := ZAKAZ.DG-F  STEK-DZ := ZAKAZ.DT-ZA
STEK-RR := ' '  STEK-CF := C-FOND  STEK-NDS := NDS-PRIZN
STEK-NAK-OZM := ZAKAZ.NAK-COEFF STEK-NAK-KB := ZAKAZ.NAK-KB
STEK-ZK-TYPE := ZAKAZ.ZT-OID
IF ZAKAZ.ZZ-F NE ' '  STEK-RR := '«‡Í'
  IF STEK-DZ = 0 THEN STEK-DZ := 99999999  END-IF
END-IF
IF ZAKAZ.C*GM-F NE 0 THEN STEK-REC.STEK-OPR := TX-PF4 END-IF
ADD 1 TO M-EL C-DATA1-B := M-EL
CALL 'RWSX' C-DATA1-B STEK-REC WR-REC N-DATA-B
END-SUBROUTINE
*
DEFINE PROC-SORT
RESET C-DATA1-B C-DATA2-B
DECIDE FOR EVERY CONDITION
WHEN CCC = POS(FIELD-ZK(C-CURS))
  C-DATA1-B := T-KEY C-DATA2-B := L-KEY
WHEN CCC = POS(FIELD-BS(C-CURS))
  C-DATA1-B := 16 C-DATA2-B := 5
WHEN CCC = POS(FIELD-ZP(C-CURS))
  C-DATA1-B := 21 C-DATA2-B := 1
WHEN CCC = POS(FIELD-MT(C-CURS))
  C-DATA1-B := 22 C-DATA2-B := 1
WHEN CCC = POS(FIELD-KM(C-CURS))
  C-DATA1-B := 23 C-DATA2-B := 1
WHEN CCC = POS(FIELD-OC(C-CURS))
  C-DATA1-B := 24 C-DATA2-B := 1
WHEN CCC = POS(FIELD-TE(C-CURS))
  C-DATA1-B := 26 C-DATA2-B := 10
WHEN CCC = POS(FIELD-DO(C-CURS))
  C-DATA1-B := 36 C-DATA2-B := 8
WHEN CCC = POS(FIELD-DZ(C-CURS))
  C-DATA1-B := 44 C-DATA2-B := 8
WHEN CCC = POS(FIELD-LH(C-CURS))
  C-DATA1-B := 52 C-DATA2-B := 30
WHEN CCC = POS(FIELD-GZ(C-CURS))
  C-DATA1-B := 85 C-DATA2-B := 5
WHEN NONE IGNORE
END-DECIDE
IF C-DATA1-B NE 0 THEN
  IF C-DATA1-B = T-KEY THEN
     CALL 'SRTX' C-DATA1-B C-DATA2-B N-DATA-B
  ELSE
     C-DATA-B4 := T-KEY C-DEL-B := 9
     CALL 'SRTX' C-DATA1-B C-DATA2-B C-DATA-B4 C-DEL-B N-DATA-B
  END-IF
END-IF
SET CONTROL 'K0' ESCAPE TOP
END-SUBROUTINE
*
DEFINE SUBROUTINE ARRY-PROC
IF RE-MSG = ' ' AND *PF-KEY NE 'PF11' THEN
RESET INPUT-REC(*) FIELD-FF(*) FIELD-ISN(*) FIELD-BS(*)
      FIELD-DO(*) FIELD-DZ(*) FIELD-GZ(*)
FOR C-LINE 1 Q-LINE
C-DATA := F-EL + C-LINE C-DATA-B4 := C-DATA
IF C-DATA > M-EL THEN ESCAPE BOTTOM END-IF
CALL 'RWSX' C-DATA-B4 INPUT-REC(C-LINE) RD-REC N-DATA-B
END-FOR
C-LINE := C-LINE - 1
END-IF
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-CHECK-ARX
C-DATA1 := F-EL + 1 C-DATA2 := F-EL + Q-LINE
FOR C-LINE 1 TO Q-LINE
RESET ARR-ISN(*) #K FLG STEK-ZK STEK-DO STEK-DZ STEK-ISN
J:= F-EL + C-LINE C-DATA-B4 := J
IF J <= M-EL THEN
   CALL 'RWSX' C-DATA-B4 STEK-REC RD-REC N-DATA-B
END-IF
IF FIELD-ZK(C-LINE) = ' ' THEN
   IF STEK-ZK = ' ' THEN ESCAPE TOP END-IF
ELSE
   IF STEK-ZK = ' ' THEN
      RE-MSG := 'ÕÓ‚˚È Á‡Í‡Á‡ ÓÔÂ‰ÂÎ ÂÚÒ  ˜ÂÂÁ ÔÓˆÂ‰ÛÛ ÓÚÍ˚ÚË '
   ELSE
      IF FIELD-ZK(C-LINE) NE STEK-ZK THEN
         RE-MSG := 'ÿËÙ Á‡Í‡Á‡ ËÁÏÂÌ Ú¸ ÌÂÎ¸Á ' END-IF
   END-IF
   IF RE-MSG NE ' ' THEN
      FIELD-ZK(C-LINE) := STEK-ZK CCC := POS(FIELD-ZK(C-LINE))
      ESCAPE BOTTOM END-IF
END-IF
IF STEK-ZK NE ' ' THEN
   EXAMINE FULL FIELD-ZK(*) FOR FULL STEK-ZK NUMBER C-DUBL
   IF FIELD-ZK(C-LINE) = ' ' THEN
      IF C-DUBL > 0 THEN ESCAPE TOP END-IF
   ELSE
      IF C-DUBL > 1 THEN
         RE-MSG := 'ƒÛ·ÎËÓ‚‡ÌËÂ Á‡Í‡Á‡ Ì‡ ˝Í‡ÌÂ'
         CCC := POS(FIELD-ZK(C-LINE)) ESCAPE BOTTOM END-IF
   END-IF
   FOR I 1 M-EL
   C-DATA-B4 := I
   CALL 'RWSX' C-DATA-B4 WORK-REC RD-REC N-DATA-B
   IF STEK-ZK NE WORK-ZK THEN ESCAPE TOP END-IF
   IF NOT ( I = C-DATA1 THRU C-DATA2 ) THEN FLG := 1 END-IF
   ADD 1 TO #K ARR-ISN(#K) := WORK-ISN
   END-FOR
   IF FIELD-ZK(C-LINE) = ' ' THEN
      IF FLG NE 0 THEN ESCAPE TOP END-IF
   ELSE
      IF FLG = 1 THEN
         RE-MSG := 'ƒÛ·ÎËÓ‚‡ÌËÂ Á‡Í‡Á‡ ‚ ÒÔËÒÍÂ Á‡ÔÓÒ‡'
         CCC := POS(FIELD-ZK(C-LINE)) ESCAPE BOTTOM
      END-IF
   END-IF
   RESET FLG
V. FIND ZAKAZ ZK-F = STEK-ZK OR ZZ-F = STEK-ZK
   IF ARR-ISN(*) = *ISN(V.) THEN ESCAPE TOP END-IF
   C-DATA1-B := 1 WORK-ISN := *ISN(V.)
   CALL 'CMPXF' WORK-ISNA C-DATA1-B H'00000004' N-DEL-B
   IF C-DATA1-B = 0 THEN FLG := 1 ESCAPE BOTTOM END-IF
   END-FIND
   IF FIELD-ZK(C-LINE) = ' ' THEN
      IF FLG = 0 THEN
         C-DATA-B4 := J RE-MSG := '”‰‡Î Ú¸ ÌÂÎ¸Á '
         CALL 'RWSX' C-DATA-B4 INPUT-REC(C-LINE) RD-REC N-DATA-B
      END-IF
   ELSE
      IF FLG = 1 THEN RE-MSG := '«‡Í‡Á ÛÊÂ ÔÓÔËÒ‡Ì ‚ ‡ıË‚Â' END-IF
   END-IF
   IF NOT ( FIELD-NDS(C-LINE) = 'Œ' OR = '–' OR = 'Õ' )
     RE-MSG := '”Í‡ÊËÚÂ Œ ËÎË Õ ËÎË –'
     CCC := POS(FIELD-NDS(C-LINE)) ESCAPE BOTTOM
   END-IF
   IF RE-MSG NE ' ' THEN
      CCC := POS(FIELD-ZK(C-LINE)) ESCAPE BOTTOM END-IF
END-IF
IF FIELD-ZK(C-LINE) = ' ' THEN ESCAPE TOP END-IF
IF FIELD-BS(C-LINE) = 0 THEN
IGNORE
*  RE-MSG := 'Cy·c˜eÚ ?'
ELSE
   KEYKD := FIELD-BS(C-LINE) PERFORM CHEK-BSH
END-IF
IF RE-MSG NE ' ' THEN
   CCC := POS(FIELD-BS(C-LINE)) ESCAPE BOTTOM END-IF
IF FIELD-ZP(C-LINE) NE ' ' THEN FIELD-ZP(C-LINE) := '+' END-IF
IF FIELD-MT(C-LINE) NE ' ' THEN FIELD-MT(C-LINE) := '+' END-IF
IF FIELD-KM(C-LINE) NE ' ' THEN FIELD-KM(C-LINE) := '+' END-IF
IF FIELD-OC(C-LINE) NE ' ' THEN FIELD-OC(C-LINE) := '+' END-IF
IF FIELD-GZ(C-LINE) NE 0 THEN
*   KEYKD := FIELD-GZ(C-LINE) PERFORM CHEK-GZ
   IF RE-MSG NE ' ' THEN
      CCC := POS(FIELD-GZ(C-LINE)) ESCAPE BOTTOM END-IF
END-IF
IF FIELD-DO(C-LINE) NE 0 THEN
   IF FIELD-DO(C-LINE) NE MASK(YYYYMMDD) OR
      FIELD-DO(C-LINE) = MASK(0) THEN
      RE-MSG := 'ƒ‡Ú‡ ÓÚÍ˚ÚË  Á‡Í‡Á‡ (√√√√MMƒƒ)?'
      CCC := POS(FIELD-DO(C-LINE)) ESCAPE BOTTOM END-IF
END-IF
IF STEK-DZ NE 0 THEN
   IF FIELD-DZ(C-LINE) = 0 OR FIELD-DZ(C-LINE) NE 99999999 AND
    ( FIELD-DZ(C-LINE) NE MASK(YYYYMMDD) OR
      FIELD-DZ(C-LINE) = MASK(0) ) THEN
      RE-MSG := 'ƒ‡Ú‡ Á‡Í˚ÚË  Á‡Í‡Á‡ (√√√√ÃÃƒƒ)?'
      CCC := POS(FIELD-DZ(C-LINE)) ESCAPE BOTTOM END-IF
   IF NOT ( FIELD-DO(C-LINE) = 0 OR = 99999999 ) AND
      FIELD-DZ(C-LINE) < FIELD-DO(C-LINE) THEN
      RE-MSG := 'ƒ‡Ú‡ Á‡Í˚ÚË  Á‡Í‡Á‡ ÏÂÌ¸¯Â ‰‡Ú˚ ÓÚÍ˚ÚË ?'
      CCC := POS(FIELD-DZ(C-LINE)) ESCAPE BOTTOM END-IF
END-IF
END-FOR
IF RE-MSG NE ' ' THEN ESCAPE TOP END-IF
*
RESET I
FOR C-LINE 1 Q-LINE
C-DATA1 := F-EL + C-LINE C-DATA-B4 := C-DATA1
IF C-DATA1 > M-EL THEN ESCAPE BOTTOM END-IF
CALL 'RWSX' C-DATA-B4 STEK-REC RD-REC N-DATA-B
IF STEK-REC = INPUT-REC(C-LINE) THEN ESCAPE TOP END-IF
IF FIELD-ZK(C-LINE) NE ' ' THEN
   FIELD-FF(C-LINE) := H'01' FIELD-ZK(C-LINE) := STEK-ZK
   CALL 'RWSX' C-DATA-B4 INPUT-REC(C-LINE) WR-REC N-DATA-B
ELSE
   IF STEK-ISN NE 0 THEN
      ADD 1 TO M-DEL C-DEL-B := M-DEL
      CALL 'RWSX' C-DEL-B STEK-ISNA WR-REC N-DEL-B
   END-IF
   ADD 1 TO I
   CALL 'RWSX' C-DATA-B4 H'FF' WR-REC N-DATA-B
       H'00000001' H'00000001'
END-IF
END-FOR
IF I NE 0 THEN
  CALL 'PRSX' H'00000001' H'00000001' N-DATA-B
  M-EL := M-EL - I
END-IF
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-SAVE-ARX
FOR C-DEL 1 M-DEL
C-DEL-B := C-DEL
CALL 'RWSX' C-DEL-B STEK-ISNA RD-REC N-DEL-B
ADD 1 TO I
D. GET ZAKAZ STEK-ISN
   DELETE(D.)
END-FOR
END OF TRANSACTION
RESET I
FOR C-DATA1 1 M-EL
C-DATA-B4 := C-DATA1
CALL 'RWSX' C-DATA-B4 STEK-REC RD-REC N-DATA-B
IF STEK-FF NE H'01'  THEN ESCAPE TOP END-IF
F. GET ZAKAZ STEK-ISN
ZAKAZ.DT-OT := STEK-DO
ZAKAZ.DT-ZA := STEK-DZ
* IF STEK-DZ <= *DATN THEN
*   ZAKAZ.ZZ-F  := STEK-ZK
*   RESET ZAKAZ.ZK-F
* ELSE
*   ZAKAZ.ZK-F := STEK-ZK
*   RESET ZAKAZ.ZZ-F
* END-IF
ZAKAZ.BS-F  := STEK-BS
MOVE LEFT JUSTIFIED STEK-BS TO ZAKAZ.B-SCET
ZAKAZ.FD-F  := FDV  ZAKAZ.TE-F := STEK-TE
ZAKAZ.DT-OT := STEK-DO  ZAKAZ.LH-F  := ZAKAZ.NM-F := STEK-LH
ZAKAZ.GZ-F  := STEK-GZ  ZAKAZ.DG-F  := STEK-DG  C-FOND := STEK-CF
NDS-PRIZN := STEK-NDS
ZAKAZ.NAK-COEFF := STEK-NAK-OZM
ZAKAZ.NAK-KB := STEK-NAK-KB
ZAKAZ.ZT-OID := STEK-ZK-TYPE
UPDATE(F.)
ADD 1 TO I
IF I = 50 THEN
   END OF TRANSACTION
   RESET I
END-IF
END-FOR
END OF TRANSACTION
SET CONTROL 'K0' ESCAPE BOTTOM
END-SUBROUTINE
*
DEFINE SUBROUTINE CHEK-BSH
B. FIND NUMBER IBS-BS-FILE OG-SS = KEY1
   IF *NUMBER(B.) = 0 THEN
      RE-MSG := 'CÛ·Ò˜ÂÚ ÌÂ ÓÔËÒ‡Ì ‚ ÔÎ‡ÌÂ Ò˜ÂÚÓ‚' END-IF
END-SUBROUTINE
*
DEFINE SUBROUTINE CHEK-GZ
Q. FIND NUMBER IBS-KK-FILE KK-F = 'Z1' AND KD-F = KEYKD
        AND OG-ID = OG-IDENT-G
   IF *NUMBER(Q.) = 0 THEN
      RE-MSG := 'ÕÂÚ ÛÍ‡Á‡ÌÌÓ„Ó ÍÓ‰‡ ÛÔ‡‚ÎÂÌË ' END-IF
END-SUBROUTINE
*
INCLUDE ERRORINC
END
