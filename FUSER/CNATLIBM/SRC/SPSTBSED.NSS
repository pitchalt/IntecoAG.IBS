* >Natural Source Header 000000 /*<RO>>
* :NatName SPSTBSED
* :UID MSA
* :Mode S
* :CP
* :Date 20110428
* :Time 1215000
* <Natural Source Header /*<<RO>
DEFINE DATA
* GLOBAL USING UFROG
 PARAMETER USING PRMSTBS
 PARAMETER USING PRMNAVI
*
 LOCAL USING LCLBS
 LOCAL USING PRMCOMM
 LOCAL USING PRMHELP
 LOCAL USING PRMSTEDT
 LOCAL USING LCLMSGL
 LOCAL USING PRMSELST
 LOCAL USING PRMSELSC
 LOCAL USING LCLSTAT
 LOCAL USING LCLFROL4
 LOCAL USING ADVBSPRM    /* PDA орг.-ий-пользователей с кодом > 1000
LOCAL
/******************************
1 INFO
 2 NAMEBS(A60)
 2 NUMLEV(I4)
 2 BSBS(N5)
 2 TT(A4)
 2 SSSS(N5)
/******************************
1 CURRSCR(I4)
1 LOCALSCR(10)
 2 NNNN(N2)
 2 STREQ(A1)
 2 SHORT(A5)
 2 NAME(A70)
 2 CODEONLY(I4/1:30)
 2 OPR(A3)
 2 ATTR(C) INIT ALL <(AD=D)>
/******************************
1 EDITONLY(I4/1:30)
1 INFOLEV(A13)
1 SCRCODE(I4/10)
1 ONSTART(I4)
1 ONCURR(I4)
/******************************
1 KEYSTTM(A16)
1 REDEFINE KEYSTTM
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
/******************************
1 KEYSS(B10)
1 REDEFINE KEYSS
  2 KEY_OG(N5)
  2 KEY_SS(N5)
1 KEYBS(B8)
1 REDEFINE KEYBS
  2 KEY_OG(N5)
  2 KEY_BS(N3)
/******************************
1 POSIT(I4)
1 POSIT2(I4)
1 MESSAGE(A75)
1 ERRORID(I4)
1 CHANGE(L)
1 CHANGESTR(A20)
/******************************
1 I(I4)
1 N(I4)
1 K(I4)
1 J(I4)
END-DEFINE
DEFINE SUBROUTINE SPSTBSED
DEFINE WINDOW MAPSEDM2WIN
 SIZE 14*14
 BASE 5/4
 TITLE INFOLEV
 CONTROL SCREEN
 FRAMED POSITION OFF
/******************************
#OPSYS := *OPSYS
 INCLUDE CCSETER 'PARSTBS' 'FALSE' '2' ;
 IF PARSTBS.OG_ID < 1 THEN
  INCLUDE CCSETER 'PARSTBS' 'FALSE' '1' ;
  ESCAPE ROUTINE
 END-IF
 PARSTBS.NLEV := ABS(PARSTBS.NLEV);
 PERFORM LOAD_DATA ;
 IF INFO.NUMLEV NE PARSTBS.NLEV THEN
  INCLUDE CCSETER 'PARSTBS' 'FALSE' '9' ;
  ESCAPE ROUTINE
 END-IF
 RESET PARCOMM ;
 PARCOMM.OG_ID := PARSTBS.OG_ID ;
 PERFORM SPSTCOMM PARCOMM ;
 IF NOT PARCOMM.RESULT OR PARCOMM.RESULT_ID NE 0 THEN
  INCLUDE CCSETER 'PARSTBS' 'FALSE' 'PARCOMM.RESULT_ID' ;
  ESCAPE ROUTINE
 END-IF
 IF INFO.NUMLEV > PARCOMM.MAXLEV THEN
  INCLUDE CCSETER 'PARSTBS' 'FALSE' '11' ;
  ESCAPE ROUTINE
 END-IF
 IF INFO.NUMLEV EQ 0 THEN
  INCLUDE CCSETER 'PARCOMM' 'TRUE' '0' ;
  ESCAPE ROUTINE
 END-IF
 INCLUDE CCSETKEY ;
 REPEAT
  LOCALSCR.ATTR(*) := (AD=PN)
  I := INFO.NUMLEV
  LOCALSCR.ATTR(1:I) := (AD=D CD=NE)
  FOR I = 1 TO INFO.NUMLEV
   LOCALSCR.NNNN(I) := I
   IF LOCALSCR.SHORT(I) NE ' ' THEN
    RESET PARCOMM ;
    PARCOMM.OG_ID := PARSTBS.OG_ID ;
    PARCOMM.SHORT := LOCALSCR.SHORT(I) ;
    PERFORM SPSTCOMM PARCOMM ;
    IF PARCOMM.RESULT_ID EQ 6 THEN
      LOCALSCR.NAME(I) := "ќЎ»Ѕќ„Ќќ «јƒјЌЌјя —“ј“№я."
      LOCALSCR.ATTR(1:I) := (CD=RE)
     ELSE
      LOCALSCR.NAME(I) := PARCOMM.NAME
    END-IF
   END-IF
   IF LOCALSCR.CODEONLY(I,*) NE 0 THEN LOCALSCR.OPR(I) := 'ќпр' END-IF
  END-FOR
  CHANGESTR := ' '
  IF CHANGE THEN CHANGESTR := '»зменено' END-IF
  IF #OPSYS NE 'W'
    INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT USING MAP 'MAPSEDM1'
    ELSE
    INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT USING MAP 'STM1'
  END-IF
  POSIT := *CURS-FIELD
  CURRSCR := 0
  FOR I = 1 TO INFO.NUMLEV
   IF POSIT EQ POS(LOCALSCR.STREQ(I)) THEN
    CURRSCR := I
    ESCAPE BOTTOM
   END-IF
  END-FOR
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1'
    INCLUDE CCHELP '235'
   VALUE 'PF2'
    PERFORM CHECK_SCREEN ;
    IF CURRSCR EQ 1 THRU 10 THEN
     IF LOCALSCR.SHORT(CURRSCR) NE ' ' THEN
      RESET STEDITP ;
      STEDITP.OG_ID := PARSTBS.OG_ID ;
      STEDITP.SHORT := LOCALSCR.SHORT(CURRSCR) ;
      PERFORM SPSTLSED STEDITP PRMNAV ;
      IF NOT STEDITP.RESULT OR STEDITP.RESULT_ID EQ 1 THRU MAXERRMSG THEN
       K := STEDITP.RESULT_ID
       INCLUDE CCMSG 'STATMSGL(K)'
       ESCAPE TOP
      END-IF
     END-IF
    END-IF
   VALUE 'PF3'
    IF CHANGE THEN
     SET CONTROL 'N'
     INCLUDE INPPC '"STM1"' '"MAPSEDM1"'
     CALLNAT 'SBATCHNG' CHANGE ;
    END-IF
    IF NOT CHANGE THEN
      ESCAPE BOTTOM
    END-IF
   VALUE 'PF4'
    IF CURRSCR EQ 1 THRU 10 THEN
     IF LOCALSCR.SHORT(CURRSCR) NE ' ' THEN
      EDITONLY(*) := LOCALSCR.CODEONLY(CURRSCR,*)
      COMPRESS CURRSCR 'уровень.' TO INFOLEV
      ONSTART := 1
      RESET MESSAGE;
      RESET ERRORID;
      REPEAT
       SET CONTROL 'N'
       INCLUDE INPPC '"STM2"' '"MAPMAND7"'
       IF ERRORID EQ 0 THEN
         RESET SCRCODE(*) ;
         FOR I = 1 TO 10
          K := ONSTART + I - 1
          IF K > 30 THEN ESCAPE BOTTOM END-IF
          SCRCODE(I) := EDITONLY(K)
         END-FOR
       END-IF
       SET WINDOW 'MAPSEDM2WIN'
       IF #OPSYS NE 'W'
       INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT2 USING MAP 'MAPSEDM2'
       ELSE
       INPUT WITH TEXT MESSAGE(CD=RE) MARK POSIT2 USING MAP 'STM3'
       END-IF
       POSIT2 := *CURS-FIELD
       SET WINDOW OFF
       RESET MESSAGE ;
       RESET ERRORID;
       ONCURR := 0
       FOR I = 1 TO 10
        IF POSIT2 EQ POS(SCRCODE(I)) THEN
         ONCURR := I
         ESCAPE BOTTOM
        END-IF
       END-FOR
       DECIDE ON FIRST VALUE *PF-KEY
        VALUE 'PF2'
         RESET EDITONLY(*) ;
        VALUE 'PF3'
         ESCAPE BOTTOM
        VALUE 'PF5'
         PERFORM CHECK_ONLY_SCREEN ;
         IF ERRORID NE 0 THEN ESCAPE TOP END-IF
         LOCALSCR.CODEONLY(CURRSCR,*) := EDITONLY(*)
         CHANGE := TRUE
        VALUE 'PF7'
         PERFORM CHECK_ONLY_SCREEN ;
*         WRITE '='ERRORID 'PF7'
         IF ERRORID NE 0 THEN ESCAPE TOP END-IF
         ONSTART := ONSTART - 10
         IF ONSTART < 1 THEN ONSTART := 1 END-IF
        VALUE 'PF8'
         PERFORM CHECK_ONLY_SCREEN ;
         IF ERRORID NE 0 THEN ESCAPE TOP END-IF
         ONSTART := ONSTART + 10
         IF ONSTART > 21 THEN ONSTART := 21 END-IF
        VALUE 'PF9'
         PERFORM CHECK_ONLY_SCREEN ;
         IF ERRORID NE 0 THEN ESCAPE TOP END-IF
         ONSTART := 1
        VALUE 'PF10'
         PERFORM CHECK_ONLY_SCREEN ;
         IF ERRORID NE 0 THEN ESCAPE TOP END-IF
         ONSTART := 21
        VALUE 'PF11'
         IF CURRSCR EQ 1 THRU 10 THEN
          IF LOCALSCR.SHORT(CURRSCR) NE ' ' THEN
           IF ONCURR EQ 1 THRU 10 THEN
            SET CONTROL 'N'
            INCLUDE INPPC '"STM1"' '"MAPSEDM1"'
            SET CONTROL 'N'
            INCLUDE INPPC '"STM4"' '"MAPSEDM3"'
            RESET SELSCPAR ;
            SELSCPAR.SEL_OG    := PARSTBS.OG_ID ;
            SELSCPAR.SEL_SHORT := LOCALSCR.SHORT(CURRSCR)
            CALLNAT 'SELECTSC' SELSCPAR MAX-NS
            IF SELSCPAR.SEL_CODE NE 0 THEN
             K := ONSTART + ONCURR - 1
             EDITONLY(K) := SELSCPAR.SEL_CODE ;
            END-IF
           END-IF
          END-IF
         END-IF
        NONE VALUE PERFORM CHECK_ONLY_SCREEN ;
       END-DECIDE
       SET CONTROL 'N'
     INCLUDE INPPC '"STM1"' '"MAPSEDM1"'
      END-REPEAT
     END-IF
    END-IF
   VALUE 'PF5'
    PERFORM CHECK_SCREEN ;
    FOR I = 1 TO INFO.NUMLEV
     IF LOCALSCR.SHORT(I) EQ ' ' THEN
      REINPUT FULL WITH TEXT
      "ѕ≈–≈ƒ —ќ’–јЌ≈Ќ»≈ћ Ќјƒќ ќѕ–≈ƒ≈Ћ»“№ ¬—≈ «јя¬Ћ≈ЌЌџ≈ ”–ќ¬Ќ»."(CD=RE)
      MARK *LOCALSCR.STREQ(I) ALARM
     END-IF
    END-FOR
    KEYBS.KEY_OG := PARSTBS.OG_ID
    KEYBS.KEY_BS := INFO.BSBS
S.  FIND VIEW_BS OG-BS EQ KEYBS WHERE VIEW_BS.SS-ID EQ INFO.SSSS
     RESET VIEW_BS.BL-F(*)
     RESET VIEW_BS.ST-F(*)
     RESET VIEW_BS.NS-F(*,*)
     K := INFO.NUMLEV
     VIEW_BS.BL-F(1:K) := LOCALSCR.STREQ(1:K)
     VIEW_BS.ST-F(1:K) := LOCALSCR.SHORT(1:K)
     VIEW_BS.NS-F(1:K,1:30) := LOCALSCR.CODEONLY(1:K,1:30)
     UPDATE(S.)                  /* перезаписать данные дл  орг.-ии пользовател  1000
     MOVE BY NAME VIEW_BS TO ADVBSPRM
     PERFORM ADDVBS '5' ADVBSPRM /* перезапись дл  остальных орг.-ций пользователей
    END-FIND
    END OF TRANSACTION
    PERFORM LOAD_DATA ;
    CHANGE := FALSE
   VALUE 'PF6'
*   WRITE '='CHANGE 'PF6'
    IF CHANGE THEN
     SET CONTROL 'N'
       INPUT USING MAP 'MAPSEDM1' ;
     CALLNAT 'SBATCHNG' CHANGE ;
    END-IF
    IF NOT CHANGE THEN
      PERFORM LOAD_DATA;
    END-IF
   VALUE 'PF8'
    IF CURRSCR EQ 1 THRU 10 THEN
     CHANGE := TRUE
     RESET LOCALSCR(CURRSCR) ;
    END-IF
   VALUE 'PF11'
    IF CURRSCR EQ 1 THRU 10 THEN
     RESET SELSTPAR ;
     SELSTPAR.SEL_OG := PARSTBS.OG_ID
     CALLNAT 'SELECTST' SELSTPAR MAX-NS ;
     IF SELSTPAR.SEL_SHORT NE ' ' THEN
      IF LOCALSCR.SHORT(CURRSCR) NE SELSTPAR.SEL_SHORT OR
         LOCALSCR.NAME(CURRSCR)  NE SELSTPAR.SEL_NM THEN
       CHANGE := TRUE
      END-IF
      LOCALSCR.SHORT(CURRSCR) := SELSTPAR.SEL_SHORT
      LOCALSCR.NAME(CURRSCR)  := SELSTPAR.SEL_NM
     END-IF
    END-IF
   NONE VALUE PERFORM CHECK_SCREEN ;
  END-DECIDE
 END-REPEAT
 IF PARSTBS.RESULT_ID EQ 2 THEN
  INCLUDE CCSETER 'PARSTBS' 'TRUE' '0' ;
 END-IF
/*************************************************
 DEFINE SUBROUTINE LOAD_DATA
  KEYBS.KEY_OG := KEYSS.KEY_OG := PARSTBS.OG_ID ;
  KEYBS.KEY_BS := PARSTBS.BS_ID
  KEYSS.KEY_SS := PARSTBS.SS_ID
  DECIDE FOR FIRST CONDITION
   WHEN PARSTBS.BS_ID NE 0 AND PARSTBS.SS_ID NE 0
    FIND VIEW_BS OG-BS EQ KEYBS AND OG-SS EQ KEYSS
     PERFORM LOAD_DATA_FROM_FILE ;
    END-FIND
   WHEN PARSTBS.BS_ID EQ 0 AND PARSTBS.SS_ID NE 0
    FIND VIEW_BS OG-SS EQ KEYSS
     PERFORM LOAD_DATA_FROM_FILE ;
    END-FIND
   WHEN PARSTBS.BS_ID NE 0 AND PARSTBS.SS_ID EQ 0
    FIND VIEW_BS OG-BS EQ KEYBS WHERE VIEW_BS.SS-ID EQ 0
     PERFORM LOAD_DATA_FROM_FILE ;
    END-FIND
   WHEN NONE
    INCLUDE CCSETER 'PARSTBS' 'FALSE' '5' ;
    ESCAPE ROUTINE
  END-DECIDE
  COMPRESS '"' INFO.NAMEBS '"' TO INFO.NAMEBS
  CALLNAT 'SBCNTR60' INFO.NAMEBS
  CHANGE := FALSE
 END-SUBROUTINE
/*************************************************
 DEFINE SUBROUTINE LOAD_DATA_FROM_FILE
  INFO.NUMLEV := VIEW_BS.CS-NN
  INFO.NAMEBS := VIEW_BS.NM-BS
  INFO.BSBS   := VIEW_BS.BS-ID
  INFO.SSSS   := VIEW_BS.SS-ID
  IF INFO.SSSS NE 0 ASSIGN INFO.TT  = '—/сч' ELSE RESET INFO.TT END-IF
  RESET LOCALSCR(*);
  K := VIEW_BS.C*GS-F
  FOR I = 1 TO K
   LOCALSCR.STREQ(I) := VIEW_BS.BL-F(I)
   LOCALSCR.SHORT(I) := VIEW_BS.ST-F(I)
   J := VIEW_BS.C*NS-F(I)
   IF J > 0 THEN
    LOCALSCR.CODEONLY(I,1:J) := VIEW_BS.NS-F(I,1:J)
   END-IF
  END-FOR
 END-SUBROUTINE
/*************************************************
 DEFINE SUBROUTINE CHECK_SCREEN
  FOR I = 1 TO INFO.NUMLEV
   IF LOCALSCR.STREQ(I) NE ' ' THEN LOCALSCR.STREQ(I) := 'X' END-IF
   IF LOCALSCR.STREQ(I) NE ' ' AND
    LOCALSCR.SHORT(I) EQ ' ' THEN
     REINPUT FULL WITH TEXT "” ј∆»“≈ ѕќƒ—“ј“№ё ƒЋя Ё“ќ√ќ ”–ќ¬Ќя."(CD=RE)
     MARK *LOCALSCR.STREQ(I) ALARM
   END-IF
   IF PARCOMM.NULL EQ ' ' THEN
    IF LOCALSCR.SHORT(I) EQ ' ' THEN
     REINPUT FULL WITH TEXT
     "¬ —ќќ“¬≈“—“¬»» — Ќј—“–ќ… ќ… ѕ”—“џ≈ ѕќƒ—“ј“№» «јѕ–≈ў≈Ќџ."(CD=RE)
     MARK *LOCALSCR.STREQ(I) ALARM
    END-IF
    LOCALSCR.STREQ(I) := 'X'
   END-IF
  END-FOR
  K := INFO.NUMLEV + 1
  IF K <= 10 THEN
   RESET LOCALSCR(K:10) ;
   LOCALSCR.ATTR(K:10) := (AD=NP)
  END-IF
 END-SUBROUTINE
/*************************************************
 DEFINE SUBROUTINE CHECK_ONLY_SCREEN
  FOR I = 1 TO 10
   IF SCRCODE(I) EQ 0 THEN ESCAPE TOP END-IF
   K := ONSTART + I - 1
   FOR J = 1 TO 30
    IF J EQ K THEN ESCAPE TOP END-IF
    IF SCRCODE(I) EQ EDITONLY(J) THEN
     POSIT := POS(SCRCODE(I))
     MESSAGE := '“акое значение уже введено.'
     ERRORID := 777
*     WRITE '777'
     ESCAPE ROUTINE
    END-IF
   END-FOR
   KEYSTTM.KEYOG := PARSTBS.OG_ID
   KEYSTTM.KEYST := LOCALSCR.SHORT(CURRSCR)
   KEYSTTM.KEYCD := SCRCODE(I)
C. FIND NUMBER VIEWSTAT OG-ST EQ KEYSTTM
   IF *NUMBER(C.) < 1 THEN
    POSIT := POS(SCRCODE(I))
    MESSAGE := '“акого значени  у подстатьи нет.'
    ERRORID := 777
*    WRITE '888'
    ESCAPE ROUTINE
   END-IF
  END-FOR
  FOR I = 1 TO 10
   K := ONSTART + I - 1
   EDITONLY(K) := SCRCODE(I)
  END-FOR
  FOR I = 1 TO 30
   IF EDITONLY(I) EQ 0 THEN
    K := I + 1
    FOR J = K TO 30
     IF EDITONLY(J) NE 0 THEN
      EDITONLY(I) := EDITONLY(J);
      RESET EDITONLY(J) ;
      ESCAPE BOTTOM ;
     END-IF
    END-FOR
   END-IF
  END-FOR
 END-SUBROUTINE
/*************************************************
END-SUBROUTINE
END
