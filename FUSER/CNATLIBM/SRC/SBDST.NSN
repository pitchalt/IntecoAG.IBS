* >Natural Source Header 000000 /*<RO>>
* :NatName SBDST
* :UID NAT22605
* :Mode S
* :CP
* :Date 20040602
* :Time 1423330
* <Natural Source Header /*<<RO>
***************************
* ¬≈ƒ≈Õ»≈ —»—“≈Ã€ ƒŒ—“”œ¿ *
***************************
DEFINE DATA
* GLOBAL USING UFROG
PARAMETER
  1 #OG-IDENT-G  (N0005)
  1 #PSW         (A0008)
  1 FL-ZGR       (N0001)
PARAMETER USING PRMNAVI
  LOCAL USING LCLSYS
  LOCAL USING LCLBSL
  LOCAL USING LCLFROL1
  LOCAL USING LCLFROL2
  LOCAL USING PRMHELP
  LOCAL
  1 SELFUN(A60) INIT<'*** ¬Â‰ÂÌËÂ ÒËÒÚÂÏ˚ ‰ÓÒÚÛÔ‡ ***'>
  1 SELREG(A40)
  1 #NAME        (A0040)
  1 I            (N0007)
  1 J            (N0007)
  1 N-DAT-B      (B0004)  INIT <15>
  1 N-DAT-M      (B0004)  INIT <16>
  1 N-DAT-SS     (B0004)  INIT <17>
  1 N-DAT-PS     (B0004)  INIT <18>
  1 N-DATA-DSS   (B0004)  INIT <21>
  1 N-DATA-PL    (B0004)  INIT <10>
  1 INP-REC      (A16/10)
  1 REDEFINE INP-REC
    2 #INP-REC   (10)
      3 #PS      (A0008)
      3 #PR      (A0001)
      3 #FLM     (A0001)
      3 BSS      (A0001)
      3 RGM      (A0001)
      3 #BCH     (P0007)
 1 SLINE        (A0016)
  1 REDEFINE SLINE
    2 LINE       (A12)
    2 REDEFINE LINE
      3 SPSW     (A0008)
      3 SPR      (A0001)
      3 SFLM     (A0001)
      3 NBSS     (A0001)
      3 NRGM     (A0001)
    2 SISN       (P0007)
  1 SLINE1       (A0041)
  1 REDEFINE SLINE1
    2 #SPSW      (A0008)
    2 #SNRM      (A0003)
    2 #SNBF      (A0030)
    2 REDEFINE #SNBF
      3 #SL-MAS  (A1/30)
  1 #NM-MENU     (A0040)
  1 STEK-REC     (A0044)
  1 REDEFINE STEK-REC
    2 FILLER     1X
    2 STEK-NB    (A0042)
  1 REDEFINE STEK-REC
    2 STEK-NRM   (A0003)
    2 STEK-NBF   (A0040)
    2 STEK-SL    (A0001)
  1 INPUT-REC    (A44/10)
  1 REDEFINE INPUT-REC
    2 INPT-REC   (10)
      3 #NR-MEN  (A0003)
      3 #NM-REG  (A0040)
      3 #SL      (A0001)
  1 #SL-C        (C/10)   INIT ALL <(AD=PN)>
  1 #SS-C        (C/13)   INIT ALL <(AD=PN)>
  1 #PSW-GP      (N0005)
  1 #TXT-PF2     (A0004)  INIT <'—ÎÂ‰'>
  1 K            (N0007)
  1 DL-MENU      (N2/30)
  1 KL-MENU      (N0002)
  1 C-DAT        (N0003)
  1 PSW-NRM      (A0011)
  1 REDEFINE PSW-NRM
    2 TEK-PSW    (A0008)
    2 TEK-NRM    (A0003)
  1 NUMB         (N0002)
  1 #KK-F        (A0002)
  1 SSW          (P0005)
  1 SSW1         (P0005)
  1 SSW2         (P0005)
  1 SSW3         (P0005)
  1 TTT          (A0040)
  1 #TEXT        (A0050)
  1 S            (N0002)
  1 REL          (N0003)
  1 TEKCT        (A0050)
  1 II           (I0004)
  1 III          (I0004)
  1 INPUT1       (A46/13)
  1 REDEFINE INPUT1
    2 INPT-R     (13)
      3 PLN-SS   (N0005)
      3 NM-SS    (A0040)
      3 #SS      (A0001)
  1 SH-SS        (N0004)
  1 SH-PSS       (N0004)
  1 LINE-PSS     (A0018)
  1 REDEFINE LINE-PSS
    2 LINE-PS    (A0008)
    2 LINE-SS    (N0005)  2 REDEFINE LINE-SS 3 LINE-S  (A5)
    2 LINE-I     (N0005)
  1 PROBEL       (A0008)
  1 MAX-M        (P0007)
  1 MAX-SS       (P0007)
  1 #PSOLD       (A0008)
  1 PAROL        (A0008)
END-DEFINE
DEFINE WINDOW WIN1
  SIZE 20 * 55
  BASE 02 / 12
  TITLE 'ƒÓÒÚÛÔ Í ËÌÙÓÏ‡ˆËË'
  CONTROL SCREEN
  FRAMED ON POSITION OFF
DEFINE WINDOW WIN2
  !0.SIZE C-DUBL * L-KEY
  BASE T-KEY  / F-MARK
  TITLE #TEXT
  CONTROL SCREEN
  FRAMED ON POSITION OFF
SET KEY PF1 PF2 PF4 PF3 PF5 PF7 PF8 PF10 PF12
*
   F-LINE := 13
   FIND NUMBER IBS-SYS1-FILE KK-F = 'M1' THRU 'M4'
   ASSIGN KL-MENU = *NUMBER(!0)
*
   N-DATA-B := 100  CALL 'GTNX' N-DATA-B
   ASSIGN N-DEL-B = 14
   ASSIGN L-DATA-B = 4      MOVE 50 TO Q-DATA-B Q-DEL
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DEL-B
   ASSIGN L-DATA-B = 16     MOVE 150 TO Q-DATA-B Q-DATA
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-B
   ASSIGN L-DATA-B = 41     MOVE 1000 TO Q-DATA-B L-DEL
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DAT-B
   ASSIGN L-DATA-B = 18     MOVE 5000 TO Q-DATA-B L-DATA
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DAT-PS
   !1.FOR I 1 9
     COMPRESS 'M' I TO #KK-F LEAVING NO
     FIND IBS-SYS1-FILE KK-F = #KK-F
       DL-MENU(I) := C*NB-F
     END-FIND
   !2.END-FOR
*
   RESET REL
   FIND IBS-SYS1-FILE OG-ID = #OG-IDENT-G AND KK-F = 'PR'
     ASSIGN LINE = NA-F(!1)
     IF SPSW = #PSW AND SFLM = 'R'  REL := 1  END-IF
   END-FIND
*
   FIND IBS-SYS1-FILE KK-F = 'PR' AND OG-ID = #OG-IDENT-G
     ASSIGN LINE = NA-F(!2) ASSIGN SISN = *ISN(!2)
     IF REL = 0 AND SFLM = 'R'  ESCAPE TOP  END-IF
     IF SFLM = 'R' SPR := '+'  END-IF
     IF C*NB-F NE 0
       ASSIGN #SPSW = SPSW
       FOR I 1 C*NB-F
         ASSIGN #SNBF = NB-F(I)
         J := DL-MENU(I)  #SL-MAS(J+1:30) := '-'
         COMPRESS 'M' I INTO #SNRM LEAVING NO
         ADD 1 TO C-DAT    ASSIGN C-DATA-B = C-DAT
         IF C-DAT > L-DEL  C-DAT := C-DAT - 1
         ESCAPE BOTTOM(!2) END-IF
         CALL 'RWSX' C-DATA-B SLINE1 WR-REC N-DAT-B
       END-FOR
     END-IF
     ADD 1 TO C-DATA     ASSIGN C-DATA-B = C-DATA
     IF C-DATA > Q-DATA  C-DATA := C-DATA - 1
     ESCAPE BOTTOM(!2) END-IF
     CALL 'RWSX' C-DATA-B SLINE WR-REC N-DATA-B
     FIND IBS-SYS1-FILE OG-ID = #OG-IDENT-G AND KK-F = 'SS'
       AND KD-F = KD-F(!2)
       RESET LINE-I NBSS    LINE-PS := SPSW
       FOR I 1 C*NB-F
         IF NB-F(I) IS (N5) COMPUTE LINE-SS = VAL(NB-F(I)) END-IF
         ADD 1 TO SH-PSS   C-DATA-B := SH-PSS
         IF SH-PSS > L-DATA
           SH-PSS := SH-PSS - 1  ESCAPE BOTTOM(!2)
         END-IF
         CALL 'RWSX' C-DATA-B LINE-PSS WR-REC N-DAT-PS
       !3.END-FOR
     END-FIND
   END-FIND
   ASSIGN L-DATA-B = 44   MOVE 150 TO Q-DATA-B MAX-M
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DAT-M
   ASSIGN L-DATA-B = 46   MOVE 1000 TO Q-DATA-B MAX-SS
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DAT-SS
*
   FIND IBS-BS-FILE OG-ID = #OG-IDENT-G
     ACCEPT IF SS-ID NE 0
     PLN-SS(1) := SS-ID
     NM-SS(1)  := NM-BS
     #SS(1)    := '-'
     ADD 1 TO SH-SS   C-DATA-B := SH-SS
     IF SH-SS > MAX-SS  SH-SS := SH-SS - 1  ESCAPE BOTTOM(!3)  END-IF
     CALL 'RWSX' C-DATA-B INPUT1(1) WR-REC N-DAT-SS
   END-FIND
   Q-DEL-B := 1   L-DEL-B := 5
   CALL 'SRTX' Q-DEL-B L-DEL-B N-DAT-SS
*
MOVE ALL '.' TO TTT
Q-LINE := 10
SSW3 := 1
REPEAT
  SET WINDOW 'WIN1'
  PERFORM LOAD-EKRAN
  INPUT  MARK II  USING MAP 'MAPDSTM1'
  II := *CURS-FIELD
  FOR C-CURS 1 Q-LINE
    IF II = POS(#PS(C-CURS)) OR = POS(#PR(C-CURS))
       RESET P-CURS  ESCAPE BOTTOM
    END-IF
    IF II = POS(BSS(C-CURS))  P-CURS := 1  ESCAPE BOTTOM  END-IF
    IF II = POS(RGM(C-CURS))  P-CURS := 2  ESCAPE BOTTOM  END-IF
  END-FOR
  DECIDE FOR EVERY CONDITION
    WHEN *PF-KEY = 'PF3'
      ESCAPE BOTTOM
    WHEN *PF-KEY = 'PF1' AND P-CURS = 0
      SET WINDOW OFF
      IF #FLM(C-CURS) = 'R'
        INCLUDE CCHELP '49'
       ELSE
        INCLUDE CCHELP '50'
      END-IF
      ESCAPE TOP
    WHEN *PF-KEY = 'PF1' AND #PS(C-CURS) NE ' '
      IF P-CURS = 1
        C-DEL-B := 1  L-DEL-B := 8
        CALL 'CMPXF' #PS(C-CURS) C-DEL-B L-DEL-B N-DAT-PS
        IF C-DEL-B NE 0
          PERFORM PROC-SCREEN-DS
         ELSE
          REINPUT 'ƒŒœ”—“»Ã€≈ ¡/—◊ ƒÀﬂ œ¿–ŒÀﬂ:1:Õ≈ Œœ–≈ƒ≈À≈Õ€',
            #PS(C-CURS) MARK *BSS(C-CURS) ALARM
        END-IF  ESCAPE TOP
      END-IF
      IF P-CURS = 2  SET CONTROL 'K12'  END-IF
    WHEN *PF-KEY NE 'PF3'
      PERFORM PROC-SCAN
    WHEN *PF-KEY = 'PF2' AND #FLM(C-CURS) = 'R'
      SET WINDOW OFF
      CALLNAT 'SBNAMEN1' #OG-IDENT-G FL-ZGR PRMNAV
      INCLUDE CCRFUNNM
    WHEN *PF-KEY = 'PF4' AND #PS(C-CURS) NE ' '
      COMPRESS '»ÏÔÓÚ ‰Î  Ô‡ÓÎ ' #PS(C-CURS) TO #TEXT
      C-DUBL := 11  L-KEY := 35 T-KEY := 05  F-MARK := 18
      SET WINDOW 'WIN2'  RESET #SS(*)
      INPUT USING MAP 'MAPDSTM2'
      IF *PF-KEY = 'PF3' ESCAPE TOP  END-IF
      IF *PF-KEY = 'ENTR'
         IF *CURS-FIELD = POS(#SS(1)) Q-FIELD := 1  END-IF
         IF *CURS-FIELD = POS(#SS(2)) Q-FIELD := 2  END-IF
         IF *CURS-FIELD = POS(#SS(3)) Q-FIELD := 3  END-IF
         C-DUBL := 20  L-KEY := 28 T-KEY := 03  F-MARK := 18
         SET WINDOW 'WIN2'  PAROL := #PS(C-CURS)  SSW1 := 1
         REPEAT
           PERFORM LOAD-EKRAN1  RESET #PR(*)
           INPUT USING MAP 'MAPDSTM3'
           IF *PF-KEY = 'PF3'  ESCAPE BOTTOM  END-IF
           IF *PF-KEY = 'ENTR'
             FOR B-FIELD 1 Q-LINE
               IF *CURS-FIELD = POS(#PR(B-FIELD)) ESCAPE BOTTOM END-IF
             END-FOR
             IF Q-FIELD = 1 PERFORM PROC-IMP-MENU  END-IF
             IF Q-FIELD = 2 PERFORM PROC-IMP-DBSL  END-IF
             IF Q-FIELD = 3
                PERFORM PROC-IMP-MENU  PERFORM PROC-IMP-DBSL
             END-IF
             REINPUT '»ÃœŒ–“ »«:1:«¿¬≈–ÿ≈Õ',#PS(B-FIELD)
              MARK *#PR(B-FIELD)
           END-IF
           IF *PF-KEY = 'PF7'
             IF SSW1 > Q-LINE  SSW1 := SSW1 - Q-LINE  END-IF
           END-IF
           IF *PF-KEY = 'PF8'
             IF SSW > C-DATA IGNORE ELSE  SSW1 := SSW1 + Q-LINE END-IF
           END-IF
         END-REPEAT
      END-IF
    WHEN *PF-KEY = 'ENTR' AND #PS(C-CURS) NE ' ' AND P-CURS = 1
      COMPRESS 'ƒÓÒÚÛÔ Í ·‡Î‡ÌÒÓ‚˚Ï Ò/Ò Ò Ô‡ÓÎÂÏ' #PS(C-CURS) TO #TEXT
      C-DUBL := 20  L-KEY := 55 T-KEY := 03  F-MARK := 12
      SET WINDOW 'WIN2'
      LINE-PS := #PS(C-CURS) PERFORM PROC-BSL
    WHEN *PF-KEY = 'ENTR' AND #PS(C-CURS) NE ' ' AND P-CURS = 2
      COMPRESS 'ƒÓÒÚÛÔ Í ÂÊËÏ‡Ï ÏÂÌ˛ Ò Ô‡ÓÎÂÏ' #PS(C-CURS) TO #TEXT
      C-DUBL := 20  L-KEY := 55 T-KEY := 03  F-MARK := 12
      SET WINDOW 'WIN2'
      PERFORM PROC-REGIM
      SET CONTROL 'K0'
    WHEN *PF-KEY = 'PF5'  PERFORM PROC-UPD ESCAPE BOTTOM
    WHEN *PF-KEY = 'PF7'  RESET II
      IF SSW3 > Q-LINE  SSW3 := SSW3 - Q-LINE ELSE SSW3 := 1 END-IF
    WHEN *PF-KEY = 'PF8'  RESET II
      REL  := SSW3 + Q-LINE - 1
      IF REL <= C-DATA   SSW3 := REL + 1  END-IF
    WHEN NONE IGNORE
  END-DECIDE
END-REPEAT
*
 CALL 'FRSX' N-DATA-B   CALL 'FRSX' N-DEL-B   CALL 'FRSX' N-DAT-PS
 CALL 'FRSX' N-DAT-B    CALL 'FRSX' N-DAT-M   CALL 'FRSX' N-DAT-SS
 SET WINDOW OFF
*
DEFINE SUBROUTINE LOAD-EKRAN1
  RESET INP-REC(*)  RESET INITIAL #SL-C(*)
  SSW := SSW1
  FOR C-LINE 1 Q-LINE
    IF SSW > C-DATA ESCAPE BOTTOM END-IF
    ASSIGN C-DATA1-B = SSW
    CALL 'RWSX' C-DATA1-B INP-REC(C-LINE) RD-REC N-DATA-B
    IF PAROL NE ' ' AND PAROL NE #PS(C-LINE)
      MOVE (AD=I) TO #SL-C(C-LINE)
    END-IF
    ADD 1 TO SSW
  END-FOR
END-SUBROUTINE
*
DEFINE SUBROUTINE LOAD-EKRAN
  RESET INP-REC(*) #BCH(*)
  SSW2 := SSW3
  FOR C-LINE 1 Q-LINE
    IF SSW2 > C-DATA ESCAPE BOTTOM END-IF
    ASSIGN C-DATA1-B = SSW2
    CALL 'RWSX' C-DATA1-B INP-REC(C-LINE) RD-REC N-DATA-B
    C-DEL-B := 1  L-DEL-B := 8
    CALL 'CMPXF' #PS(C-LINE) C-DEL-B L-DEL-B N-DAT-PS
    IF C-DEL-B NE 0 BSS(C-LINE) := '*' ELSE RESET BSS(C-LINE)END-IF
    ADD 1 TO SSW2
  END-FOR
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-SCAN
   ASSIGN S = 1   RESET C-DATA2
   ASSIGN SSW2 = SSW3
   ASSIGN C-DATA-B = SSW2
   REPEAT UNTIL S > Q-LINE
     IF #PS(S) NE ' ' AND #PS(S) NE H'FF'             /* —“–Œ ¿ Õ≈ ”ƒ¿À≈Õ¿
       IF SSW2 > Q-DATA
          REINPUT '”ƒ¿À»“≈ œ¿–ŒÀ‹ ¬ œŒ«»÷»»  ”–—Œ–¿ - Ã¿ÀŒ œ¿Ãﬂ“».'
           MARK *#PS(S) ALARM
       END-IF
       C-DEL-B := 1  L-DEL-B := 8
       CALL 'RWSX' C-DATA-B #PSOLD RD-REC N-DATA-B C-DEL-B L-DEL-B
       IF #PS(S) NE H'FF'  PERFORM PROC-CHECK  END-IF
       IF SSW2 > C-DATA  C-DATA := SSW2  END-IF
       IF #PSOLD NE #PS(S) AND #PS(S) NE ' ' AND #PSOLD NE ' '
         C-DATA2-B := 1   L-DATA-B := 8
         CALL 'CMPXF' #PSOLD C-DATA2-B L-DATA-B N-DAT-B
         IF C-DATA2-B NE 0  K := C-DATA2-B
           REPEAT
             CALL 'RWSX' C-DATA2-B SLINE1 RD-REC N-DAT-B
             IF #PSOLD = #SPSW  #SPSW := #PS(S)
               CALL 'RWSX' C-DATA2-B SLINE1 WR-REC N-DAT-B
              ELSE ESCAPE BOTTOM
             END-IF
             ADD 1 TO K  C-DATA2-B := K
           END-REPEAT
         END-IF
       END-IF
       ASSIGN C-DATA2-B = 1   ASSIGN L-DATA-B = 8
       CALL 'CMPXF' #PS(S) C-DATA2-B L-DATA-B N-DAT-B
       IF C-DATA2-B = 0
         ASSIGN #SPSW = #PS(S)
         ASSIGN #SL-MAS(*) = '-'
         FOR K 1 KL-MENU
           ADD 1 TO C-DAT  ASSIGN C-DATA2-B = C-DAT
           COMPRESS 'M' K INTO #SNRM LEAVING NO
           CALL 'RWSX' C-DATA2-B SLINE1 WR-REC N-DAT-B
         END-FOR
       END-IF
      CALL 'RWSX' C-DATA-B INP-REC(S) WR-REC N-DATA-B
    ELSE
     IF S > C-DATA
       IF #PS(S:Q-LINE) NE ' ' IGNORE ELSE ESCAPE BOTTOM END-IF
     END-IF
     ASSIGN #PS(S) = H'FF'  ADD 1 TO C-DATA2
     IF #BCH(S) NE 0
        ADD 1 TO C-DEL
        IF C-DEL > Q-DEL
           C-DEL := C-DEL - 1  /* ESCAPE BOTTOM
        END-IF
        ASSIGN C-DATA2-B = C-DEL
        CALL 'RWSX' C-DATA2-B #BCH(S) WR-REC N-DEL-B
        RESET #BCH(S)
     END-IF
      CALL 'RWSX' C-DATA-B INP-REC(S) WR-REC N-DATA-B
    END-IF
     COMPUTE SSW2 = SSW2 + 1   ASSIGN C-DATA-B = SSW2
     COMPUTE S = S + 1
   END-REPEAT
   IF C-DATA2 NE 0
     ASSIGN C-DATA1-B = 1   ASSIGN L-DATA-B = 1
     CALL 'PRSX' C-DATA1-B L-DATA-B N-DATA-B
     C-DATA1-B := 1   L-DATA-B := 1
     CALL 'CMPXF' ' ' C-DATA1-B L-DATA-B N-DATA-B
     C-DATA := C-DATA1-B
     COMPUTE C-DATA = C-DATA - 1
   END-IF
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-CHECK
  ASSIGN C-DATA1-B = 1   ASSIGN L-DATA-B = 8
  CALL 'CMPXF' #PS(S) C-DATA1-B L-DATA-B N-DATA-B
  IF C-DATA1-B NE 0 AND C-DATA1-B < SSW2
     REINPUT 'ƒÛ·ÎËÓ‚‡ÌËÂ Ô‡ÓÎ ' MARK *#PS(S) ALARM
  END-IF
  IF NOT(#PR(S) = 'U' OR = '+' OR = 'R' OR = ' ')
    REINPUT 'ƒÓÔÛÒÚËÏ˚Â ÁÌ‡˜ÂÌË  ÔÓÎ  ''+'' ËÎË '' '''
       MARK *#PR(S) ALARM
  END-IF
  IF #PR(S) = 'R'  #FLM(S) := 'R'  #PR(S) := '+'   END-IF
  IF #PR(S) = 'U'
    IF #FLM(S) = 'R'
      #PR(S) := '+'  RESET #FLM(S)  ELSE
      RESET #PR(S)
    END-IF
  END-IF
*  IF #PR(S) = ' ' AND #FLM(S) = 'R' #PR(S) := '+' END-IF
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-REGIM
  ASSIGN NUMB = 1   ASSIGN TEK-PSW = #PS(C-CURS)
  REPEAT UNTIL NUMB > KL-MENU
    CALL 'NULX' ' ' N-DAT-M   RESET C-DATA1
    COMPRESS 'M' NUMB INTO #KK-F LEAVING NO
    ASSIGN TEK-NRM = #KK-F
    ASSIGN C-DATA-B = 1   ASSIGN L-DATA-B = 11
    CALL 'CMPXF' PSW-NRM C-DATA-B L-DATA-B N-DAT-B
    IF C-DATA-B NE 0
      CALL 'RWSX' C-DATA-B SLINE1 RD-REC N-DAT-B
     !4.ELSE
      ADD 1 TO C-DAT  ASSIGN C-DATA-B = C-DAT
      IF C-DAT > L-DEL  ESCAPE BOTTOM  END-IF
      ASSIGN #SPSW = TEK-PSW
      ASSIGN #SNRM = #KK-F
      ASSIGN #SL-MAS(*) = '-'
      CALL 'RWSX' C-DATA-B SLINE1 WR-REC N-DAT-B
    END-IF
    FIND IBS-SYS1-FILE  KK-F = #KK-F
     FOR J 1 C*NB-F
       ASSIGN STEK-NB  = NB-F(J)
       ASSIGN STEK-NRM = KK-F
       ASSIGN STEK-SL  = #SL-MAS(J)
       ADD 1 TO C-DATA1    ASSIGN C-DATA1-B = C-DATA1
       IF C-DATA1 > MAX-M
         C-DATA1 := C-DATA1 - 1 ESCAPE BOTTOM(!4)
       END-IF
       CALL 'RWSX' C-DATA1-B STEK-REC WR-REC N-DAT-M
     END-FOR
    END-FIND
    FIND IBS-SYS1-FILE KK-F = 'M0' AND KD-F = NUMB
      ASSIGN #NM-MENU = NA-F
    END-FIND
    PERFORM PROC-SCREEN
    CALL 'RWSX' C-DATA-B SLINE1 WR-REC N-DAT-B
    IF *PF-KEY = 'PF2'  ADD 1 TO NUMB ESCAPE TOP END-IF
    IF *PF-KEY = 'PF3'  ESCAPE BOTTOM  END-IF
  END-REPEAT
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-SCREEN
SSW1 := 1
REPEAT
  RESET INPUT-REC(*)  RESET INITIAL #SL-C(*)
  SSW := SSW1
  FOR C-LINE 1 Q-LINE
    IF SSW > C-DATA1 ESCAPE BOTTOM END-IF
    ASSIGN C-DATA1-B = SSW
    CALL 'RWSX' C-DATA1-B INPUT-REC(C-LINE) RD-REC N-DAT-M
    IF INPUT-REC(C-LINE) = ' '  ESCAPE BOTTOM  END-IF
    COMPRESS #NM-REG(C-LINE) TTT INTO #NM-REG(C-LINE)
    MOVE (AD=I) TO #SL-C(C-LINE)
    ADD 1 TO SSW
  END-FOR
*
 INPUT TEXT TEKCT MARK III USING MAP 'MAPTUPM3'
 III := *CURS-FIELD
 RESET TEKCT
 PERFORM PROC-KONTR
 DECIDE FOR EVERY CONDITION
   WHEN *PF-KEY = 'PF3' OR = 'PF2'
     ESCAPE BOTTOM
   WHEN *PF-KEY = 'PF7'  RESET III
     IF SSW1 > Q-LINE  SSW1 := SSW1 - Q-LINE  END-IF
   WHEN *PF-KEY = 'PF8'  RESET III
     IF SSW > C-DATA1 IGNORE ELSE  SSW1 := SSW1 + Q-LINE END-IF
   WHEN NONE IGNORE
 END-DECIDE
END-REPEAT
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-KONTR
   ASSIGN S = 1   RESET C-DATA2
   ASSIGN SSW = SSW1
   ASSIGN C-DATA1-B = SSW
   REPEAT UNTIL S > Q-LINE
     IF SSW > C-DATA1  ESCAPE BOTTOM  END-IF
     IF NOT (#SL(S) = '-' OR = '+') AND #NM-REG(S) NE ' '
       REINPUT 'ŒÚÏÂÚ¸ÚÂ ‰ÓÒÚÛÔ Í ÂÊËÏÛ ÁÌ‡ÍÓÏ ''+'' ËÎË ''-'''
         MARK *#SL(S) ALARM
     END-IF
     CALL 'RWSX' C-DATA1-B INPUT-REC(S) WR-REC N-DAT-M
     ASSIGN #SL-MAS(SSW) = #SL(S)
     COMPUTE SSW = SSW + 1   ASSIGN C-DATA1-B = SSW
     COMPUTE S = S + 1
   !5.END-REPEAT
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-UPD
  IF C-DEL NE 0
    FOR C-DATA2 1 C-DEL
      ASSIGN C-DATA-B = C-DATA2  RESET SISN
      CALL 'RWSX' C-DATA-B SISN RD-REC N-DEL-B
      GET IBS-SYS1-FILE SISN
      DELETE (!5)
    END-FOR
  END-IF
  !6.C-DATA-B := 1   L-DATA-B := 8  C-DEL-B := 9  L-DEL-B := 5
  CALL 'SRTX' C-DATA-B L-DATA-B C-DEL-B L-DEL-B N-DAT-PS
  C-DATA-B := 1   L-DATA-B := 8   Q-DEL-B := 9   L-DEL-B := 3
  CALL 'SRTX' C-DATA-B L-DATA-B Q-DEL-B L-DEL-B N-DAT-B
  FOR I 1 C-DATA
    ASSIGN C-DATA2-B = I
    CALL 'RWSX' C-DATA2-B SLINE RD-REC N-DATA-B
    IF SISN NE 0
      GET IBS-SYS1-FILE SISN
    END-IF
    ASSIGN IBS-SYS1-FILE.OG-ID = #OG-IDENT-G
    ASSIGN IBS-SYS1-FILE.KK-F  = 'PR'
    ASSIGN IBS-SYS1-FILE.KD-F  = I
    ASSIGN IBS-SYS1-FILE.NA-F  = LINE
    ASSIGN C-DATA-B = 1     ASSIGN L-DATA-B = 8
    CALL 'CMPXF' SPSW C-DATA-B L-DATA-B N-DAT-PS
    IF C-DATA-B NE 0
      CALL 'RWSX' C-DATA-B LINE-PSS RD-REC N-DAT-PS
      ASSIGN LINE-I = I
      CALL 'RWSX' C-DATA-B LINE-PSS WR-REC N-DAT-PS
    END-IF
    ASSIGN C-DATA-B = 1     ASSIGN L-DATA-B = 8
    CALL 'CMPXF' SPSW C-DATA-B L-DATA-B N-DAT-B
    IF C-DATA-B NE 0
       ASSIGN J = C-DATA-B  RESET REL
       REPEAT
         ASSIGN C-DATA-B = J
         CALL 'RWSX' C-DATA-B SLINE1 RD-REC N-DAT-B
         IF #SPSW NE SPSW ESCAPE BOTTOM END-IF
         ADD 1 TO REL  ADD 1 TO J
         ASSIGN IBS-SYS1-FILE.NB-F(REL) = #SNBF
       !7.END-REPEAT
    END-IF
    IF SISN NE 0
      UPDATE (!6)
     ELSE STORE IBS-SYS1-FILE
    END-IF
  END-FOR
  END OF TRANSACTION
  FIND IBS-SYS1-FILE OG-ID = #OG-IDENT-G AND KK-F = 'SS'
       AND KD-F = LINE-I
    DELETE (!7)
  END-FIND
  RESET  IBS-SYS1-FILE.NB-F(*) REL
  FOR I 1 SH-PSS
    ASSIGN C-DATA-B = I
    CALL 'RWSX' C-DATA-B LINE-PSS RD-REC N-DAT-PS
    IF LINE-I NE 0
      IF I > 1 AND IBS-SYS1-FILE.NB-F(1) NE ' '
        STORE IBS-SYS1-FILE
        RESET  IBS-SYS1-FILE.NB-F(*)  REL
      END-IF
      ASSIGN IBS-SYS1-FILE.KD-F  = LINE-I
      ASSIGN IBS-SYS1-FILE.OG-ID = #OG-IDENT-G
      ASSIGN IBS-SYS1-FILE.KK-F  = 'SS'
    END-IF
    ADD 1 TO REL
    ASSIGN IBS-SYS1-FILE.NB-F(REL) = LINE-S
    IF REL = 50
      STORE IBS-SYS1-FILE
      RESET IBS-SYS1-FILE.NB-F(*)  REL
    END-IF
  END-FOR
  IF REL NE 0
    STORE IBS-SYS1-FILE
    RESET IBS-SYS1-FILE.NB-F(*)  REL
  END-IF
  END OF TRANSACTION
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-BSL
SSW1 := 1
REPEAT
  RESET INPUT1(*)  RESET INITIAL #SS-C(*)
  SSW := SSW1
  FOR C-LINE 1 F-LINE
    IF SSW > SH-SS ESCAPE BOTTOM END-IF
    ASSIGN C-DATA1-B = SSW
    CALL 'RWSX' C-DATA1-B INPUT1(C-LINE) RD-REC N-DAT-SS
    IF INPUT1(C-LINE) = ' '  ESCAPE BOTTOM  END-IF
    ASSIGN LINE-SS = PLN-SS(C-LINE)
    C-DATA1-B := 1   L-DATA-B := 13
    CALL 'CMPXF' LINE-PSS C-DATA1-B L-DATA-B N-DAT-PS
    IF C-DATA1-B NE 0
      ASSIGN #SS(C-LINE) = '+'
    END-IF
    MOVE (AD=I) TO #SS-C(C-LINE)
    ADD 1 TO SSW
  END-FOR
*
 INPUT MARK III USING MAP 'MAPTUPM4'
 III := *CURS-FIELD
 PERFORM PROC-KONTR1
 DECIDE FOR EVERY CONDITION
   WHEN *PF-KEY = 'PF3'
     ESCAPE BOTTOM
   WHEN *PF-KEY = 'PF7'  RESET III
     IF SSW1 > F-LINE  SSW1 := SSW1 - F-LINE  END-IF
   WHEN *PF-KEY = 'PF8'  RESET III
     IF SSW > SH-SS IGNORE ELSE  SSW1 := SSW1 + F-LINE END-IF
   WHEN NONE IGNORE
 END-DECIDE
END-REPEAT
  ASSIGN C-DATA1-B = 9   ASSIGN L-DATA-B = 1
  CALL 'PRSX' C-DATA1-B L-DATA-B N-DAT-PS
  C-DATA1-B := 1   ASSIGN L-DATA-B = 8
  CALL 'CMPXF' PROBEL C-DATA1-B L-DATA-B N-DAT-PS
  ASSIGN  SH-PSS = C-DATA1-B
  COMPUTE SH-PSS = SH-PSS - 1
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-KONTR1
   ASSIGN S = 1   RESET C-DATA2
   ASSIGN SSW = SSW1
   REPEAT UNTIL S > F-LINE
     IF SSW > SH-SS  ESCAPE BOTTOM  END-IF
     IF NOT (#SS(S) = '-' OR = '+') AND PLN-SS(S) NE 0
       REINPUT 'ŒÚÏÂÚ¸ÚÂ ‰ÓÒÚÛÔ Í Ò/Ò ÁÌ‡ÍÓÏ ''+'' ËÎË ''-'''
         MARK *#SS(S) ALARM
     END-IF
     ASSIGN LINE-SS   = PLN-SS(S)
     ASSIGN C-DATA2-B = 1  ASSIGN L-DATA-B = 13
     CALL 'CMPXF' LINE-PSS C-DATA2-B L-DATA-B N-DAT-PS
     IF C-DATA2-B = 0
       IF #SS(S) = '+'
         RESET LINE-I
         K := SH-PSS + 1
         IF K > L-DATA
          REINPUT 'Ã¿ÀŒ œ¿Ãﬂ“» ƒÀﬂ —“≈ ¿:1:.Œ¡–¿“»“≈—‹   –¿«–¿¡Œ“◊» ”.'
           ,N-DAT-PS MARK *#SS(S) ALARM
         END-IF
         ADD 1 TO SH-PSS  C-DATA2-B := SH-PSS
         IF SH-PSS > L-DATA  ESCAPE BOTTOM  END-IF
         CALL 'RWSX' C-DATA2-B LINE-PSS WR-REC N-DAT-PS
       END-IF
      ELSE
       IF #SS(S) = '-'
         CALL 'RWSX' C-DATA2-B LINE-PSS RD-REC N-DAT-PS
         ASSIGN LINE-S = H'FF'
         CALL 'RWSX' C-DATA2-B LINE-PSS WR-REC N-DAT-PS
       END-IF
     END-IF
     COMPUTE SSW = SSW + 1
     COMPUTE S = S + 1
   END-REPEAT
END-SUBROUTINE
!8.*
DEFINE SUBROUTINE PROC-SCREEN-DS
   ASSIGN L-DATA-B = 46   MOVE 500 TO Q-DATA-B
   CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-DSS
   C-DEL-B := 1  L-DEL-B := 8
   CALL 'CMPXF' #PS(C-CURS) C-DEL-B L-DEL-B N-DAT-PS
   IF C-DEL-B NE 0
     I := C-DEL-B  RESET J
     REPEAT
       C-DEL-B := I
       CALL 'RWSX' C-DEL-B LINE-PSS RD-REC N-DAT-PS
       IF LINE-PS NE #PS(C-CURS)  ESCAPE BOTTOM  END-IF
       C-DATA-B := 4  L-DATA-B := 5
       CALL 'CMPXF' LINE-SS C-DATA-B L-DATA-B N-DATA-PL
       IF C-DATA-B NE 0
          CALL 'RWSX' C-DATA-B DATAT RD-REC N-DATA-PL
          ADD 1 TO J   C-DATA-B := J
          IF J > 500  J := J - 1  ESCAPE BOTTOM(!8)  END-IF
          PLN-SS(1) := DATA-SS
          NM-SS(1)  := DATA-NM
          #SS(1)    := '+'
          CALL 'RWSX' C-DATA-B INPUT1(1) WR-REC N-DATA-DSS
       END-IF
       ADD 1 TO I
     END-REPEAT
   END-IF
   C-DEL-B := 1  L-DEL-B := 5
   CALL 'SRTX' C-DEL-B L-DEL-B N-DATA-DSS
*
   SSW1 := 1
   REPEAT
     RESET INPUT1(*)  RESET INITIAL #SS-C(*)
     SSW := SSW1
     FOR C-LINE 1 F-LINE
       IF SSW > J ESCAPE BOTTOM END-IF
       ASSIGN C-DATA1-B = SSW
       CALL 'RWSX' C-DATA1-B INPUT1(C-LINE) RD-REC N-DATA-DSS
       IF INPUT1(C-LINE) = ' '  ESCAPE BOTTOM  END-IF
       ADD 1 TO SSW
     END-FOR
*
     INPUT MARK III USING MAP 'MAPTUPM4'
     III := *CURS-FIELD
     DECIDE FOR EVERY CONDITION
       WHEN *PF-KEY = 'PF3'
         CALL 'FRSX' N-DATA-DSS
         ESCAPE BOTTOM
       WHEN *PF-KEY = 'PF7'
         IF SSW1 > F-LINE  SSW1 := SSW1 - F-LINE  END-IF
       WHEN *PF-KEY = 'PF8'
         IF SSW > J IGNORE ELSE  SSW1 := SSW1 + F-LINE END-IF
       WHEN NONE IGNORE
     END-DECIDE
   END-REPEAT
END-SUBROUTINE
DEFINE SUBROUTINE PROC-IMP-MENU
  C-DATA-B := 1  L-DATA-B := 8  RESET J
  CALL 'CMPXF' PAROL C-DATA-B L-DATA-B N-DAT-B
  IF C-DATA-B NE 0
     I := C-DATA-B  RESET J
     REPEAT
       CALL 'RWSX' C-DATA-B SLINE1 RD-REC N-DAT-B
       IF #SPSW NE PAROL  ESCAPE BOTTOM  END-IF
       #SPSW := H'FF'
       CALL 'RWSX' C-DATA-B SLINE1 WR-REC N-DAT-B
       ADD 1 TO I   C-DATA-B := I  ADD 1 TO J
     END-REPEAT
  END-IF
  CALL 'PRSX' H'00000001' H'00000001' N-DAT-B
  C-DAT := C-DAT - J
  C-DATA-B := 1  L-DATA-B := 8
  CALL 'CMPXF' #PS(B-FIELD) C-DATA-B L-DATA-B N-DAT-B
  IF C-DATA-B NE 0
     I := C-DATA-B  RESET J
     REPEAT
       CALL 'RWSX' C-DATA-B SLINE1 RD-REC N-DAT-B
       IF #SPSW NE #PS(B-FIELD)  ESCAPE BOTTOM  END-IF
       #SPSW := PAROL  ADD 1 TO C-DAT  C-DATA-B := C-DAT
       CALL 'RWSX' C-DATA-B SLINE1 WR-REC N-DAT-B
       ADD 1 TO I  C-DATA-B := I
     END-REPEAT
  END-IF
END-SUBROUTINE
DEFINE SUBROUTINE PROC-IMP-DBSL
  C-DEL-B := 1  L-DATA-B := 8  RESET J
  CALL 'CMPXF' #PS(B-FIELD) C-DEL-B L-DATA-B N-DAT-PS
  IF C-DEL-B NE 0
    C-DATA-B := 1  L-DATA-B := 8
    CALL 'CMPXF' PAROL C-DATA-B L-DATA-B N-DAT-PS
    IF C-DATA-B NE 0
       I := C-DATA-B
       REPEAT
         CALL 'RWSX' C-DATA-B LINE-PSS RD-REC N-DAT-PS
         IF LINE-PS NE PAROL  ESCAPE BOTTOM  END-IF
         LINE-PSS := H'FF'
         CALL 'RWSX' C-DATA-B LINE-PSS WR-REC N-DAT-PS
         ADD 1 TO I   C-DATA-B := I  ADD 1 TO J
       END-REPEAT
    END-IF
    CALL 'PRSX' H'00000001' H'00000001' N-DAT-PS
    SH-PSS := SH-PSS - J
    C-DATA-B := 1  L-DATA-B := 8
    CALL 'CMPXF' #PS(B-FIELD) C-DATA-B L-DATA-B N-DAT-PS
    IF C-DATA-B NE 0
       I := C-DATA-B
       REPEAT
         CALL 'RWSX' C-DATA-B LINE-PSS RD-REC N-DAT-PS
         IF LINE-PS NE #PS(B-FIELD)  ESCAPE BOTTOM  END-IF
         LINE-PS := PAROL  ADD 1 TO SH-PSS  C-DATA-B := SH-PSS
         CALL 'RWSX' C-DATA-B LINE-PSS WR-REC N-DAT-PS
         ADD 1 TO I   C-DATA-B := I
       END-REPEAT
    END-IF
   ELSE
    REINPUT'¬:1:Õ≈T ƒŒœ”—“. C/—',#PS(B-FIELD) MARK *#PR(B-FIELD) ALARM
  END-IF
END-SUBROUTINE
END
