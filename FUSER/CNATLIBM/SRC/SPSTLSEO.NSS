* >Natural Source Header 000000 /*<RO>>
* :NatName SPSTLSEO
* :UID MSA
* :Mode S
* :CP
* :Date 20110428
* :Time 1339000
* <Natural Source Header /*<<RO>
DEFINE DATA
* GLOBAL USING UFROG
 PARAMETER USING PRMSTEDT
 PARAMETER USING PRMNAVI
*
 LOCAL USING LCLMSGL
 LOCAL USING LCLSTAT
 LOCAL USING PRMHELP
 LOCAL USING LCLSTATI
 LOCAL USING LCLFROL4
*
/* LOCAL USING LCLFROL4
 LOCAL USING EXL-PARM
 LOCAL
 1 #TMPI      (I4)
1 SELFUN(A60) INIT<'Редактирование статей'>
1 SELREG(A40)
1 WR-REC(B4) CONST <H'00000001'> /* ПРИЗНАК ЗАПИСИ В СТЕК
1 RD-REC(B4) CONST <H'00000000'> /* ПРИЗНАК ЧТЕНИЯ ИЗ СТЕКА
1 N_RELOADST(I4) /* IN GLOBAL
1 I_RELOADST(I4) /*   AREA
/*****************************
1 CODESTAT_EDIT(L) CONST <TRUE>
/*****************************
1 KEYSTTO(A16)
1 REDEFINE KEYSTTO
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTFR(A16)
1 REDEFINE KEYSTFR
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTM(A16)
1 REDEFINE KEYSTTM
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
1 KEYSTTM2(A16)
1 REDEFINE KEYSTTM2
  2 KEYOG(N5)
  2 KEYST(A5)
  2 KEYCD(N6)
/*****************************
1 INFO
 2 SHORT(A5)
 2 NAMEID(A60)
/*****************************
1 LENST(B4) CONST <83>
1 NUMST(B4) INIT  <0>
1 COLST(B4)
1 MAXDATA(I4)
1 STSTACK(A83)
1 REDEFINE STSTACK
  2 CODST(N6)
  2 NAME(A70)
  2 DATAISN(P10)
  2 ACTION(A1)
1 STSTACKTMP(A83)
1 SEARCH(N6)
/*****************************
1 LENDEL(B4) CONST <6>
1 NUMDEL(B4) INIT <0>
1 COLDEL(B4)
1 MAXDEL(I4)
1 STDEL(P10)
1 STDELTMP(A6)
/*****************************
1 STARTSORT(B4)
1 ENDSORT(B4)
/*****************************
1 OTBOR
 2 CODE_FR(I4)
 2 CODE_TO(I4)
 2 NAME(A50)
1 OTBORSCR
 2 CODE_FR(I4)
 2 CODE_TO(I4)
 2 NAME(A50)
/*****************************
1 CURRSTACK(I4)
1 MAXSCREEN(I4) CONST <16>
1 SCREEN(MAXSCREEN)
  2 CODST(I4)
  2 NAME(A70)
  2 CD(C)
1 POSIT(I4)
1 SCRSTR(I4)
1 CURRENTSCR(I4)
/*****************************
1 ERRORID(I4)
1 CHANGE(L)
1 CHNGSTR(A20)
/*****************************
 1 VIEWIBSSYS VIEW OF IBS-SYS-FILE
   2 OG-ST
/*****************************
1 I(I4)
1 K(I4)
1 INFOSTRING(A75)
1 REDEFINE INFOSTRING
  2 TMPPRG(A8)
  2 REDEFINE TMPPRG
    3 TMPPRG1(A1)
    3 TMPPRG2(A1)
    3 FILLER 6X
1 TMPB4(B4)
1 TMPB42(B4)
1 B(B4)
1 SB(B4)
1 LB(B4)
1 LUPDATE(L)
1 C-RW(C)
END-DEFINE
*
DEFINE SUBROUTINE SPSTLSED
INCLUDE CCASKOG
#OPSYS := *OPSYS
DEFINE WINDOW WINDOWOTBOR
 SIZE 7*55
 BASE 6/12
 TITLE 'Отбор статей по критери м'
 CONTROL SCREEN
 FRAMED POSITION OFF
******************************************
 INCLUDE CCSETER 'STEDITP' 'FALSE' '2' ;
 IF STEDITP.OG_ID < 1 THEN
  INCLUDE CCSETER 'STEDITP' 'FALSE' '1' ;
  ESCAPE ROUTINE
 END-IF
 KEYSTTM.KEYOG := STEDITP.OG_ID
 KEYSTTM.KEYST := STEDITP.SHORT
 KEYSTTM.KEYCD := -1
 FIND (1) VIEWSTAT OG-ST = KEYSTTM
  IF NO RECORDS FOUND
   INCLUDE CCSETER 'STEDITP' 'FALSE' '6' ;
   ESCAPE ROUTINE
  END-NOREC
  INFO.SHORT  := STEDITP.SHORT
  INFO.NAMEID := VIEWSTAT.NM-OG
 END-FIND
 FOR I = 1 TO MAXSTATIC
  IF STSTATIC.SHORT(I) EQ INFO.SHORT THEN
   IF STSTATIC.PRGEDIT(I) NE ' ' THEN
    TMPPRG := STSTATIC.PRGEDIT(I)
    IF TMPPRG2 EQ ' ' THEN
      INCLUDE CCSETER 'STEDITP' 'FALSE' '7' ;
      ESCAPE ROUTINE
     ELSE
*      FETCH RETURN STSTATIC.PRGEDIT(I) ;
       SET CONTROL 'K0'
       CALLNAT STSTATIC.PRGEDIT(I) PRMNAV ;
*       INCLUDE CCRFUNNM
      IF STEDITP.RESULT_ID = 2 THEN
       INCLUDE CCSETER 'STEDITP' 'TRUE' '0' ;
      END-IF
      ESCAPE ROUTINE
    END-IF
   END-IF
  END-IF
 END-FOR
 RESET OTBOR;
 PERFORM LOAD_DATA_FROM_FILE ;
 IF ERRORID NE 0 THEN
  PERFORM VIEWERRORINPROGRAM ;
  ESCAPE ROUTINE
 END-IF
 CALLNAT 'SBCNTR60' INFO.NAMEID ;
 REPEAT
  IF ERRORID >= 0 THEN
   PERFORM STACK_TO_SCREEN ;
   FOR I = 1 TO MAXSCREEN
    IF SCREEN.CODST(I) EQ 0 THEN
     POSIT := POS(SCREEN.NAME(I))
     IF CODESTAT_EDIT THEN POSIT := POS(SCREEN.CODST(I)) END-IF
     ESCAPE BOTTOM
    END-IF
   END-FOR
  END-IF
  RESET CHNGSTR;
  IF CHANGE THEN CHNGSTR := 'Изменено' END-IF
  INCLUDE CCSETKEY ;
  IF #RW = 'R'  SET KEY PF5=OFF
    C-RW := (AD=PD)
  END-IF
  IF #OPSYS = 'W'
    INPUT WITH TEXT INFOSTRING(CD=RE) MARK POSIT USING MAP 'NAVSTM2'
    ELSE
    INPUT WITH TEXT INFOSTRING(CD=RE) MARK POSIT USING MAP 'MAPTEDM1' ;
  END-IF
  POSIT := *CURS-FIELD
  CURRENTSCR := 0
  FOR I = 1 TO MAXSCREEN
   IF POSIT EQ POS(SCREEN.CODST(I))  OR
            EQ POS(SCREEN.NAME(I)) THEN
    CURRENTSCR := I
    ESCAPE BOTTOM
   END-IF
  END-FOR
  ERRORID := 0
  RESET INFOSTRING;
  DECIDE ON FIRST VALUE *PF-KEY
   VALUE 'PF1' /* HELP
    INCLUDE CCHELP '235'
    ERRORID := -1
   VALUE 'PF2'
    PERFORM CHECK_SCREEN ;
    PERFORM UNLOAD-DATA ;
   VALUE 'PF3' /* QUIT
    IF CHANGE THEN
     SET CONTROL 'N'
     INPUT USING MAP 'MAPTEDM1' ;
     CALLNAT 'SBATCHNG' CHANGE ;
    END-IF
    IF NOT CHANGE THEN
      PERFORM CLEAR_STACK ;
      ESCAPE BOTTOM
     ELSE
      ERRORID := -1
    END-IF
   VALUE 'PF4' /* SELECT
    SET CONTROL 'N'
    INPUT USING MAP 'MAPMAND2' NO ERASE
    MOVE BY NAME OTBOR TO OTBORSCR ;
    ERRORID := 0
    REPEAT
     DECIDE ON FIRST VALUE ERRORID
      VALUE 1
       INFOSTRING := 'Начальное значение не может быть больше конечного'
      NONE VALUE IGNORE
     END-DECIDE
     SET WINDOW 'WINDOWOTBOR'
     INPUT WITH TEXT INFOSTRING(CD=RE) MARK POSIT USING MAP 'MAPTEDM2' ;
     POSIT := *CURS-FIELD
     ERRORID := 0
     SET WINDOW OFF
     RESET INFOSTRING;
     IF *PF-KEY EQ 'PF3' THEN ESCAPE BOTTOM END-IF
     OTBORSCR.CODE_FR := ABS(OTBORSCR.CODE_FR)
     OTBORSCR.CODE_TO := ABS(OTBORSCR.CODE_TO)
     IF OTBORSCR.CODE_FR > OTBORSCR.CODE_TO AND
        OTBORSCR.CODE_TO NE 0 THEN
      POSIT := POS(OTBORSCR.CODE_FR)
      ERRORID := 1
     END-IF
     IF ERRORID NE 0 THEN ESCAPE TOP END-IF
     IF OTBORSCR.CODE_FR NE 0 AND OTBORSCR.CODE_TO EQ 0 THEN
      OTBORSCR.CODE_TO := OTBORSCR.CODE_FR END-IF
     IF *PF-KEY EQ 'ENTR' THEN
      IF OTBORSCR.CODE_FR NE OTBOR.CODE_FR OR
         OTBORSCR.CODE_TO NE OTBOR.CODE_TO OR
         OTBORSCR.NAME      NE OTBOR.NAME THEN
       IF CHANGE THEN
        SET CONTROL 'N'
        INPUT USING MAP 'MAPTEDM1' ;
        CALLNAT 'SBATCHNG' CHANGE ;
       END-IF
       IF NOT CHANGE THEN
         MOVE BY NAME OTBORSCR TO OTBOR ;
         PERFORM LOAD_DATA_FROM_FILE ;
         IF ERRORID NE 0 THEN
          PERFORM VIEWERRORINPROGRAM ;
          ESCAPE ROUTINE
         END-IF
        ELSE
         ERRORID := -1
       END-IF
      END-IF
      ESCAPE BOTTOM
     END-IF
    END-REPEAT
   VALUE 'PF5'
    PERFORM CHECK_SCREEN ;
    PERFORM SAVE_DATA_TO_FILE ;
    PERFORM LOAD_DATA_FROM_FILE ;
    IF ERRORID NE 0 THEN
     PERFORM VIEWERRORINPROGRAM ;
     ESCAPE ROUTINE
    END-IF
   VALUE 'PF7'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := CURRSTACK - MAXSCREEN
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF8'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := CURRSTACK + MAXSCREEN
    IF CURRSTACK > MAXDATA THEN
     CURRSTACK := MAXDATA - MAXSCREEN + 2
    END-IF
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF9'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := 1
   VALUE 'PF10'
    PERFORM CHECK_SCREEN ;
    CURRSTACK := MAXDATA - MAXSCREEN + 2
    IF CURRSTACK < 1 THEN CURRSTACK := 1 END-IF
   VALUE 'PF12'
    PERFORM CHECK_SCREEN ;
    IF CURRENTSCR EQ 1 THRU MAXSCREEN THEN
     DECIDE FOR FIRST CONDITION
      WHEN POSIT EQ POS(SCREEN.CODST(CURRENTSCR))
       STARTSORT := 1
       ENDSORT   := 6
      WHEN POSIT EQ POS(SCREEN.NAME(CURRENTSCR))
       STARTSORT := 7
       ENDSORT   := 35
      WHEN NONE
       STARTSORT := 1
       ENDSORT   := 6
     END-DECIDE
     POSIT := 0
     CURRSTACK := 1
     CALL 'SRTX' STARTSORT ENDSORT NUMST ;
    END-IF
   NONE VALUE PERFORM CHECK_SCREEN ;
  END-DECIDE
 END-REPEAT
 IF STEDITP.RESULT_ID = 2 THEN
  INCLUDE CCSETER 'STEDITP' 'TRUE' '0' ;
 END-IF
/********************************************************************
 DEFINE SUBROUTINE LOAD_DATA_FROM_FILE
  ERRORID := 0
  PERFORM CLEAR_STACK ;
  KEYSTFR.KEYOG := KEYSTTO.KEYOG := STEDITP.OG_ID ;
  KEYSTFR.KEYST := KEYSTTO.KEYST := STEDITP.SHORT ;
  KEYSTFR.KEYCD   := 1
  KEYSTTO.KEYCD   := 999999
  OTBOR.CODE_FR := ABS(OTBOR.CODE_FR)
  OTBOR.CODE_TO := ABS(OTBOR.CODE_TO)
  IF OTBOR.CODE_FR NE 0 THEN
   KEYSTFR.KEYCD := OTBOR.CODE_FR
  END-IF
  IF OTBOR.CODE_TO NE 0 THEN
   KEYSTTO.KEYCD := OTBOR.CODE_TO
  END-IF
  MAXDATA := 0
  COLST   := 1000;
  MAXDEL  := 0
  COLDEL  := 500;
  ASSIGN NUMST = MAX-NS       /*   MAX NUMBER OF STEK
  CALL 'GTNX' NUMST ;
  CALL 'GTSX' LENST COLST NUMST ;
  ASSIGN NUMDEL = MAX-NS
  CALL 'GTNX' NUMDEL ;
  CALL 'GTSX' LENDEL COLDEL NUMDEL ;
  IF NUMST EQ 0 OR NUMDEL EQ 0 THEN
   ERRORID := 8
   ESCAPE ROUTINE
  END-IF
R. FIND VIEWSTAT OG-ST = KEYSTFR THRU KEYSTTO
   IF NOT(VIEWSTAT.CT-F EQ 1 THRU 999999) THEN ESCAPE TOP END-IF
   IF OTBOR.NAME NE ' ' THEN
    IF VIEWSTAT.NM-OG EQ SCAN OTBOR.NAME THEN IGNORE ELSE
     ESCAPE TOP
    END-IF
   END-IF
   ADD 1 TO MAXDATA
   IF MAXDATA > COLST THEN
    PERFORM RELOADATA ; END-IF
   STSTACK.CODST   := VIEWSTAT.CT-F
   STSTACK.NAME    := VIEWSTAT.NM-OG
   STSTACK.DATAISN := *ISN(R.)
   STSTACK.ACTION  := ' '
   TMPB4 := MAXDATA
   CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
  END-FIND
  IF MAXDATA > 1 THEN
   STARTSORT := 1
   ENDSORT   := 6
   CALL 'SRTX' STARTSORT ENDSORT NUMST ;
  END-IF
  CURRSTACK := 1
  CHANGE := FALSE
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE VIEWERRORINPROGRAM /* +
  IF ERRORID EQ 1 THRU MAXERRMSG THEN
    INCLUDE CCMSG 'STATMSGL(ERRORID)' ;
   ELSE
    INCLUDE CCMSG '"Ошибка при выполнении программы."'
  END-IF
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE CLEAR_STACK
  CALL 'FRSX' NUMST ;
  CALL 'FRSX' NUMDEL ;
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE STACK_TO_SCREEN
  RESET SCREEN(*) ;
  SCREEN.CD(*) := (AD=P)
  IF CODESTAT_EDIT THEN SCREEN.CD(*) := (AD=D) END-IF
  FOR I = 1 TO MAXSCREEN
   TMPB4 := CURRSTACK + I - 1 ;
   IF TMPB4 <= MAXDATA THEN
    CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST
    SCREEN.CODST(I)   := STSTACK.CODST
    SCREEN.NAME(I)    := STSTACK.NAME
   END-IF
  END-FOR
 END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE CHECK_SCREEN
  FOR SCRSTR = 1 TO MAXSCREEN
   SCREEN.CODST(SCRSTR) := ABS(SCREEN.CODST(SCRSTR))
   IF SCREEN.CODST(SCRSTR)  EQ 0 AND
      SCREEN.NAME(SCRSTR)   EQ ' ' THEN ESCAPE TOP END-IF
*
   IF CODESTAT_EDIT THEN
    IF SCREEN.CODST(SCRSTR) EQ 0 THEN
      REINPUT FULL WITH TEXT 'Надо ввести код подстатьи'(CD=RE)
      MARK *SCREEN.CODST(SCRSTR)(CD=RE) ALARM
    END-IF
*  ПОИСК НА ЭКРАНЕ
    K := SCRSTR - 1
    FOR I = 1 TO K
     IF SCREEN.CODST(SCRSTR) EQ SCREEN.CODST(I) THEN
      REINPUT FULL WITH TEXT
      'Стать  с совпадающим кодом уже присутствует на экране'(CD=RE)
      MARK *SCREEN.CODST(SCRSTR)(CD=RE) ALARM
     END-IF
    END-FOR
*  ПОИСК В СТЕКЕ
    B := 0
    TMPB4 := CURRSTACK + SCRSTR - 1 ;
    REPEAT
     IF B >= MAXDATA THEN ESCAPE BOTTOM END-IF
     SEARCH  := SCREEN.CODST(SCRSTR)
     SB := 1
     LB := 6
     CALL 'CMPX' SEARCH SB LB NUMST B ;
     IF SB EQ 0 THEN ESCAPE BOTTOM END-IF
     IF SB EQ TMPB4 THEN
       B := SB
       ESCAPE TOP
      ELSE
      REINPUT FULL WITH TEXT
      'Стать  с совпадающим кодом уже редактируетс '(CD=RE)
      MARK *SCREEN.CODST(SCRSTR)(CD=RE) ALARM
     END-IF
    END-REPEAT
*  ПОИСК В ФАЙЛЕ
    KEYSTFR.KEYOG := STEDITP.OG_ID ;
    KEYSTFR.KEYST := STEDITP.SHORT ;
    KEYSTFR.KEYCD := SCREEN.CODST(SCRSTR) ;
    TMPB4 := CURRSTACK + SCRSTR - 1 ;
    CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST ;
C.  FIND VIEWSTAT OG-ST = KEYSTFR
     IF *ISN(C.) EQ STSTACK.DATAISN THEN ESCAPE TOP END-IF
     REINPUT FULL WITH TEXT
     'Стать  с совпадающим кодом уже существует'(CD=RE)
     MARK *SCREEN.CODST(SCRSTR)(CD=RE) ALARM
    END-FIND
   END-IF
*
   IF CODESTAT_EDIT THEN
    IF SCREEN.CODST(SCRSTR) NE 0 AND SCREEN.NAME(SCRSTR) EQ ' ' THEN
     REINPUT FULL WITH TEXT 'Введите название подстатьи'(CD=RE)
     MARK *SCREEN.NAME(SCRSTR)(CD=RE) ALARM
    END-IF
   END-IF
*
  END-FOR
**********
  K := 0
  FOR SCRSTR = 1 TO MAXSCREEN
   TMPB4 := CURRSTACK + SCRSTR - 1 ;
   IF TMPB4 <= MAXDATA THEN /* OLD
     CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST
     IF SCREEN.CODST(SCRSTR) EQ 0 OR
        SCREEN.NAME(SCRSTR) EQ ' ' THEN
       IF STSTACK.DATAISN NE 0 THEN /* DELETE
        ADD 1 TO MAXDEL
        IF MAXDEL > COLDEL THEN PERFORM RELOADDEL END-IF
        TMPB42 := MAXDEL
        STDEL := STSTACK.DATAISN
        CALL 'RWSX' TMPB42 STDEL WR-REC NUMDEL ;
       END-IF
       CHANGE := TRUE
       MOVE ALL H'FF' TO STSTACK
       ADD 1 TO K
      ELSE
       IF SCREEN.CODST(SCRSTR)  NE STSTACK.CODST OR
          SCREEN.NAME(SCRSTR)   NE STSTACK.NAME  THEN
        CHANGE := TRUE
        STSTACK.CODST   := SCREEN.CODST(SCRSTR)
        STSTACK.NAME    := SCREEN.NAME(SCRSTR)
        STSTACK.ACTION  := 'U'
       END-IF
     END-IF
     CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
    ELSE                    /* NEW
     IF SCREEN.CODST(SCRSTR) EQ 0 AND
        SCREEN.NAME(SCRSTR) EQ ' ' THEN ESCAPE TOP END-IF
     CHANGE := TRUE
     ADD 1 TO MAXDATA
     IF MAXDATA > COLST THEN
      PERFORM RELOADATA ; END-IF
     STSTACK.CODST   := SCREEN.CODST(SCRSTR)
     STSTACK.NAME    := SCREEN.NAME(SCRSTR)
     STSTACK.DATAISN := 0
     STSTACK.ACTION  := 'S'
     TMPB4 := MAXDATA
     CALL 'RWSX' TMPB4 STSTACK WR-REC NUMST
   END-IF
  END-FOR
  CALL 'PRSX' H'00000001' H'00000005' NUMST
  MAXDATA := MAXDATA - K;
 END-SUBROUTINE
/********************************************************************
DEFINE SUBROUTINE UNLOAD-DATA
  #OPSYS := *OPSYS
* #FPATH := 'C:\R26\F.FLE'
  COMPRESS 'C:\R26\STANAL.FLE' TO #FPATH LEAVING NO
  CALLNAT "DRIVECHR" #FPATH-DRIVE
  INCLUDE FILEPATH '10' '12'
  RECORD-MODE := 'I'  HEIGHT(1) := 20
  WORK-FILE-NAME-NEW := #FPATH
  PAPER-ORIENTATION := 'PORTRAIT'
  HEADER-LEFT-TO-RIGHT(1) := 'ОАО "ВПК Машиностроени "'
  HEADER-LEFT-TO-RIGHT(2) := 'Статьи аналитики'
  FOOTER-LEFT-TO-RIGHT (1) := '&Д'
  COMPRESS *DATG *TIME INTO FOOTER-LEFT-TO-RIGHT (2)
  FOOTER-LEFT-TO-RIGHT (3) := '&С'
  HOW-MUCH-ROWS := 2
  EXL-PARM.STYLE(1:HOW-MUCH-ROWS) := 'table-row-gray'
  EXL-PARM.WIDTH(1) := 40
  EXL-PARM.CELL(1) := 'Код'
  EXL-PARM.WIDTH(2) := 500
  EXL-PARM.CELL(2) := 'Наименование'
  IF #OPSYS NE 'W'  CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
    ELSE  CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
  END-IF
  EXL-PARM.STYLE (1:HOW-MUCH-ROWS) := 'table-row'
  RECORD-MODE := 'W'  HEIGHT(1) := 15
  MOVE STSTACK TO STSTACKTMP
  FOR #TMPI = 1 TO MAXDATA
     TMPB4 := #TMPI
     CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST ;
     MOVE STSTACK.CODST TO EXL-PARM.CELL(1)
     MOVE STSTACK.NAME TO EXL-PARM.CELL(2)
     IF #OPSYS NE 'W'
        CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
     ELSE
        CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
     END-IF
  END-FOR
  MOVE STSTACKTMP TO STSTACK
  RECORD-MODE := 'C'
  IF #OPSYS NE 'W'  CALLNAT 'EXL-FH' #FPATH #COMMAND EXL-PARM
  ELSE  CALLNAT 'EXL-FORM' #FPATH #COMMAND EXL-PARM
  END-IF
END-SUBROUTINE
/********************************************************************
 DEFINE SUBROUTINE SAVE_DATA_TO_FILE
  FOR I = 1 TO MAXDEL
   TMPB4 := I
   CALL 'RWSX' TMPB4 STDEL RD-REC NUMDEL ;
   IF STDEL NE 0 THEN
DL. READ (1) VIEWSTAT BY ISN STDEL THRU STDEL
     DELETE(DL.)
    END-READ
    END OF TRANSACTION
   END-IF
  END-FOR
  FOR I = 1 TO MAXDATA
   TMPB4 := I
   CALL 'RWSX' TMPB4 STSTACK RD-REC NUMST ;
   LUPDATE := TRUE
   IF STSTACK.DATAISN NE 0 AND STSTACK.ACTION EQ 'U' THEN
UP.  READ (1) VIEWSTAT BY ISN STSTACK.DATAISN THRU STSTACK.DATAISN
      LUPDATE := FALSE
      RESET VIEWSTAT ;
      VIEWSTAT.OG-ID := STEDITP.OG_ID
      VIEWSTAT.ST-F  := STEDITP.SHORT
      VIEWSTAT.CT-F  := STSTACK.CODST
      VIEWSTAT.NM-OG := STSTACK.NAME
      UPDATE(UP.)
     END-READ
   END-IF
   IF LUPDATE AND STSTACK.ACTION EQ 'S' THEN
    RESET VIEWSTAT ;
    VIEWSTAT.OG-ID := STEDITP.OG_ID
    VIEWSTAT.ST-F  := STEDITP.SHORT
    VIEWSTAT.CT-F  := STSTACK.CODST
    IF NOT CODESTAT_EDIT THEN
     KEYSTFR.KEYOG := KEYSTTO.KEYOG := STEDITP.OG_ID ;
     KEYSTFR.KEYST := KEYSTTO.KEYST := STEDITP.SHORT ;
     KEYSTFR.KEYCD   := 0
     KEYSTTO.KEYCD   := 999999
     KEYSTTM := KEYSTFR
     HISTOGRAM VIEWIBSSYS OG-ST STARTING FROM KEYSTFR THRU KEYSTTO
      KEYSTTM2 := OG-ST
      IF (KEYSTTM2.KEYCD - KEYSTTM.KEYCD) > 2 AND
          KEYSTTM2.KEYCD > 2 THEN
       VIEWSTAT.CT-F := KEYSTTM2.KEYCD - 1 ;
       ESCAPE BOTTOM
      END-IF
      KEYSTTM := KEYSTTM2
     END-HISTOGRAM
    END-IF
    VIEWSTAT.NM-OG := STSTACK.NAME
    STORE VIEWSTAT ;
   END-IF
   END OF TRANSACTION
  END-FOR
 END-SUBROUTINE
/********************************************************************
INCLUDE CCRLDST 'RELOADATA' 'LENST' 'COLST' 'NUMST' 'STSTACKTMP' ;
INCLUDE CCRLDST 'RELOADDEL' 'LENDEL' 'COLDEL' 'NUMDEL' 'STDELTMP' ;
ON ERROR
 IF *ERROR-NR EQ 82 THEN
  INCLUDE CCSETER 'STEDITP' 'FALSE' '12' ;
  ESCAPE ROUTINE
 END-IF
END-ERROR
END-SUBROUTINE
END
