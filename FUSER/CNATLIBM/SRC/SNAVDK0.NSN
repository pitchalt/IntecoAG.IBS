* >Natural Source Header 000000 /*<RO>>
* :NatName SNAVDK0
* :UID MSA
* :Mode S
* :CP
* :Date 20071230
* :Time 2320330
* <Natural Source Header /*<<RO>
******************************
* ƒŒœ”—“»Ã€≈  Œ––≈—œŒÕƒ≈Õ÷»» *
******************************
DEFINE DATA
*  GLOBAL USING UFROG       /* √ÀŒ¡¿À‹Õ€≈ œ≈–≈Ã≈ÕÕ€≈ ƒÀﬂ ¬—≈… —»—“≈Ã€
PARAMETER USING PRMNAVI
*
  LOCAL  USING LCLFROL1       /* Œ¡Ÿ»≈ œ≈–≈Ã≈ÕÕ€≈
  LOCAL  USING LCLSUL1       /* —“–” “”–¿ —“≈ ¿ — œÀ¿ÕŒÃ —◊≈“Œ¬
  LOCAL  USING LCLBSL      /* VIEW Õ¿ ‘¿…À IBS-BS-FILE
  LOCAL  USING LCLSYSL0     /* VIEW Õ¿ ‘¿…À IBS-BS-FILE
  LOCAL  USING PRMHELP
  LOCAL  USING LCLFROL4
  LOCAL
*
    1 SELFUN(A60) INIT<'ƒÓÔÛÒÚËÏ˚Â ÍÓÂÒÔÓÌ‰ÂÌˆËË'>
    1 SELREG(A40)
    1 FIELD-NB(A150/1:4)
    1 REDEFINE FIELD-NB
      2 #DEBET-BS (N003/1:15,1:6)
      2 REDEFINE #DEBET-BS
        3 DEBET-BS(A003/1:90)
      2 REDEFINE #DEBET-BS
        3 DEBET-N(N003/1:90)
      2 #KREDIT-BS(N003/1:15,1:6)
      2 REDEFINE #KREDIT-BS
        3 KREDIT-BS(A003/1:90)
      2 REDEFINE #KREDIT-BS
        3 KREDIT-N(N003/1:90)
*
    1 #DEBET-BS-C (C/15,6)
    1 FILD-NB(A150/1:4)
    1 REDEFINE FILD-NB
      2 #DBT-BS (N003/1:15,1:6)
      2 REDEFINE #DBT-BS
        3 DBT-BS(A003/1:90)
      2 REDEFINE #DBT-BS
        3 DBT-BSN (N03/90)
      2 #KRDT-BS(N003/1:15,1:6)
      2 REDEFINE #KRDT-BS
        3 KRDT-BS(A003/1:90)
      2 REDEFINE #KRDT-BS
        3 KRDT-BSN(N003/1:90)
*
    1 FILD-DEL (A150/4)
    1 REDEFINE FILD-DEL
      2 DBT-DEL(A003/1:90)
      2 REDEFINE DBT-DEL
        3 #DBT-DEL (N3/90)
      2 KRDT-DEL(A003/1:90)
      2 REDEFINE KRDT-DEL
        3 #KRDT-DEL(N3/90)
*
    1 KEY-BS(N03)             /* ¡/—◊≈“
    1 REDEFINE KEY-BS
      2 KEY-BSS  (A03)
    1 KEY-KK(A02) INIT <'DK'> /*  Œƒ  Œƒ»‘» ¿“Œ–¿
    1 NUMB  (N03)
    1 TEK-BS(N03)
    1 TEK-NM-REG   (A0040)
    1 III          (I0004)
    1 IIR          (I0004)
    1 N-DATA-BS    (B0004)  INIT <4>
*
END-DEFINE
#OPSYS := *OPSYS
INCLUDE CCASKOG
* SET CONTROL 'MB'
TEK-NM-REG := REG-NM-G
REG-NM-G := '      <ƒÓÔÛÒÚËÏ˚Â ÍÓÂÒÔÓÌ‰ÂÌˆËË>'
IF *DATA > 0  T-KEY := 1  END-IF
*
  MOVE 46  TO L-DATA-B     /* ƒÀ»Õ¿ ›À≈Ã≈Õ“¿ ¬ —“≈ ≈ — ƒ¿ÕÕ€Ã»
  MOVE 200 TO Q-DATA-B     /*  ŒÀ»◊≈—“¬Œ ›À≈Ã≈Õ“Œ¬ ¬ —“≈ ≈ — ƒ¿ÕÕ€Ã»
  CALL 'GTSX' L-DATA-B Q-DATA-B N-DATA-BS
  FIND IBS-BS-FILE OG-ID = OG-IDENT-G
    ACCEPT IF SS-ID = 0
    ASSIGN STEK-BS-BS = BS-ID
    ASSIGN STEK-BS-AP = AP-ID
    ASSIGN STEK-BS-SL = FL-BL
    ASSIGN STEK-BS-NM = NM-BS
      ADD 1 TO C-DATA
      ASSIGN C-DATA-B = C-DATA
      CALL 'RWSX' C-DATA-B STEK-BS WR-REC N-DATA-BS
  END-FIND
  C-DATA-B := 1  L-DATA-B := 3
  CALL 'SRTX' C-DATA-B L-DATA-B N-DATA-BS
  ASSIGN MAX-EL(N-DATA-BS) = C-DATA
REPEAT
*
  SET KEY PF1 PF2 PF3 PF5=OFF PF11
  IF T-KEY NE 0 AND *PF-KEY = 'PF3' OR = 'PF5'
    SET CONTROL 'K0'   ESCAPE BOTTOM
  END-IF
  INCLUDE INPPC '"NAVDKM0"' '"MAPDK0M0"'
*
  IF *PF-KEY = 'PF11'
    CALLNAT 'PRTDK' OG-IDENT-G
    ESCAPE TOP
  END-IF
  IF *PF-KEY = 'PF1'
    INCLUDE CCHELP '4'
    ESCAPE TOP
  END-IF
*  IF *PF-KEY = 'PF3' REG-NM-G := TEK-NM-REG  SET CONTROL 'MT'
* ESCAPE BOTTOM END-IF
   IF *PF-KEY = 'PF3' REG-NM-G := TEK-NM-REG   ESCAPE BOTTOM END-IF

  IF *PF-KEY = 'PF2'
    CALLNAT 'SBSUN4' KEY-BS N-DATA-BS C-DATA-B ESCAPE TOP END-IF
  IF KEY-BS = 0
    REINPUT'«‡‰‡ÈÚÂ Ò˜ÂÚ' MARK *KEY-BS ALARM
  END-IF
  ASSIGN C-DATA-B = 1   L-DATA-B := 3
  CALL 'CMPXF' KEY-BS C-DATA-B L-DATA-B N-DATA-BS
  IF C-DATA-B = 0 THEN
    REINPUT'—˜ÂÚ ÌÂ ÓÔËÒ‡Ì ‚ ÔÎ‡ÌÂ Ò˜ÂÚÓ‚' MARK *KEY-BS ALARM
  END-IF
  CALL 'RWSX' C-DATA-B STEK-BS RD-REC N-DATA-BS
*
S1. FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
                                      AND KD-F = KEY-BS
    ASSIGN FIELD-NB(*) = NB-F(*)
    ASSIGN FILD-DEL(*) = NB-F(*)
  END-FIND
  IF *NUMBER(S1.) = 0 THEN RESET #DEBET-BS(*,*) #KREDIT-BS(*,*) END-IF
  IF *NUMBER(S1.) NE 0 PERFORM PROC-SORT END-IF
*
  REPEAT
    SET KEY PF1 PF2 PF3 PF5
IF #RW = 'R'  SET KEY PF5=OFF
  #DEBET-BS-C(*,*) := (AD=PD)
END-IF
  INCLUDE INPPC '"NAVDKM1"' '"MAPDK0M1"'
*    III := *CURS-FIELD
    MOVE *CURS-FIELD TO III
    IF *PF-KEY = 'PF1'
      INCLUDE CCHELP '4'
      ESCAPE TOP
    END-IF
    IF *PF-KEY = 'PF3'  ESCAPE BOTTOM END-IF
    IF *PF-KEY = 'PF2' THEN
*      SET CONTROL 'MB'           /* ƒÀﬂ –¿¡Œ“€ *CURS-FIELD
*  write '='n-data-bs '='*curs-field '='iii
      FOR C-DATA1 = 1 THRU 15
        FOR C-DATA2 = 1 TO 6
          IF III = POS(#DEBET-BS(C-DATA1,C-DATA2))
*           WRITE '='#DEBET-BS(C-DATA1,C-DATA2) '='N-DATA-BS '='C-DATA-B
            CALLNAT 'SBSUN4' #DEBET-BS(C-DATA1,C-DATA2) N-DATA-BS C-DATA-B
            ESCAPE BOTTOM
          END-IF
          IF III = POS(#KREDIT-BS(C-DATA1,C-DATA2))
            CALLNAT 'SBSUN4' #KREDIT-BS(C-DATA1,C-DATA2) N-DATA-BS C-DATA-B
            ESCAPE BOTTOM
          END-IF
        END-FOR
        ESCAPE TOP
      END-FOR
      ESCAPE TOP     /*      23.8.99
    END-IF
    FOR C-DATA2 = 1 TO 6
      FOR C-DATA1 = 1 TO 15
        IF #DEBET-BS(C-DATA1,C-DATA2) NE 0 THEN
          ASSIGN C-DATA-B = 1  L-DATA-B := 3
          CALL 'CMPXF'
          #DEBET-BS(C-DATA1,C-DATA2) C-DATA-B L-DATA-B N-DATA-BS
          IF C-DATA-B = 0 THEN
            REINPUT'—˜ÂÚ ÌÂ ÓÔËÒ‡Ì ‚ ÔÎ‡ÌÂ Ò˜ÂÚÓ‚'
            MARK *#DEBET-BS(C-DATA1,C-DATA2) ALARM
          END-IF
          COMPUTE C-DATA = (C-DATA1 - 1) * 6 + C-DATA2
          COMPUTE L-DATA = (C-DATA1 - 1) * 6 + C-DATA2
          EXAMINE DEBET-BS(*) DEBET-BS(C-DATA) GIVING NUMBER C-DUBL
                                                      INDEX  L-DEL
          IF C-DUBL > 1 AND C-DATA NE L-DEL
            REINPUT'ƒÛ·ÎËÓ‚‡ÌËÂ Ò˜ÂÚ‡' MARK *#DEBET-BS(C-DATA1,C-DATA2)
            ALARM
          END-IF
        END-IF
        IF #KREDIT-BS(C-DATA1,C-DATA2) NE 0 THEN
          ASSIGN C-DATA-B = 1   L-DATA-B := 3
          CALL 'CMPXF'
          #KREDIT-BS(C-DATA1,C-DATA2) C-DATA-B L-DATA-B N-DATA-BS
          IF C-DATA-B = 0 THEN
            REINPUT'—˜ÂÚ ÌÂ ÓÔËÒ‡Ì ‚ ÔÎ‡ÌÂ Ò˜ÂÚÓ‚'
            MARK *#KREDIT-BS(C-DATA1,C-DATA2) ALARM
          END-IF
          COMPUTE C-DATA = (C-DATA1 - 1) * 6 + C-DATA2
          EXAMINE KREDIT-BS(*) KREDIT-BS(C-DATA) GIVING NUMBER C-DUBL
                                                        INDEX  L-DEL
          IF C-DUBL > 1 AND C-DATA NE L-DEL
           REINPUT'ƒÛ·ÎËÓ‚‡ÌËÂ Ò˜ÂÚ‡' MARK *#KREDIT-BS(C-DATA1,C-DATA2)
           ALARM
          END-IF
        END-IF
      END-FOR
    END-FOR  RESET C-DEL Q-DEL
    FOR Q-DATA 1 90
      IF DEBET-N(Q-DATA) NE 0
        ADD 1 TO C-DEL
        DEBET-N(C-DEL) := DEBET-N(Q-DATA)
        IF Q-DATA > C-DEL RESET DEBET-N(Q-DATA)  END-IF
      END-IF
      IF KREDIT-N(Q-DATA) NE 0
        ADD 1 TO Q-DEL
        KREDIT-N(Q-DEL) := KREDIT-N(Q-DATA)
        IF Q-DATA > Q-DEL RESET KREDIT-N(Q-DATA)  END-IF
      END-IF
    END-FOR
    PERFORM PROC-SORT
*    SET CONTROL 'MT'
*
    IF *PF-KEY = 'PF5' THEN
      PERFORM PROC-KONTR-UDL
      FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
        AND KD-F = KEY-BS
        IF NO
          RESET NB-F(*)
          ASSIGN OG-ID = OG-IDENT-G
          ASSIGN KK-F  = KEY-KK
          ASSIGN KD-F  = KEY-BS
        END-NOREC
        ASSIGN NB-F(*) = FIELD-NB(*)
        IF *NUMBER NE 0
          THEN UPDATE
          ELSE STORE SU-SYS-FILE
        END-IF
        END OF TRANSACTION
      END-FIND
      PERFORM PROC-KORR
      IF N-DEL = 1  PERFORM PROC-UDAL-DK  END-IF
*      FETCH RETURN 'UFRO4' KEY-BS  /* œ≈–≈«¿√–”« ¿ ƒŒœ. Œ–. ¬ —“≈ 
      STACK TOP DATA KEY-BS
      CALLNAT 'SBUFRO4' PRMNAV
      ESCAPE BOTTOM
    END-IF
*  !!!!!!!!
  END-REPEAT
  IF T-KEY NE 0 AND *PF-KEY = 'PF3' OR = 'PF5'
    SET CONTROL 'K0'   ESCAPE BOTTOM
  END-IF
*
END-REPEAT
* SET CONTROL 'MT'
DEFINE SUBROUTINE PROC-SORT
  FOR C-DEL 1 90
    IF DEBET-N(C-DEL) = 0  ESCAPE BOTTOM  END-IF
    FOR Q-DEL 1 89
      IF DEBET-N(Q-DEL) = 0 ESCAPE BOTTOM  END-IF
      IF DEBET-N(Q-DEL + 1) NE 0
        IF DEBET-N(Q-DEL) > DEBET-N(Q-DEL + 1)
          TEK-BS := DEBET-N(Q-DEL + 1)
          DEBET-N(Q-DEL + 1) := DEBET-N(Q-DEL)
          DEBET-N(Q-DEL) := TEK-BS
        END-IF
      END-IF
    END-FOR
  END-FOR
  FOR C-DEL 1 90
    IF KREDIT-N(C-DEL) = 0  ESCAPE BOTTOM  END-IF
    FOR Q-DEL 1 89
      IF KREDIT-N(Q-DEL) = 0 ESCAPE BOTTOM  END-IF
      IF KREDIT-N(Q-DEL + 1) NE 0
        IF KREDIT-N(Q-DEL) > KREDIT-N(Q-DEL + 1)
          TEK-BS := KREDIT-N(Q-DEL + 1)
          KREDIT-N(Q-DEL + 1) := KREDIT-N(Q-DEL)
          KREDIT-N(Q-DEL) := TEK-BS
        END-IF
      END-IF
    END-FOR
  END-FOR
END-SUBROUTINE
*
DEFINE SUBROUTINE PROC-KORR
   FOR C-DEL 1 15
    FOR Q-DEL 1 6
     IF #DEBET-BS(C-DEL,Q-DEL) NE 0
S2.   FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
        AND KD-F = #DEBET-BS(C-DEL,Q-DEL)
        IF NO
          SU-SYS-FILE.OG-ID := OG-IDENT-G
          SU-SYS-FILE.KK-F  := KEY-KK
          SU-SYS-FILE.KD-F  := #DEBET-BS(C-DEL,Q-DEL)
          RESET #KRDT-BS(*,*) #DBT-BS(*,*)
          SU-SYS-FILE.NB-F(*) := FILD-NB(*)
        END-NOREC
        FILD-NB(*) := NB-F(*)
        EXAMINE FULL KRDT-BS(*) FOR FULL KEY-BSS NUMBER NUMB
        IF NUMB = 0
          EXAMINE KRDT-BS(*) FOR '000' INDEX NUMB
*          IF NUMB = 0 EXAMINE KRDT-BS(*) FOR '   ' INDEX NUMB  END-IF
          KRDT-BSN(NUMB) := KEY-BS
          SU-SYS-FILE.NB-F(*) := FILD-NB(*)
          IF *NUMBER(S2.) = 0
            STORE SU-SYS-FILE
           ELSE
            UPDATE
          END-IF
          END OF TRANSACTION
        END-IF
      END-FIND
     END-IF
    END-FOR
  END-FOR
*
  FOR C-DEL 1 15
    FOR Q-DEL 1 6
     IF #KREDIT-BS(C-DEL,Q-DEL) NE 0
      FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
       AND KD-F = #KREDIT-BS(C-DEL,Q-DEL)
        IF NO
          SU-SYS-FILE.OG-ID := OG-IDENT-G
          SU-SYS-FILE.KK-F  := KEY-KK
          SU-SYS-FILE.KD-F  := #KREDIT-BS(C-DEL,Q-DEL)
          RESET #DBT-BS(*,*) #KRDT-BS(*,*)
          SU-SYS-FILE.NB-F(*) := FILD-NB(*)
        END-NOREC
        FILD-NB(*) := NB-F(*)
        EXAMINE FULL DBT-BS(*) FOR FULL KEY-BSS NUMBER NUMB
        IF NUMB = 0
          EXAMINE DBT-BS(*) FOR '000' INDEX NUMB
*          IF NUMB = 0 EXAMINE DBT-BS(*) '   ' INDEX NUMB  END-IF
          DBT-BSN(NUMB) := KEY-BS
          SU-SYS-FILE.NB-F(*) := FILD-NB(*)
        END-IF
        IF *NUMBER = 0
          STORE SU-SYS-FILE
         ELSE
          UPDATE
        END-IF
        END OF TRANSACTION
        END-FIND
     END-IF
    END-FOR
  END-FOR
*
END-SUBROUTINE
DEFINE SUBROUTINE PROC-KONTR-UDL
  IF DBT-DEL(*) = DEBET-BS(*) AND KRDT-DEL(*) = KREDIT-BS(*)
    RESET N-DEL ELSE N-DEL := 1
    FOR Q-DATA 1 90
      EXAMINE FULL DBT-DEL(*) FOR FULL DEBET-BS(Q-DATA) INDEX NUMB
      IF NUMB NE 0 RESET #DBT-DEL(NUMB)  END-IF
    END-FOR
    FOR Q-DATA 1 90
      EXAMINE FULL KRDT-DEL(*) FOR FULL KREDIT-BS(Q-DATA) INDEX NUMB
      IF NUMB NE 0  RESET #KRDT-DEL(NUMB)  END-IF
    END-FOR
   END-IF
END-SUBROUTINE
DEFINE SUBROUTINE PROC-UDAL-DK
  FOR C-DEL 1 90
    RESET Q-DEL
    IF #DBT-DEL(C-DEL) NE 0
      FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
        AND KD-F = #DBT-DEL(C-DEL)
        FILD-NB(*) := NB-F(*)
        EXAMINE FULL KRDT-BS(*) FOR FULL KEY-BSS INDEX NUMB
        IF NUMB NE 0 RESET KRDT-BSN(NUMB)
          FOR Q-DATA 1 90
            IF KRDT-BSN(Q-DATA) NE 0
              ADD 1 TO Q-DEL
              KRDT-BSN(Q-DEL) := KRDT-BSN(Q-DATA)
              IF Q-DATA > Q-DEL RESET KRDT-BSN(Q-DATA)  END-IF
            END-IF
          END-FOR
        END-IF
        SU-SYS-FILE.NB-F(*) := FILD-NB(*)
        UPDATE
        END OF TRANSACTION
      END-FIND
     END-IF
   END-FOR
*
  FOR C-DEL 1 90
    RESET Q-DEL
    IF #KRDT-DEL(C-DEL) NE 0
      FIND SU-SYS-FILE OG-ID = OG-IDENT-G AND KK-F = KEY-KK
       AND KD-F = #KRDT-DEL(C-DEL)
        FILD-NB(*) := NB-F(*)
        EXAMINE FULL DBT-BS(*) FOR FULL KEY-BSS INDEX NUMB
        IF NUMB NE 0 RESET DBT-BSN(NUMB)
          FOR Q-DATA 1 90
            IF DBT-BSN(Q-DATA) NE 0
              ADD 1 TO Q-DEL
              DBT-BSN(Q-DEL) := DBT-BSN(Q-DATA)
              IF Q-DATA > Q-DEL RESET DBT-BSN(Q-DATA)  END-IF
            END-IF
          END-FOR
        END-IF
        SU-SYS-FILE.NB-F(*) := FILD-NB(*)
        UPDATE
        END OF TRANSACTION
      END-FIND
     END-IF
   END-FOR
END-SUBROUTINE
*
END
