* >Natural Source Header 000000 /*<RO>>
* :NatName MBSOSH0S
* :UID ARMK01
* :Mode S
* :CP
* :Date 20071211
* :Time 1234000
* <Natural Source Header /*<<RO>
/***********************************************************************
/*
/* СИСТЕМА:
/* ПРОГРАММА:
/*
/* РАЗРАБОТЧИК:  Ковальчук О.Д.
/* ДАТА ВЫПУСКА:
/*
/* НАЗВАНИЕ:  поиск оборотов и сальдо и заполнение стека
/*
/* КОМАНДЫ:
/*   ADD
/*
/* ИСПРАВЛЕНИЯ:
/*
/***********************************************************************
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING MBSOSH0A
PARAMETER USING MBSOST0A
PARAMETER USING UXCSXX0A
/*
LOCAL USING XXXXEC0L
LOCAL USING UXXXEC0L
LOCAL USING MXITAT0L   /* атрибуты
LOCAL USING XXSTMN0L
LOCAL USING XBDRSX0L
LOCAL USING MBSOST0L
LOCAL USING MBOTOP0L   /* стек дл  операций
LOCAL USING XPPBXX0A
LOCAL USING UBITMN0A
/*
LOCAL USING UDSASH0A
LOCAL USING UDSOSH0L
LOCAL
1 #DATA-A     (A8)
1 REDEFINE #DATA-A
2 #DATA-N     (N8)
/*
LOCAL
1 #I          (I4)
1 #SIGN       (P1)
1 #TYPE       (A1)
1 #COUNT      (I4)
1 #VID-OPER   (I4)
END-DEFINE
DEFINE SUBROUTINE MBSOSH0S
RESET XXERX00A
/*
DECIDE ON FIRST VALUE MBSOSH0A.BL-COMMAND
VALUE "SEARCH"
  /* инитим стек если стек еще не размещен
  IF STACK-COUNT EQ 0 THEN
     PERFORM STACK-INIT
  END-IF
  PERFORM RECORD-SEARCH
VALUE "SEARCH-OP"
  IF STACK-COUNT-OP EQ 0 THEN
     PERFORM STACK-INIT-OP
  END-IF
  PERFORM RECORD-SEARCH
NONE VALUE
  MOVE MBSOSH0A.BL-COMMAND TO ERROR-ADDITION(1)
  *ERROR-NR := EC-UNKNOW-COMMAND
END-DECIDE
/*
INCLUDE UDSOSH0C "QUERY-PROCESS-SALDO" "RECORD-PROCESS-SALDO" "RECORD-PROGRESS"
INCLUDE UDSOSH0C "QUERY-PROCESS-OPER" "RECORD-PROCESS-OPER" "RECORD-PROGRESS"
INCLUDE UDSOSH0C "QUERY-PROCESS-OPER-PERIOD" "RECORD-PROCESS-OPER-PERIOD" "RECORD-PROGRESS"
/*
DEFINE SUBROUTINE RECORD-PROGRESS
  ADD 1 TO #COUNT
  INCLUDE XPPBST0C "#COUNT"
END-SUBROUTINE
/*
DEFINE SUBROUTINE RECORD-SEARCH
  IF MBSOSH0A.SA-DT-S NE 0 OR MBSOSH0A.SA-DT-PO NE 0 THEN
     IF MBSOSH0A.SA-DT-ATTR-ID EQ 0 THEN
        *ERROR-NR := EC-ATTR-REQUIRED
     END-IF
  END-IF
/* читаем определение регистра что-бы определить cl-id (по идее нужно
/* просматривать все регистры и использовать множество cl-id)
  MOVE MBSOSH0A.IT-ID(1) TO UBITMN0A.IT-ID
  MOVE "READ" TO UBITMN0A.BL-COMMAND
  PERFORM UBITMN0S XXERX00A XXCTXX0A UBITMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/* готовим параметры запроса
  IF MBSOSH0A.PR-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE PR-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.PR-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
/*     WRITE 'pr' UDSaSH0A.SH-AT-ATTR-ID(SH-AT-C) UDSaSH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.MT-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MT-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.MT-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.LK-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE LK-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.LK-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.ZK-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE ZK-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.ZK-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.MO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.MO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.GM-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE GM-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.GM-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
/*     WRITE 'gm' UDSaSH0A.SH-AT-ATTR-ID(SH-AT-C) UDSaSH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.VO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE VO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.VO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
/*     WRITE 'gm' UDSaSH0A.SH-AT-ATTR-ID(SH-AT-C) UDSaSH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MBSOSH0A.DF-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE DF-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MBSOSH0A.DF-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  MOVE MBSOSH0A.IT-ID(*) TO UDSASH0A.SH-IT-ID(*)
/* UDSaSH0A
/* Поиск ведетс  в несколько этапов
  /*  1 - Поиск сальдо  (4-  зона)
  /*  2 - Ищем операции в периоде дат (3-  зона) и формируем (Сальд.вх. (СВ),
  /*       Сальдо исх. (СИ), Обор в периоде (ОП))
  /*  3 - Ищем операции в периоде дат (2-  зона) и формируем (СВ, СИ, ОП)
/*******************************************************************************
  /* Подготовим параметры дл  сальдо
/*  WRITE "PROCESS S"
IF MBSOSH0A.BL-COMMAND = "SEARCH" THEN
  #TYPE := "S"
  UDSOSH0L.SIGN := 1
  UDSASH0A.SH-OP-CL-ID := UBITMN0A.CL-ID * 10 + 4
  MOVE MBSOSH0A.SA-DT-ATTR-ID TO UDSASH0A.SH-DT-ATTR-ID
  UDSASH0A.SH-DT-START := 90000000
  UDSASH0A.SH-DT-STOP  := 90000000
  /* Запускаем поиск
  MOVE "SEARCH" TO UDSASH0A.DL-COMMAND
  PERFORM UDSASH0S XXERX00A UDSASH0A
  IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     /*
     RESET #COUNT
     INCLUDE XPPBIN0C "SH-NUMBER" '"Загрузка сальдо"'
     /*
     PERFORM QUERY-PROCESS-SALDO
  ELSE
     RESET XXERX00A
  END-IF
END-IF
/**********************************************************************
/* ОПЕРАЦИИ
/*
/* выполн ем пунпкты 2 и 3
/**********************************************************************
  IF SA-DT-S NE 0 AND SA-DT-PO NE 0
     /* Подготовим параметры дл  операций
/*     WRITE "PROCESS O"
     #TYPE := "O"
     UDSOSH0L.SIGN := 1
     UDSASH0A.SH-OP-CL-ID := UBITMN0A.CL-ID * 10 + 3
     MOVE MBSOSH0A.SA-DT-ATTR-ID TO UDSASH0A.SH-DT-ATTR-ID
     UDSASH0A.SH-DT-START := 0
     UDSASH0A.SH-DT-STOP  := 90000000
     IF SA-DT-S NE 0 THEN
        MOVE EDITED SA-DT-S (EM=YYYYMMDD) TO #DATA-A
        UDSASH0A.SH-DT-START := #DATA-N
     END-IF
     /* Запускаем поиск
     MOVE "SEARCH" TO UDSASH0A.DL-COMMAND
     PERFORM UDSASH0S XXERX00A UDSASH0A
     IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        /*
        RESET #COUNT
        INCLUDE XPPBIN0C "SH-NUMBER" '"Загрузка операций"'
        /*
        DECIDE ON FIRST VALUE MBSOSH0A.BL-COMMAND
           VALUE "SEARCH"
              PERFORM QUERY-PROCESS-OPER
           VALUE "SEARCH-OP"
              PERFORM QUERY-PROCESS-OPER-PERIOD
           NONE VALUE
              MOVE MBSOSH0A.BL-COMMAND TO ERROR-ADDITION(1)
              *ERROR-NR := EC-UNKNOW-COMMAND
        END-DECIDE
     ELSE
        RESET XXERX00A
     END-IF
  END-IF
/* Подготовим параметры дл  транзакционных операций
/*  WRITE "PROCESS T"
  #TYPE := "T"
  UDSOSH0L.SIGN := 1
  UDSASH0A.SH-OP-CL-ID := UBITMN0A.CL-ID * 10 + 2
  MOVE MBSOSH0A.SA-DT-ATTR-ID TO UDSASH0A.SH-DT-ATTR-ID
  UDSASH0A.SH-DT-START := 0
  UDSASH0A.SH-DT-STOP  := 90000000
  IF SA-DT-PO NE 0 THEN
     MOVE EDITED SA-DT-PO (EM=YYYYMMDD) TO #DATA-A
     UDSASH0A.SH-DT-STOP := #DATA-N - 1
  END-IF
  /* Запускаем поиск
  MOVE "SEARCH" TO UDSASH0A.DL-COMMAND
  PERFORM UDSASH0S XXERX00A UDSASH0A
  IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     /*
     RESET #COUNT
     INCLUDE XPPBIN0C "SH-NUMBER" '"Загрузка транзакционных операций"'
     /*
        DECIDE ON FIRST VALUE MBSOSH0A.BL-COMMAND
           VALUE "SEARCH"
              PERFORM QUERY-PROCESS-OPER
           VALUE "SEARCH-OP"
              PERFORM QUERY-PROCESS-OPER-PERIOD
           NONE VALUE
              MOVE MBSOSH0A.BL-COMMAND TO ERROR-ADDITION(1)
              *ERROR-NR := EC-UNKNOW-COMMAND
        END-DECIDE
  ELSE
     RESET XXERX00A
  END-IF
/*
END-SUBROUTINE
/*
/*************************************************************************
/****************        RECORD-PROCESS-OPER  ****************************
/*************************************************************************
DEFINE SUBROUTINE RECORD-PROCESS-OPER
/*
  MOVE UDSOSH0L.SIGN TO #SIGN
/*  WRITE *PROGRAM  #TYPE UDSaSH0A.IT-ID DT-VALUE
/*  WRITE #TYPE UDSaSH0A.OP-STATE UDSaSH0A.TX-STATUS
/*        UDSaSH0A.TX-CURRENT-ID UDSaSH0A.OP-DR-LIST-ID(*)
  /* Если модификатор прив зан к дате, то отбираем только нужные
  IF UDSASH0A.DT-VALUE NE 0 THEN
/*     IF #TYPE EQ "T" AND UDSaSH0A.DT-VALUE >= SA-DT-PO THEN
/*        ESCAPE ROUTINE
/*     END-IF
     IF #TYPE EQ "O" AND UDSASH0A.DT-VALUE < SA-DT-S THEN
        ESCAPE ROUTINE
     END-IF
  END-IF
  /* Берем не все транзакционные записи
  IF #TYPE EQ "T" THEN
/*     WRITE 'tran' XXCTXX0A.TX-ID UDSaSH0A.TX-CURRENT-ID UDSaSH0A.OP-STATE  UDSaSH0A.TX-STATUS
     DECIDE FOR FIRST CONDITION
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "A"
        IF XXCTXX0A.TX-ID NE UDSASH0A.TX-CURRENT-ID THEN
           ESCAPE ROUTINE
        END-IF
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "N"
        IGNORE
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "P"
        ESCAPE ROUTINE
     WHEN UDSASH0A.OP-STATE EQ "S" AND UDSASH0A.TX-STATUS EQ "P"
        #SIGN := #SIGN * -1
     WHEN NONE
        ESCAPE ROUTINE
     END-DECIDE
/*     WRITE 'tran accept' #SIGN
  END-IF
/*     WRITE 'excl accept' #SIGN
/*  END-IF
/*  WRITE #TYPE #SIGN UDSaSH0A.OP-STATE UDSaSH0A.TX-STATUS UDSaSH0A.SH-OP-CL-ID UDSaSH0A.IX-ID
  MOVE 5 TO MBSOST0L.STACK-FIELD-POS
  MOVE 8 TO MBSOST0L.STACK-FIELD-LEN
  CALL "CMPXF" UDSASH0A.IX-ID MBSOST0L.STACK-FIELD-POS MBSOST0L.STACK-FIELD-LEN
        STACK-NUMBER
  IF MBSOST0L.STACK-FIELD-POS EQ H'00000000' THEN
     RESET MBSOST0L.STACK-REC-G
     MOVE UDSASH0A.IX-ID TO MBSOST0L.IX-ID
     MOVE UDSASH0A.IT-ID TO MBSOST0L.IT-ID
     MOVE UDSASH0A.IT-SALDO-TYPE TO MBSOST0L.IT-SALDO-TYPE
     FOR #I = 1 TO UDSASH0A.AT-C
        DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
        VALUE DT-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.DT-ID
        VALUE MO-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.MO-ID
        VALUE GM-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.GM-ID
        VALUE PR-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.PR-ID
        VALUE MT-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.MT-ID
        VALUE LK-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.LK-ID
        VALUE ZK-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.ZK-ID
        VALUE DF-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.DF-ID
        VALUE BS-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.BS-ID
        VALUE PRIH-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.PRIH-EI-ID
        VALUE BASE-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.BASE-EI-ID
        VALUE PLAN-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.PLAN-EI-ID
        NONE VALUE
           IGNORE
        END-DECIDE
     END-FOR
     PERFORM STACK-NEW
  ELSE
     MOVE MBSOST0L.STACK-FIELD-POS TO MBSOST0L.STACK-POS
     CALL "RWSX" MBSOST0L.STACK-POS MBSOST0L.STACK-REC-B(1) STACK-READ  STACK-NUMBER
  END-IF
*/**********************
/* вычисл ем знак в зависимости кака  операци  (Д/К) в ккаком регистре (Д/К)
IF UDSASH0A.SA-MODIF NE UDSASH0A.IT-SALDO-TYPE THEN
     #SIGN := #SIGN * -1
  END-IF
/***********************
/*
FOR #I = 1 TO UDSASH0A.AT-C
  DECIDE FOR FIRST CONDITION
     WHEN #TYPE EQ "T" AND UDSASH0A.OP-STATE EQ "S"
                       AND UDSASH0A.TX-STATUS EQ "P"
                       AND UDSASH0A.DT-VALUE >= SA-DT-S
           AND UDSASH0A.DT-VALUE <= SA-DT-PO
        #VID-OPER := 5 /* добавить в ВЫХОДНОе САЛЬДО и ДОБАВИТЬ В ОПЕРАЦИИ
     WHEN #TYPE EQ "T" AND UDSASH0A.DT-VALUE >= SA-DT-S
           AND UDSASH0A.DT-VALUE <= SA-DT-PO
        #VID-OPER := 4  /* добавить в вых. САЛЬДО И ДОБАВИТЬ В ОПЕРАЦИИ
     WHEN #TYPE EQ "T" AND UDSASH0A.DT-VALUE < SA-DT-S
        #VID-OPER := 3  /* ДОБАВИТЬ ВО ВХ. САЛЬДО и в выходное сальдо
     WHEN #TYPE EQ "O" AND UDSASH0A.DT-VALUE > SA-DT-PO
        #VID-OPER := 1  /* ВЫЧЕСТЬ ИЗ ВЫХОДНОГО САЛЬДО и входного садьдо
     WHEN #TYPE EQ "O" AND UDSASH0A.DT-VALUE >= SA-DT-S
           AND UDSASH0A.DT-VALUE <= SA-DT-PO
        #VID-OPER := 2  /* ВЫЧЕСТЬ ИЗ ВХ. САЛЬДО И ДОБАВИТЬ В ОПЕРАЦИИ
     WHEN NONE
           COMPRESS #TYPE UDSASH0A.DT-VALUE TO ERROR-ADDITION(1)
           *ERROR-NR := EC-NUMERIC-OVERFLOW
  END-DECIDE
/*
DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
    VALUE BALC-SUM-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        INCLUDE MBSOSH0C "MBSOST0L.BALC-SUMMA-OUT"
        "MBSOST0L.BALC-SUMMA-IN" "MBSOST0L.BALC-SUMMA-OP-D"
        "MBSOST0L.BALC-SUMMA-OP-K" "SX-NUMBER2-VALUE"
    VALUE PRIH-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        INCLUDE MBSOSH0C "MBSOST0L.PRIH-COL-OUT"
        "MBSOST0L.PRIH-COL-IN" "MBSOST0L.PRIH-COL-OP-D"
        "MBSOST0L.PRIH-COL-OP-K" "SX-NUMBER7-VALUE"
     VALUE BASE-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        INCLUDE MBSOSH0C "MBSOST0L.BASE-COL-OUT"
        "MBSOST0L.BASE-COL-IN" "MBSOST0L.BASE-COL-OP-D"
        "MBSOST0L.BASE-COL-OP-K" "SX-NUMBER7-VALUE"
     VALUE PLAN-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        INCLUDE MBSOSH0C "MBSOST0L.PLAN-COL-OUT"
        "MBSOST0L.PLAN-COL-IN" "MBSOST0L.PLAN-COL-OP-D"
        "MBSOST0L.PLAN-COL-OP-K" "SX-NUMBER7-VALUE"
     NONE VALUE
        IGNORE
     END-DECIDE
  END-FOR
  CALL "RWSX" MBSOST0L.STACK-POS MBSOST0L.STACK-REC-B(1) STACK-WRITE STACK-NUMBER
  IF MBSOST0L.BASE-COL-IN EQ 0 AND
     MBSOST0L.BASE-COL-OP-D EQ 0 AND
     MBSOST0L.BASE-COL-OP-K EQ 0 AND
     MBSOST0L.PRIH-COL-IN EQ 0 AND
     MBSOST0L.PRIH-COL-OP-D EQ 0 AND
     MBSOST0L.PRIH-COL-OP-K EQ 0 AND
     MBSOST0L.BALC-SUMMA-IN EQ 0 AND
     MBSOST0L.BALC-SUMMA-OP-D EQ 0 AND
     MBSOST0L.BALC-SUMMA-OP-K EQ 0 THEN
     PERFORM STACK-DEL
  END-IF
  WRITE MBSOST0L.BASE-COL-IN MBSOST0L.BASE-COL-OP-D
     MBSOST0L.BASE-COL-OP-K MBSOST0L.PRIH-COL-IN
     MBSOST0L.PRIH-COL-OP-D MBSOST0L.PRIH-COL-OP-K
     MBSOST0L.BALC-SUMMA-IN MBSOST0L.BALC-SUMMA-OP-D
     MBSOST0L.BALC-SUMMA-OP-K
END-SUBROUTINE
/*************************************************************************
/****************        RECORD-PROCESS-SALDO ****************************
/*************************************************************************
DEFINE SUBROUTINE RECORD-PROCESS-SALDO
/*
  MOVE UDSOSH0L.SIGN TO #SIGN
  /* Если модификатор прив зан к дате, то отбираем только нужные
/*  WRITE #TYPE #SIGN UDSaSH0A.OP-STATE UDSaSH0A.TX-STATUS UDSaSH0A.SH-OP-CL-ID UDSaSH0A.IX-ID
  MOVE 5 TO MBSOST0L.STACK-FIELD-POS
  MOVE 8 TO MBSOST0L.STACK-FIELD-LEN
  CALL "CMPXF" UDSASH0A.IX-ID MBSOST0L.STACK-FIELD-POS MBSOST0L.STACK-FIELD-LEN
        STACK-NUMBER
  IF MBSOST0L.STACK-FIELD-POS EQ H'00000000' THEN
     RESET MBSOST0L.STACK-REC-G
     MOVE UDSASH0A.IX-ID TO MBSOST0L.IX-ID
     MOVE UDSASH0A.IT-ID TO MBSOST0L.IT-ID
     MOVE UDSASH0A.IT-SALDO-TYPE TO MBSOST0L.IT-SALDO-TYPE
     FOR #I = 1 TO UDSASH0A.AT-C
        DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
        VALUE DT-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.DT-ID
        VALUE MO-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.MO-ID
        VALUE GM-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.GM-ID
        VALUE PR-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.PR-ID
        VALUE MT-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.MT-ID
        VALUE LK-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.LK-ID
        VALUE ZK-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.ZK-ID
        VALUE BS-ATTR-ID
           MOVE UDSASH0A.AT-VALUE(#I) TO MBSOST0L.BS-ID
        VALUE PRIH-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.PRIH-EI-ID
        VALUE BASE-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.BASE-EI-ID
        VALUE PLAN-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBSOST0L.PLAN-EI-ID
        NONE VALUE
           IGNORE
        END-DECIDE
     END-FOR
     PERFORM STACK-NEW
  ELSE
     MOVE MBSOST0L.STACK-FIELD-POS TO MBSOST0L.STACK-POS
     CALL "RWSX" MBSOST0L.STACK-POS MBSOST0L.STACK-REC-B(1) STACK-READ  STACK-NUMBER
  END-IF
  IF UDSASH0A.SA-MODIF NE UDSASH0A.IT-SALDO-TYPE THEN
     #SIGN := #SIGN * -1
  END-IF
/*
  FOR #I = 1 TO UDSASH0A.AT-C
     DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
     VALUE PRIH-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBSOST0L.PRIH-COL-IN := MBSOST0L.PRIH-COL-IN +
              #SIGN * SX-NUMBER7-VALUE
        MBSOST0L.PRIH-COL-OUT := MBSOST0L.PRIH-COL-IN
     VALUE BASE-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBSOST0L.BASE-COL-IN := MBSOST0L.BASE-COL-IN +
              #SIGN * SX-NUMBER7-VALUE
        MBSOST0L.BASE-COL-OUT := MBSOST0L.BASE-COL-IN
     VALUE PLAN-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBSOST0L.PLAN-COL-IN := MBSOST0L.PLAN-COL-IN +
              #SIGN * SX-NUMBER7-VALUE
        MBSOST0L.PLAN-COL-OUT := MBSOST0L.PLAN-COL-IN
     VALUE BALC-SUM-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBSOST0L.BALC-SUMMA-IN := MBSOST0L.BALC-SUMMA-IN +
              #SIGN * SX-NUMBER2-VALUE
        MBSOST0L.BALC-SUMMA-OUT := MBSOST0L.BALC-SUMMA-IN
     NONE VALUE
        IGNORE
     END-DECIDE
  END-FOR
  CALL "RWSX" MBSOST0L.STACK-POS MBSOST0L.STACK-REC-B(1) STACK-WRITE STACK-NUMBER
  IF MBSOST0L.BASE-COL-IN EQ 0 AND
     MBSOST0L.BASE-COL-OP-D EQ 0 AND
     MBSOST0L.BASE-COL-OP-K EQ 0 AND
     MBSOST0L.PRIH-COL-IN EQ 0 AND
     MBSOST0L.PRIH-COL-OP-D EQ 0 AND
     MBSOST0L.PRIH-COL-OP-K EQ 0 AND
     MBSOST0L.BALC-SUMMA-IN EQ 0 AND
     MBSOST0L.BALC-SUMMA-OP-D EQ 0 AND
     MBSOST0L.BALC-SUMMA-OP-K EQ 0 THEN
     PERFORM STACK-DEL
  END-IF
END-SUBROUTINE
/*
/*
DEFINE SUBROUTINE STACK-DEL
/*WRITE 'DEL' MBSOST0L.STACK-POS
/*  ADD 1 TO #COUNT-DEL
  RESET MBSOST0L.STACK-KEY-G
  MOVE MBSOST0A.STACK-FIRST-FREE TO MBSOST0L.SA-NEXT-FREE
  MOVE MBSOST0L.STACK-POS TO MBSOST0A.STACK-FIRST-FREE
  PERFORM STACK-WRITE
END-SUBROUTINE
/*
DEFINE SUBROUTINE STACK-NEW
  IF MBSOST0A.STACK-FIRST-FREE EQ 0 THEN
/*   WRITE 'NEW'
/*     ADD 1 TO #COUNT-NEW
     PERFORM STACK-PUSH
  ELSE
/*   WRITE 'REUSE' MBSOST0A.STACK-FIRST-FREE
/*     ADD 1 TO #COUNT-REUSE
     MOVE MBSOST0A.STACK-FIRST-FREE TO MBSOST1L.STACK-POS
     PERFORM STACK-T-READ
     MOVE MBSOST1L.STACK-POS TO MBSOST0L.STACK-POS
     MOVE MBSOST1L.SA-NEXT-FREE TO MBSOST0A.STACK-FIRST-FREE
     PERFORM STACK-WRITE
  END-IF
END-SUBROUTINE
/*
/*************************************************************************
/****************        RECORD-PROCESS-OPER-period        ***************
/*************************************************************************
DEFINE SUBROUTINE RECORD-PROCESS-OPER-PERIOD
/*
#SIGN := 1
  /* Если модификатор прив зан к дате, то отбираем только нужные
  IF UDSASH0A.DT-VALUE NE 0 THEN
     IF #TYPE EQ "O" AND UDSASH0A.DT-VALUE < SA-DT-S THEN
        ESCAPE ROUTINE
     END-IF
  END-IF
  /* Берем не все транзакционные записи
  IF #TYPE EQ "T" THEN
/*     WRITE 'tran' XXCTXX0A.TX-ID UDSaSH0A.TX-CURRENT-ID UDSaSH0A.OP-STATE  UDSaSH0A.TX-STATUS
     DECIDE FOR FIRST CONDITION
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "A"
        IF XXCTXX0A.TX-ID NE UDSASH0A.TX-CURRENT-ID THEN
           ESCAPE ROUTINE
        END-IF
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "N"
        IGNORE
     WHEN UDSASH0A.OP-STATE EQ "N" AND UDSASH0A.TX-STATUS EQ "P"
        ESCAPE ROUTINE
     WHEN UDSASH0A.OP-STATE EQ "S" AND UDSASH0A.TX-STATUS EQ "P"
        #SIGN := #SIGN * -1
     WHEN NONE
        ESCAPE ROUTINE
     END-DECIDE
/*     WRITE 'tran accept' #SIGN
  END-IF
/*     WRITE 'excl accept' #SIGN
     RESET MBOTOP0L.STACK-REC-G
/* получаем регистры
     MOVE UDSASH0A.MD-IT-ID-D TO MBOTOP0L.MD-IT-ID-D
     MOVE UDSASH0A.MD-IT-ID-K TO MBOTOP0L.MD-IT-ID-K
/*
     MOVE UDSASH0A.OP-OD-ID TO MBOTOP0L.OP-OD-ID
     MOVE UDSASH0A.OP-DC-DD-ID TO MBOTOP0L.OP-DC-DD-ID
     MOVE UDSASH0A.OP-DC-DR-ID TO MBOTOP0L.OP-DC-DR-ID
/*
     MOVE UDSASH0A.SA-MODIF TO MBOTOP0L.MD-IT-SALDO-TYPE
     MOVE UDSASH0A.IX-ID TO MBOTOP0L.MD-IX-ID
/*
     FOR #I = 1 TO UDSASH0A.AT-C
        DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
        VALUE PRIH-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBOTOP0L.PRIH-EI-ID
        VALUE BASE-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBOTOP0L.BASE-EI-ID
        VALUE PLAN-COL-ATTR-ID
           MOVE UDSASH0A.AT-EDIZ-ID(#I) TO MBOTOP0L.PLAN-EI-ID
        NONE VALUE
           IGNORE
        END-DECIDE
     END-FOR
/*
  FOR #I = 1 TO UDSASH0A.AT-C
     DECIDE ON FIRST VALUE UDSASH0A.AT-ATTR-ID(#I)
     VALUE PRIH-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBOTOP0L.PRIH-COL := SX-NUMBER7-VALUE * #SIGN
     VALUE BASE-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBOTOP0L.BASE-COL := SX-NUMBER7-VALUE * #SIGN
     VALUE PLAN-COL-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBOTOP0L.PLAN-COL := SX-NUMBER7-VALUE * #SIGN
     VALUE BALC-SUM-ATTR-ID
        MOVE UDSASH0A.AT-VALUE(#I) TO SX-NUMBER-NUMBER
        MBOTOP0L.BALC-SUMMA := SX-NUMBER2-VALUE * #SIGN
     NONE VALUE
        IGNORE
     END-DECIDE
  END-FOR
/***********
     PERFORM STACK-PUSH-OP
END-SUBROUTINE
/**************************************************
INCLUDE XXSTMN4C "MBSOST0A" "MBSOST0L-CONST" "MBSOST0L"
        "STACK-INIT" "STACK-FREE" "STACK-REALLOC"
        "STACK-PUSH" "STACK-READ" "STACK-WRITE" "STACK-LOCATE"
INCLUDE XXSTMN4C "MBSOST0A" "MBSOST0L-CONST" "MBSOST1L"
        "STACK-T-INIT" "STACK-T-FREE" "STACK-T-REALLOC"
        "STACK-T-PUSH" "STACK-T-READ" "STACK-T-WRITE" "STACK-T-LOCATE"
/*
INCLUDE XXSTMN5C "MBSOST0A" "MBOTOP0L-CONST" "MBOTOP0L"
        "STACK-INIT-OP" "STACK-FREE-OP" "STACK-REALLOC-OP"
        "STACK-PUSH-OP" "STACK-READ-OP" "STACK-WRITE-OP"
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END
