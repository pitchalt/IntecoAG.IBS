* >Natural Source Header 000000 /*<RO>>
* :NatName MBOSDL0S
* :UID ARMK01
* :Mode S
* :CP
* :Date 20070304
* :Time 1245000
* <Natural Source Header /*<<RO>
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING MBOSDL0A
PARAMETER USING MBOSXS0A
PARAMETER USING UXCSXX0A
/*
LOCAL USING XXXXEC0L
LOCAL USING XPPBXX0A
/*
LOCAL USING MBOSXS0L
/*
LOCAL USING MBPHMN0A
LOCAL USING MBPMMN0A
LOCAL USING MBRXHM0A
LOCAL USING MBRXMM0A
LOCAL USING MBRXPM0A
/*
LOCAL USING MBPRMN0A
/*
LOCAL USING MBSAST0A
LOCAL USING MBSASH0A
LOCAL USING MBSAST0L
/*
LOCAL USING UDDRLS0L
LOCAL USING UDDRSH0A
/*
LOCAL
1 #DT-START (N8)
1 REDEFINE #DT-START
2 #DT-START-A (A8)
1 #DT-STOP  (N8)
1 REDEFINE #DT-STOP
2 #DT-STOP-A (A8)
1 #IS-ERROR      (L)
1 #NOT-NUMBER    (L)
1 #I       (I4)
1 #J       (I4)
1 #K       (I4)
1 #OK-F    (A27)
1 REDEFINE #OK-F
2 OK-OG    (N5)
2 OK-KM    (A22)
1 #CENA    (P13.2)
1 #LEN     (I4)
1 #CUR-MT-POS  (I4)
1 #CUR-MT-ID   (P15)
/*
1 #SRT-FLD (B4/1:10)
/*
1 #COL     (P8.7)
1 #SUMMA  (P13.2)
1 #SUMMA2  (P13.2)
/*
1 #DR-CONT (1:2)
2 DR-CONT-B (B16)
2 REDEFINE DR-CONT-B
3 DR-UP-ID (P15)
3 DR-TYPE-ID (P7)
3 DR-SORT (P7)
/*
1 #METHOD   (A30)
END-DEFINE
DEFINE SUBROUTINE MBOSDL0S
/*
MOVE EDITED DT-START (EM=YYYYMMDD) TO #DT-START-A
MOVE EDITED DT-STOP  (EM=YYYYMMDD) TO #DT-STOP-A
/*
CALL "FRS"
PERFORM STDOC-INIT
/*
RESET XXERX00A
MOVE 121    TO MBSASH0A.IT-ID(1)
MOVE 122    TO MBSASH0A.IT-ID(2)
MOVE 123    TO MBSASH0A.IT-ID(3)
MOVE 124    TO MBSASH0A.IT-ID(4)
MOVE 125    TO MBSASH0A.IT-ID(5)
MOVE 902    TO MBSASH0A.SA-DT-ATTR-ID
/*
MOVE EDITED #DT-START-A TO MBSASH0A.SA-DT (EM=YYYYMMDD)
MOVE CVT-MO-ID TO MBSASH0A.MO-ID
/*
PERFORM SALDO-STACK-INIT
/* читаем лимит остатков
MOVE "SEARCH" TO MBSASH0A.BL-COMMAND
PERFORM MBSASH0S XXERX00A XXCTXX0A MBSASH0A MBSAST0A UXCSXX0A
/*  WRITE 'limit' RETURN-CODE mbsash0a.PR-ID mbsash0a.PRIH-COL mbsash0a.PRIH-EI-ID mbsash0a.BASE-COL mbsash0a.BASE-EI-ID mbsash0a.BALC-SUMMA
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
IF MBSAST0A.STACK-LEN EQ 0 THEN
     WRITE 'Данных не найдено'
     PERFORM SALDO-STACK-FREE
/*     RETURN-CODE := 2412
     ESCAPE ROUTINE
END-IF
INCLUDE XPPBIN0C "MBSAST0A.STACK-LEN" '"Загрузка сальдо"'
RESET XXERX00A
FOR #I = 1 TO MBSAST0A.STACK-LEN
  MOVE #I TO MBSAST0L.STACK-POS PERFORM SALDO-READ
  INCLUDE XPPBST0C "#I"
  RESET STDOC.STACK-REC-G STDOC.STACK-KEY-G
  MOVE MBSAST0L.MO-ID TO STDOC.MO-ID
  MOVE MBSAST0L.MT-ID TO STDOC.MT-ID
  MOVE MBSAST0L.PR-ID TO STDOC.PR-ID
  RESET RETURN-CODE
  PERFORM STDOC-LOCATE
  IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
     PERFORM STDOC-PUSH
     MOVE #DT-START TO STDOC.DT-ID
     SUBTRACT 1 FROM STDOC.DT-ID
     MOVE MBOSXS0A.STACK-LEN TO STDOC.DC-ID
     MOVE 1 TO STDOC.DC-TYPE
  ELSE
     PERFORM STDOC-READ
  END-IF
  ADD MBSAST0L.BASE-COL TO STDOC.COL
  ADD MBSAST0L.BASE-COL TO STDOC.OST-COL
  ADD MBSAST0L.BALC-SUMMA TO STDOC.SUMMA
  ADD MBSAST0L.BALC-SUMMA TO STDOC.OST-SUMMA
  PERFORM STDOC-WRITE
END-FOR
/*
PERFORM SALDO-STACK-FREE
/*
MOVE 1001 TO UDDRSH0A.DD-ID
MOVE *PROGRAM TO UDDRSH0A.SH-RETAIN
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE #DT-START TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE #DT-STOP TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE 30003 TO UDDRSH0A.SH-AT-ID(2,1)
MOVE "EQ" TO UDDRSH0A.SH-OPER(2)
MOVE CVT-MO-ID TO UDDRSH0A.SH-VALUE-P(2,1)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
RESET XPPBXX0A
FIND UR-DOC-DATA-LIST WITH UDDRSH0A.SH-RETAIN
/*  WRITE UR-DOC-DATA-LIST.OD-ID UR-DOC-DATA-LIST.DR-TYPE-ID
/*        UR-DOC-DATA-LIST.DR-ID
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"Загрузка приходов"'
  END-START
  INCLUDE XPPBST0C "*COUNTER"
/*
  MOVE UR-DOC-DATA-LIST.DR-ID TO MBPHMN0A.PO-ID
  MOVE "READ" TO MBPHMN0A.BL-COMMAND
  PERFORM MBPHMN0S XXERX00A XXCTXX0A MBPHMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
  MOVE 1002 TO #DR-CONT.DR-TYPE-ID(1)
  MOVE 0 TO #DR-CONT.DR-SORT(1)
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
  MOVE 1002 TO #DR-CONT.DR-TYPE-ID(2)
  MOVE 9999999 TO #DR-CONT.DR-SORT(2)
  FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
/*     WRITE UR-DOC-DATA-LIST.DR-UP-ID UR-DOC-DATA-LIST.DR-ID
     MOVE UR-DOC-DATA-LIST.DR-ID TO MBPMMN0A.PM-ID
     MOVE "READ" TO MBPMMN0A.BL-COMMAND
     PERFORM MBPMMN0S XXERX00A XXCTXX0A MBPMMN0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
     MOVE MBPMMN0A.PR-ID TO MBPRMN0A.PR-ID
     MOVE "READ" TO MBPRMN0A.BL-COMMAND
     PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
     RESET STDOC.STACK-REC-G STDOC.STACK-KEY-G
     MOVE MBPHMN0A.MO-ID TO STDOC.MO-ID
     MOVE MBPMMN0A.MT-ID TO STDOC.MT-ID
     MOVE MBPMMN0A.PR-ID TO STDOC.PR-ID
     MOVE MBPMMN0A.PM-ID TO STDOC.DR-ID
     MOVE EDITED MBPHMN0A.PO-DATE (EM=YYYYMMDD) TO STDOC.DT-ID-A
     MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO STDOC.DD-ID
     MOVE UR-DOC-DATA-LIST.OD-ID TO STDOC.OD-ID
     PERFORM STDOC-PUSH
     MOVE MBOSXS0A.STACK-LEN TO STDOC.DC-ID
     MOVE 2 TO STDOC.DC-TYPE
     MOVE MBPMMN0A.BASE-COL TO STDOC.COL
     MOVE MBPMMN0A.BASE-COL TO STDOC.OST-COL
     MOVE MBPMMN0A.DR-CENA-SUMMA TO STDOC.SUMMA
     MOVE MBPMMN0A.DR-CENA-SUMMA TO STDOC.OST-SUMMA
     PERFORM STDOC-WRITE
  END-FIND
END-FIND
/*
MOVE 1601 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRO00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE #DT-START TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE #DT-STOP TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE 20003 TO UDDRSH0A.SH-AT-ID(2,1)
MOVE 30003 TO UDDRSH0A.SH-AT-ID(2,2)
MOVE "EQ" TO UDDRSH0A.SH-OPER(2)
MOVE CVT-MO-ID TO UDDRSH0A.SH-VALUE-P(2,1)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
MOVE 1701 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRL00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE #DT-START TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE #DT-STOP TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE 20003 TO UDDRSH0A.SH-AT-ID(2,1)
MOVE "EQ" TO UDDRSH0A.SH-OPER(2)
MOVE CVT-MO-ID TO UDDRSH0A.SH-VALUE-P(2,1)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
MOVE 1801 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRE00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE #DT-START TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE #DT-STOP TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE 20003 TO UDDRSH0A.SH-AT-ID(2,1)
MOVE "EQ" TO UDDRSH0A.SH-OPER(2)
MOVE CVT-MO-ID TO UDDRSH0A.SH-VALUE-P(2,1)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
RESET XPPBXX0A
FIND UR-DOC-DATA-LIST WITH "CVTRO00P" OR "CVTRL00P" OR "CVTRE00P"
/*  WRITE UR-DOC-DATA-LIST.OD-ID UR-DOC-DATA-LIST.DR-TYPE-ID
/*        UR-DOC-DATA-LIST.DR-ID
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"Загрузка расхода"'
  END-START
  INCLUDE XPPBST0C "*COUNTER"
  MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXHM0A.DR-ID
  MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXHM0A.DD-ID
  MOVE "READ" TO MBRXHM0A.BL-COMMAND
  PERFORM MBRXHM0S XXERX00A XXCTXX0A MBRXHM0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  DECIDE ON FIRST VALUE UR-DOC-DATA-LIST.DR-TYPE-ID
  VALUE 1601
     MOVE 1602 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1602 TO #DR-CONT.DR-TYPE-ID(2)
  VALUE 1701
     MOVE 1702 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1702 TO #DR-CONT.DR-TYPE-ID(2)
  VALUE 1801
     MOVE 1802 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1802 TO #DR-CONT.DR-TYPE-ID(2)
  NONE VALUE
     IGNORE
  END-DECIDE
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
  MOVE 0 TO #DR-CONT.DR-SORT(1)
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
  MOVE 9999999 TO #DR-CONT.DR-SORT(2)
  FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
     MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXMM0A.DR-ID
     MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXMM0A.DD-ID
     MOVE "READ" TO MBRXMM0A.BL-COMMAND
     PERFORM MBRXMM0S XXERX00A XXCTXX0A MBRXMM0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
     DECIDE ON FIRST VALUE UR-DOC-DATA-LIST.DR-TYPE-ID
     VALUE 1602
        MOVE 1603 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1603 TO #DR-CONT.DR-TYPE-ID(2)
     VALUE 1702
        MOVE 1703 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1703 TO #DR-CONT.DR-TYPE-ID(2)
     VALUE 1802
        MOVE 1803 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1803 TO #DR-CONT.DR-TYPE-ID(2)
     NONE VALUE
        IGNORE
     END-DECIDE
     MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
     MOVE 0 TO #DR-CONT.DR-SORT(1)
     MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
     MOVE 9999999 TO #DR-CONT.DR-SORT(2)
     FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
        MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXPM0A.DR-ID
        MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXPM0A.DD-ID
        MOVE "READ" TO MBRXPM0A.BL-COMMAND
        PERFORM MBRXPM0S XXERX00A XXCTXX0A MBRXPM0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        /*
        MOVE MBRXPM0A.PR-ID TO MBPRMN0A.PR-ID
        MOVE "READ" TO MBPRMN0A.BL-COMMAND
        PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        /*
        RESET STDOC.STACK-REC-G STDOC.STACK-KEY-G
        IF MBRXHM0A.IN-MO-ID EQ MBRXHM0A.OUT-MO-ID THEN
           MOVE MBRXHM0A.IN-MO-ID TO STDOC.MO-ID
           MOVE MBRXHM0A.OUT-MO-ID TO STDOC.OUT-MO-ID
           MOVE 4 TO STDOC.DC-TYPE
        ELSE IF MBRXHM0A.IN-MO-ID EQ CVT-MO-ID THEN
           MOVE MBRXHM0A.IN-MO-ID TO STDOC.MO-ID
           MOVE MBRXHM0A.OUT-MO-ID TO STDOC.OUT-MO-ID
           MOVE 3 TO STDOC.DC-TYPE
        ELSE IF MBRXHM0A.OUT-MO-ID EQ CVT-MO-ID
           MOVE MBRXHM0A.OUT-MO-ID TO STDOC.MO-ID
           MOVE MBRXHM0A.IN-MO-ID TO STDOC.OUT-MO-ID
           MOVE 2 TO STDOC.DC-TYPE
        ELSE
           ESCAPE TOP
        END-IF END-IF END-IF
        MOVE MBRXMM0A.MT-ID TO STDOC.MT-ID
        MOVE MBRXPM0A.PR-ID TO STDOC.PR-ID
        MOVE MBRXPM0A.DR-ID TO STDOC.DR-ID
        MOVE EDITED MBRXHM0A.RX-DATE (EM=YYYYMMDD) TO STDOC.DT-ID-A
        MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO STDOC.DD-ID
        MOVE UR-DOC-DATA-LIST.OD-ID TO STDOC.OD-ID
        PERFORM STDOC-PUSH
        MOVE MBOSXS0A.STACK-LEN TO STDOC.DC-ID
        MOVE MBRXPM0A.BASE-COL TO STDOC.COL
        MOVE MBRXPM0A.BASE-COL TO STDOC.OST-COL
        MOVE MBRXPM0A.BALC-SUMMA TO STDOC.SUMMA
        MOVE MBRXPM0A.BALC-SUMMA TO STDOC.OST-SUMMA
        PERFORM STDOC-WRITE
        /*
     END-FIND
  END-FIND
END-FIND
/*
RESET STDOC.STACK-REC-G
MOVE MBOSXS0A.STACK-LEN TO #LEN
/* Конверси  по парти м
MOVE 5 TO #SRT-FLD(1)
MOVE 16 TO #SRT-FLD(2)
MOVE 37 TO #SRT-FLD(3)
MOVE 9 TO #SRT-FLD(4)
CALL "SRTX" #SRT-FLD(1) #SRT-FLD(2) #SRT-FLD(3)
     #SRT-FLD(4) MBOSXS0A.STACK-NUMBER
FOR #I = 1 TO #LEN
  MOVE #I TO STDOC.STACK-POS PERFORM STDOC-READ
/*WRITE "I" #I STDOC.MT-ID #CUR-MT-ID #LEN
  IF STDOC.MT-ID NE #CUR-MT-ID THEN
     MOVE #I TO #CUR-MT-POS
     MOVE STDOC.MT-ID TO #CUR-MT-ID
     /* Ищем одинаковые партии и количество
     MOVE "EQUAL-FULL" TO #METHOD
     PERFORM PROCESS-BACKWARD
     /* ИЩEM ПAPTИЮ ПO ДATE PAHЬШE
     MOVE "EQUAL-PARTY" TO #METHOD
     PERFORM PROCESS-BACKWARD
     /* ИЩEM ПAPTИЮ
     MOVE "EQUAL-PARTY" TO #METHOD
     PERFORM PROCESS-FORWARD
     /* ИЩEM XOTЬ ЧTO-HИБУTЬ CTAPШE
     MOVE "EQUAL-MATERIAL" TO #METHOD
     PERFORM PROCESS-BACKWARD
     /* ИЩEM XOTЬ ЧTO-HИБУTЬ BOOБЩE
     MOVE "EQUAL-MATERIAL" TO #METHOD
     PERFORM PROCESS-FORWARD
  END-IF
END-FOR
/*
DEFINE SUBROUTINE PROCESS-BACKWARD
  FOR #J = #I TO #LEN
     MOVE #J TO STDOC2.STACK-POS PERFORM STDOC2-READ
/*      WRITE "J" #J STDOC2.MT-ID #CUR-MT-ID STDOC2.DC-TYPE
     IF STDOC2.MT-ID NE #CUR-MT-ID THEN ESCAPE BOTTOM END-IF
     IF STDOC2.DC-TYPE NE 3 THEN ESCAPE TOP END-IF
     IF STDOC2.COL EQ 0 THEN ESCAPE TOP END-IF
     FOR #K = #J TO #I STEP -1
        MOVE #K TO STDOC.STACK-POS PERFORM STDOC-READ
/*         WRITE "K" #K STDOC2.PR-ID STDOC.PR-ID STDOC.DC-TYPE
        IF STDOC2.MT-ID NE STDOC.MT-ID THEN *ERROR-NR := 1000 END-IF
        IF STDOC.DC-TYPE NE 1 AND STDOC.DC-TYPE NE 2 THEN ESCAPE TOP END-IF
        IF STDOC.COL EQ 0 THEN ESCAPE TOP END-IF
        PERFORM METHOD-CALL
        IF STDOC2.COL EQ 0 THEN ESCAPE BOTTOM END-IF
     END-FOR
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE PROCESS-FORWARD
  FOR #J = #I TO #LEN
     MOVE #J TO STDOC2.STACK-POS PERFORM STDOC2-READ
     IF STDOC2.MT-ID NE #CUR-MT-ID THEN ESCAPE BOTTOM END-IF
     IF STDOC2.DC-TYPE NE 3 THEN ESCAPE TOP END-IF
     IF STDOC2.COL EQ 0 THEN ESCAPE TOP END-IF
/*      WRITE "J" #J STDOC2.MT-ID #CUR-MT-ID STDOC2.DC-TYPE
     FOR #K = #J TO #LEN
        MOVE #K TO STDOC.STACK-POS PERFORM STDOC-READ
        IF STDOC.MT-ID NE #CUR-MT-ID THEN ESCAPE BOTTOM END-IF
/*      WRITE "K" #K STDOC2.PR-ID STDOC.PR-ID STDOC.DC-TYPE
        IF STDOC2.MT-ID NE STDOC.MT-ID THEN *ERROR-NR := 1000 END-IF
        IF STDOC.DC-TYPE NE 1 AND STDOC.DC-TYPE NE 2 THEN ESCAPE TOP END-IF
        IF STDOC.COL EQ 0 THEN ESCAPE TOP END-IF
        PERFORM METHOD-CALL
        IF STDOC2.COL EQ 0 THEN ESCAPE BOTTOM END-IF
     END-FOR
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE METHOD-CALL
  DECIDE ON FIRST VALUE #METHOD
     VALUE "EQUAL-FULL"
        PERFORM METHOD-EQUAL-FULL
     VALUE "EQUAL-PARTY"
        PERFORM METHOD-EQUAL-PARTY
     VALUE "EQUAL-MATERIAL"
        PERFORM METHOD-EQUAL-MATERIAL
     NONE VALUE
        *ERROR-NR := EC-OBJECT-ATTRIBUTE-REQUIRED
  END-DECIDE
END-SUBROUTINE
/*
DEFINE SUBROUTINE METHOD-EQUAL-FULL
  IF STDOC2.COL NE STDOC.COL THEN ESCAPE ROUTINE END-IF
  PERFORM METHOD-EQUAL-PARTY
END-SUBROUTINE
/*
DEFINE SUBROUTINE METHOD-EQUAL-PARTY
  IF STDOC2.PR-ID NE STDOC.PR-ID THEN ESCAPE ROUTINE END-IF
/*IF STDOC2.MT-ID EQ 3438 THEN
/*  WRITE ">" STDOC.COL STDOC.SUMMA STDOC2.COL STDOC2.SUMMA
/*END-IF
  IF STDOC2.COL >= STDOC.COL THEN
     SUBTRACT STDOC.COL FROM STDOC2.COL
     SUBTRACT STDOC.SUMMA FROM STDOC2.SUMMA
     RESET STDOC.COL STDOC.SUMMA
  ELSE IF STDOC2.COL < STDOC.COL THEN
     COMPUTE ROUNDED #CENA = STDOC.SUMMA / STDOC.COL
     COMPUTE ROUNDED STDOC2.SUMMA = STDOC2.SUMMA -
           STDOC2.COL * STDOC.SUMMA / STDOC.COL
     COMPUTE ROUNDED STDOC.SUMMA = STDOC.SUMMA -
           STDOC2.COL * STDOC.SUMMA / STDOC.COL
     STDOC.COL := STDOC.COL - STDOC2.COL
     STDOC2.COL := 0
  END-IF END-IF
  PERFORM STDOC-WRITE
  PERFORM STDOC2-WRITE
/*IF STDOC2.MT-ID EQ 3438 THEN
/*  WRITE "<" STDOC.COL STDOC.SUMMA STDOC2.COL STDOC2.SUMMA
/*END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE METHOD-EQUAL-MATERIAL
  IF STDOC2.COL >= STDOC.COL THEN
     #COL := STDOC.COL
     #SUMMA := STDOC.SUMMA
     COMPUTE ROUNDED #SUMMA2 = #COL * STDOC2.SUMMA / STDOC2.COL
  ELSE IF STDOC2.COL < STDOC.COL THEN
     #COL := STDOC2.COL
     COMPUTE ROUNDED #SUMMA = #COL * STDOC.SUMMA / STDOC.COL
     #SUMMA2 := STDOC2.SUMMA
  END-IF END-IF
  /*
  SUBTRACT #COL FROM STDOC.COL
  SUBTRACT #SUMMA FROM STDOC.SUMMA
  PERFORM STDOC-WRITE
  /*
  MOVE STDOC.PR-ID TO STDOC2.PR-ID
  MOVE BY NAME STDOC2.STACK-REC-G TO STDOC.STACK-REC-G
  MOVE #COL TO STDOC.COL
  MOVE #SUMMA TO STDOC.SUMMA
  RESET STDOC.OST-COL STDOC.OST-SUMMA
  MOVE 5 TO STDOC.DC-TYPE
  PERFORM STDOC-PUSH
  /*
  PERFORM STDOC2-READ
  MOVE STDOC2.PR-ID TO STDOC.PR-ID
  MOVE #SUMMA2 TO STDOC.SUMMA
  MOVE 6 TO STDOC.DC-TYPE
  PERFORM STDOC-PUSH
  /*
  PERFORM STDOC-READ
  SUBTRACT #COL FROM STDOC2.COL
  SUBTRACT #SUMMA2 FROM STDOC2.SUMMA
  PERFORM STDOC2-WRITE
END-SUBROUTINE
/*
DEFINE SUBROUTINE ERROR-RECOVER
  IGNORE
END-SUBROUTINE
/*
DEFINE SUBROUTINE STDOC2-READ
  CALL "RWSX" STDOC2.STACK-POS STDOC2.STACK-REC-B(1)
     H'00000000' MBOSXS0A.STACK-NUMBER
END-SUBROUTINE
/*
DEFINE SUBROUTINE STDOC2-WRITE
  CALL "RWSX" STDOC2.STACK-POS STDOC2.STACK-REC-B(1)
     H'00000001' MBOSXS0A.STACK-NUMBER
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "MBSAST0A" "MBSAST0L-CONST" "MBSAST0L"
        "SALDO-STACK-INIT" "SALDO-STACK-FREE" "SALDO-STACK-REALLOC"
        "SALDO-PUSH" "SALDO-READ" "SALDO-WRITE" "SALDO-LOCATE"
/*
INCLUDE XXSTMN4C "MBOSXS0A" "STDOC-CONST" "STDOC"
        "STDOC-INIT" "STDOC-FREE" "STDOC-REALLOC"
        "STDOC-PUSH" "STDOC-READ" "STDOC-WRITE" "STDOC-LOCATE"
/*
INCLUDE XXERSY2C
END-SUBROUTINE
END
