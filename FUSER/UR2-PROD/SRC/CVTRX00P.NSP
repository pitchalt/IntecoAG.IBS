* >Natural Source Header 000000 /*<RO>>
* :NatName CVTRX00P
* :UID ARMK01
* :Mode S
* :CP
* :Date 20070303
* :Time 1124000
* <Natural Source Header /*<<RO>
DEFINE DATA
LOCAL USING XXERX00A
/*LOCAL USING CXUSCT0A
/*LOCAL USING CXCLCT0A
LOCAL USING XXCTXX0A
LOCAL USING UDDRLS0L
/*LOCAL USING UDDRMN0L
LOCAL USING UXCSXX0A
/*
LOCAL USING MBRXHM0A
LOCAL USING MBRXMM0A
LOCAL USING MBRXPM0A
/*
LOCAL USING UETXMN0A
LOCAL USING MBMZMN0A
LOCAL USING MBPRMN0A
LOCAL USING MBMOMN0A
LOCAL USING MBMTMN0A
LOCAL USING XBDPMN0A
LOCAL USING MBVOMN0A
LOCAL USING MBZKMN0A
/*
LOCAL USING XXXXEC0L
LOCAL USING XPPBXX0A
LOCAL USING DOCUMENT
LOCAL USING UDDRSH0A
/*
LOCAL USING KDFL
LOCAL USING LCLZKL
/*
LOCAL
1 #IS-ERROR      (L)
1 #NOT-NUMBER    (L)
1 #I       (I4)
1 #J       (I4)
1 #OK-F    (A27)
1 REDEFINE #OK-F
2 OK-OG    (N5)
2 OK-KM    (A22)
1 #CENA    (P13.2)
1 #KEYLEN  (I4)
/*
1 STKEY-CONST
 2 STKEY-REC-LEN (I4) CONST <60>
 2 REDEFINE STKEY-REC-LEN
 3 STACK-REC-LEN (I4)
 2 STACK-ALLOC-COUNT (I4) CONST <10000>
 2 STACK-KEY-START (I4) CONST <1>
 2 STKEY-KEY-LEN (I4) CONST <40>
 2 REDEFINE STKEY-KEY-LEN
 3 STACK-KEY-LEN (I4)
/*
1 STKEY
 2 STACK-NUMBER (B4)
 2 STACK-COUNT (I4)
 2 STACK-LEN (I4)
 2 STACK-ID (I4)
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:STKEY-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 STACK-KEY-B (B1/1:STKEY-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 MO-ID (P15)
 6 MT-ID (P15)
 6 DP-ID (P15)
 6 ZK-ID (P15)
 6 VO-ID (P15)
 4 STKEY-ID (B4)
 4 ASUM-COL (P8.7)
 4 ARMK-COL (P8.7)
/*
1 STASUM-CONST
 2 STASUM-REC-LEN (I4) CONST <32>
 2 REDEFINE STASUM-REC-LEN
 3 STACK-REC-LEN (I4)
 2 STACK-ALLOC-COUNT (I4) CONST <10000>
 2 STACK-KEY-START (I4) CONST <1>
 2 STASUM-KEY-LEN (I4) CONST <12>
 2 REDEFINE STASUM-KEY-LEN
 3 STACK-KEY-LEN (I4)
/*
1 STASUM
 2 STACK-NUMBER (B4)
 2 STACK-COUNT (I4)
 2 STACK-LEN (I4)
 2 STACK-ID (I4)
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:STASUM-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 STACK-KEY-B (B1/1:STASUM-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 STKEY-ID   (B4)
 6 KP-ND      (P11)
 6 KP-STR     (P3)
 4 STASUM-ID  (B4)
 4 ASUM-COL   (P8.7)
 4 ASUM-SUMMA (P13.2)
/*
1 STARMK-CONST
 2 STARMK-REC-LEN (I4) CONST <56>
 2 REDEFINE STARMK-REC-LEN
 3 STACK-REC-LEN (I4)
 2 STACK-ALLOC-COUNT (I4) CONST <10000>
 2 STACK-KEY-START (I4) CONST <1>
 2 STARMK-KEY-LEN (I4) CONST <28>
 2 REDEFINE STARMK-KEY-LEN
 3 STACK-KEY-LEN (I4)
/*
1 STARMK
 2 STACK-NUMBER (B4)
 2 STACK-COUNT (I4)
 2 STACK-LEN (I4)
 2 STACK-ID (I4)
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:STARMK-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 STACK-KEY-B (B1/1:STARMK-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 STDOC-ID (B4)
 6 KP-ND  (P11)
 6 KP-STR (P3)
 6 RXP-ID (P15)
 6 PR-ID  (P15)
 4 STARMK-ID (B4)
 4 STKEY-ID  (B4)
 4 RXP-DD-ID  (P7)
 4 ARMK-COL   (P8.7)
 4 ARMK-SUMMA (P13.2)
/*
1 STDOC-CONST
 2 STDOC-REC-LEN (I4) CONST <40>
 2 REDEFINE STDOC-REC-LEN
 3 STACK-REC-LEN (I4)
 2 STACK-ALLOC-COUNT (I4) CONST <10000>
 2 STACK-KEY-START (I4) CONST <1>
 2 STDOC-KEY-LEN (I4) CONST <20>
 2 REDEFINE STDOC-KEY-LEN
 3 STACK-KEY-LEN (I4)
/*
1 STDOC
 2 STACK-NUMBER (B4)
 2 STACK-COUNT (I4)
 2 STACK-LEN (I4)
 2 STACK-ID (I4)
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:STDOC-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 STACK-KEY-B (B1/1:STDOC-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 STKEY-ID (B4)
 6 RXH-ID   (P15)
 6 RXM-ID   (P15)
 4 STDOC-ID (B4)
 4 RXH-DD-ID (P7)
 4 RXM-DD-ID (P7)
 4 ARMK-COL (P8.7)
/*
1 #KP-F (A8)
1 REDEFINE #KP-F
2 KP-ND  (P11)
2 KP-STR (P3)
1 REDEFINE #KP-F
2 #KP-F-B (B8)
1 #DR-CONT (1:2)
2 DR-CONT-B (B16)
2 REDEFINE DR-CONT-B
3 DR-UP-ID (P15)
3 DR-TYPE-ID (P7)
3 DR-SORT (P7)
/*
1 #ERROR
2 ERR       (A3)
2 PO-NUMBER (A10)
2 PO-DATE   (D)
2 OBJ-ID    (P15)
2 MT-ID     (P15)
2 VO-ID     (P15)
2 ZK-ID     (P15)
2 ASUM-COL  (P8.7)
2 ARMK-COL  (P8.7)
2 ASUM-SUM  (P13.2)
2 ARMK-SUM  (P13.2)
END-DEFINE
CALL "FRS"
PERFORM STKEY-INIT
PERFORM STASUM-INIT
PERFORM STDOC-INIT
PERFORM STARMK-INIT
FIND DOCUMENT WITH DT-F EQ 20070101 THRU 20070131
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"ÇAÃPÓÇKA ASUM RX"'
  END-START
  IF TY-F EQ "PO" OR OG-F NE 1000 OR OP-F EQ 6 OR OP-F EQ 7 THEN
     ESCAPE TOP
  END-IF
  INCLUDE XPPBST0C "*COUNTER"
  IF DOCUMENT.TY-F = "R2" DOCUMENT.TY-F := "RD"  END-IF
/*WRITE DOCUMENT.TY-F DOCUMENT.ND-F DOCUMENT.DT-F DOCUMENT.NZ-F
  FOR #I = 1 TO C*ST-F
     RESET STKEY.STACK-REC-G STKEY.STACK-KEY-G
     RESET STASUM.STACK-REC-G STASUM.STACK-KEY-G
     /*
     IF DOCUMENT.KM-F(#I) EQ " " THEN ESCAPE TOP END-IF
     STKEY.MO-ID := DOCUMENT.OG-F * 100000 + DOCUMENT.OP-F
     MOVE 1000 TO #OK-F.OK-OG
     MOVE KM-F(#I) TO #OK-F.OK-KM
     FIND ASUM-KODIF-FILE WITH OK-F EQ #OK-F
        MOVE INT-NUM-KM TO STKEY.MT-ID
     END-FIND
     RESET ZAKAZ
     FIND ZAKAZ WITH ZK-F EQ NZ-F OR ZZ-F EQ NZ-F
        MOVE ZAKAZ.INT-NUM-ZK TO STKEY.ZK-ID
     END-FIND
     MOVE DOCUMENT.KP-F(#I) TO #KP-F
     DECIDE ON FIRST VALUE DOCUMENT.TY-F
     VALUE "VZ"
        IF NUM_ZAP EQ #KP-F.KP-ND THEN ESCAPE TOP END-IF
        STKEY.VO-ID := DOCUMENT.OG-F * 100000 + DOCUMENT.PL-F
     VALUE "RD"
        STKEY.DP-ID := DOCUMENT.OG-F * 100000 + DOCUMENT.PL-F
     VALUE "SP"
        STKEY.DP-ID := DOCUMENT.OG-F * 100000 + DOCUMENT.PL-F
     VALUE "OS"
        STKEY.VO-ID := DOCUMENT.OG-F * 100000 + DOCUMENT.PL-F
     NONE VALUE
        WRITE DOCUMENT.TY-F  DOCUMENT.ND-F DOCUMENT.DT-F
        ESCAPE TOP
     END-DECIDE
     IF  DOCUMENT.TY-F EQ "OS" THEN RESET STKEY.ZK-ID END-IF
     DECIDE ON FIRST VALUE STKEY.DP-ID
     VALUE 100000141 STKEY.DP-ID := 100000014
     VALUE 100000142 STKEY.DP-ID := 100000014
     VALUE 100000143 STKEY.DP-ID := 100000014
     VALUE 100000161 STKEY.DP-ID := 100000016
     VALUE 100000162 STKEY.DP-ID := 100000016
     VALUE 100000201 STKEY.DP-ID := 100000020
     VALUE 100000501 STKEY.DP-ID := 100000005
     VALUE 100000705 STKEY.DP-ID := 100000007
     VALUE 100081050 STKEY.DP-ID := 100000073
     VALUE 100090120 STKEY.DP-ID := 100000090
     VALUE 100090150 STKEY.DP-ID := 100000090
     VALUE 100091411 STKEY.DP-ID := 100000080
     VALUE 100000071 STKEY.DP-ID := 100000007
     VALUE 100000042 STKEY.DP-ID := 100000041
     NONE VALUE
        IGNORE
     END-DECIDE
     PERFORM STKEY-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        #KEYLEN := STKEY.STACK-LEN
        ADD 1 TO #KEYLEN
        MOVE #KEYLEN TO STKEY.STKEY-ID
        PERFORM STKEY-PUSH
     ELSE
/*      WRITE DOCUMENT.TY-F DOCUMENT.ND-F DOCUMENT.DT-F
/*            DOCUMENT.NZ-F DOCUMENT.KM-F(#I)
        PERFORM STKEY-READ
     END-IF
     MOVE STKEY.STKEY-ID TO STASUM.STKEY-ID
     MOVE #KP-F.KP-ND TO STASUM.KP-ND
     MOVE #KP-F.KP-STR TO STASUM.KP-STR
     PERFORM STASUM-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        #KEYLEN := STASUM.STACK-LEN
        ADD 1 TO #KEYLEN
        MOVE #KEYLEN TO STASUM.STASUM-ID
        PERFORM STASUM-PUSH
     ELSE
        PERFORM STASUM-READ
     END-IF
     ADD SUMM_OST(#I) TO STASUM.ASUM-SUMMA
     ADD KL-F(#I) TO STASUM.ASUM-COL
     ADD KL-F(#I) TO STKEY.ASUM-COL
     PERFORM STASUM-WRITE
     PERFORM STKEY-WRITE
/*   WRITE STASUM.STASUM-ID STASUM.STKEY-ID
/*         STASUM.ASUM-COL STASUM.ASUM-SUMMA
  END-FOR
END-FIND
/*
MOVE 1601 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRO00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE 20070101 TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE 20070131 TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
MOVE 1701 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRL00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE 20070101 TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE 20070131 TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
MOVE 1801 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE "CVTRE00P" TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE 20070101 TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE 20070131 TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
FIND UR-DOC-DATA-LIST WITH "CVTRO00P" OR "CVTRL00P" OR "CVTRE00P"
/*  WRITE UR-DOC-DATA-LIST.OD-ID UR-DOC-DATA-LIST.DR-TYPE-ID
/*        UR-DOC-DATA-LIST.DR-ID
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"ÇAÃPÓÇKA ARMK PO"'
  END-START
  INCLUDE XPPBST0C "*COUNTER"
  MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXHM0A.DR-ID
  MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXHM0A.DD-ID
  MOVE "READ" TO MBRXHM0A.BL-COMMAND
  PERFORM MBRXHM0S XXERX00A XXCTXX0A MBRXHM0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  IF MBRXHM0A.IN-MO-ID EQ 100000006 OR EQ 100000007 THEN
     ESCAPE TOP
  END-IF
/*
  DECIDE ON FIRST VALUE UR-DOC-DATA-LIST.DR-TYPE-ID
  VALUE 1601
     MOVE 1602 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1602 TO #DR-CONT.DR-TYPE-ID(2)
  VALUE 1701
     MOVE 1702 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1702 TO #DR-CONT.DR-TYPE-ID(2)
  VALUE 1801
     MOVE 1802 TO #DR-CONT.DR-TYPE-ID(1)
     MOVE 1802 TO #DR-CONT.DR-TYPE-ID(2)
  NONE VALUE
     IGNORE
  END-DECIDE
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
  MOVE 0 TO #DR-CONT.DR-SORT(1)
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
  MOVE 9999999 TO #DR-CONT.DR-SORT(2)
  FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
     MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXMM0A.DR-ID
     MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXMM0A.DD-ID
     MOVE "READ" TO MBRXMM0A.BL-COMMAND
     PERFORM MBRXMM0S XXERX00A XXCTXX0A MBRXMM0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     IF MBRXHM0A.IN-MO-ID EQ MBRXHM0A.OUT-MO-ID THEN
        ESCAPE TOP
     END-IF
/*
     RESET STKEY.STACK-REC-G STKEY.STACK-KEY-G
     IF MBRXHM0A.OUT-MO-ID NE 0 THEN
        MOVE MBRXHM0A.OUT-MO-ID TO MBMOMN0A.MO-ID
        MOVE "READ" TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        RESET MBMOMN0A
     END-IF
     MOVE MBRXHM0A.IN-MO-ID TO STKEY.MO-ID
     MOVE MBRXMM0A.MT-ID TO STKEY.MT-ID
     MOVE MBMOMN0A.DP-ID TO STKEY.DP-ID
     MOVE MBRXHM0A.VO-ID TO STKEY.VO-ID
     MOVE MBRXHM0A.ZK-ID TO STKEY.ZK-ID
     IF MBRXMM0A.ZK-ID NE 0 THEN
        MOVE MBRXMM0A.ZK-ID TO STKEY.ZK-ID
     END-IF
     PERFORM STKEY-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        #KEYLEN := STKEY.STACK-LEN
        ADD 1 TO #KEYLEN
        MOVE #KEYLEN TO STKEY.STKEY-ID
        PERFORM STKEY-PUSH
     ELSE
        PERFORM STKEY-READ
     END-IF
     RESET STDOC.STACK-REC-G STDOC.STACK-KEY-G
     MOVE STKEY.STKEY-ID TO STDOC.STKEY-ID
     MOVE MBRXHM0A.DR-ID TO STDOC.RXH-ID
     MOVE MBRXMM0A.DR-ID TO STDOC.RXM-ID
     PERFORM STDOC-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        MOVE MBRXHM0A.DD-ID TO STDOC.RXH-DD-ID
        MOVE MBRXMM0A.DD-ID TO STDOC.RXM-DD-ID
        PERFORM STDOC-PUSH
     ELSE
        PERFORM STDOC-READ
     END-IF
/*
     DECIDE ON FIRST VALUE UR-DOC-DATA-LIST.DR-TYPE-ID
     VALUE 1602
        MOVE 1603 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1603 TO #DR-CONT.DR-TYPE-ID(2)
     VALUE 1702
        MOVE 1703 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1703 TO #DR-CONT.DR-TYPE-ID(2)
     VALUE 1802
        MOVE 1803 TO #DR-CONT.DR-TYPE-ID(1)
        MOVE 1803 TO #DR-CONT.DR-TYPE-ID(2)
     NONE VALUE
        IGNORE
     END-DECIDE
     MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
     MOVE 0 TO #DR-CONT.DR-SORT(1)
     MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
     MOVE 9999999 TO #DR-CONT.DR-SORT(2)
     FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
        MOVE UR-DOC-DATA-LIST.DR-ID TO MBRXPM0A.DR-ID
        MOVE UR-DOC-DATA-LIST.DR-TYPE-ID TO MBRXPM0A.DD-ID
        MOVE "READ" TO MBRXPM0A.BL-COMMAND
        PERFORM MBRXPM0S XXERX00A XXCTXX0A MBRXPM0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        /*
        MOVE MBRXPM0A.PR-ID TO MBPRMN0A.PR-ID
        MOVE "READ" TO MBPRMN0A.BL-COMMAND
        PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        /*
        RESET STARMK.STACK-REC-G STARMK.STACK-KEY-G
        MOVE STKEY.STKEY-ID TO STARMK.STKEY-ID
        MOVE STDOC.STDOC-ID TO STARMK.STDOC-ID
        MOVE MBRXPM0A.DR-ID TO STARMK.RXP-ID
        MOVE MBRXPM0A.DD-ID TO STARMK.RXP-DD-ID
        MOVE MBPRMN0A.PR-ASUM-INT-NUM TO STARMK.KP-ND
        MOVE MBPRMN0A.PR-ASUM-LINE TO STARMK.KP-STR
        MOVE MBPRMN0A.PR-ID TO STARMK.PR-ID
        MOVE MBRXPM0A.BASE-COL TO STARMK.ARMK-COL
        MOVE MBRXPM0A.BALC-SUMMA TO STARMK.ARMK-SUMMA
        /*
        #KEYLEN := STARMK.STACK-LEN
        ADD 1 TO #KEYLEN
        MOVE #KEYLEN TO STARMK.STARMK-ID
        PERFORM STARMK-PUSH
        /*
        ADD MBRXPM0A.BASE-COL TO STKEY.ARMK-COL
        ADD MBRXPM0A.BASE-COL TO STDOC.ARMK-COL
     END-FIND
     PERFORM STDOC-WRITE
     PERFORM STKEY-WRITE
  END-FIND
END-FIND
/*
FOR #I = 1 TO STKEY.STACK-LEN
  MOVE #I TO STKEY.STACK-POS
  PERFORM STKEY-READ
  IF STKEY.ARMK-COL NE STKEY.ASUM-COL THEN
     MOVE STKEY.STKEY-ID TO #KEYLEN
     MOVE STKEY.MO-ID TO MBMOMN0A.MO-ID
     MOVE "READ" TO MBMOMN0A.BL-COMMAND
     PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE STKEY.MT-ID TO MBMTMN0A.MT-ID
     MOVE "READ" TO MBMTMN0A.BL-COMMAND
     PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     IF STKEY.DP-ID NE 0 THEN
        MOVE STKEY.DP-ID TO XBDPMN0A.DP-ID
        MOVE "READ" TO XBDPMN0A.BL-COMMAND
        PERFORM XBDPMN0S XXERX00A XXCTXX0A XBDPMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        RESET XBDPMN0A
     END-IF
     IF STKEY.ZK-ID NE 0 THEN
        MOVE STKEY.ZK-ID TO MBZKMN0A.ZK-ID
        MOVE "READ" TO MBZKMN0A.BL-COMMAND
        PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        RESET MBZKMN0A
     END-IF
     IF STKEY.VO-ID NE 0 THEN
        MOVE STKEY.VO-ID TO MBVOMN0A.VO-ID
        MOVE "READ" TO MBVOMN0A.BL-COMMAND
        PERFORM MBVOMN0S XXERX00A XXCTXX0A MBVOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        RESET MBVOMN0A
     END-IF
     WRITE WORK FILE 8 #KEYLEN
     MBMOMN0A.MO-CODE MBMTMN0A.MT-CODE XBDPMN0A.DP-CODE
     MBZKMN0A.ZK-CODE MBVOMN0A.VO-CODE STKEY.ASUM-COL STKEY.ARMK-COL
  END-IF
END-FOR
/*
PERFORM STARMK-FREE
PERFORM STDOC-FREE
PERFORM STASUM-FREE
PERFORM STKEY-FREE
/*
DEFINE SUBROUTINE ERROR-LOG
  WRITE WORK FILE 7 #ERROR
END-SUBROUTINE
/*
DEFINE SUBROUTINE ERROR-RECOVER
  PERFORM XPERVW0S XXERX00A
  WRITE #KP-F-B
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "STKEY" "STKEY-CONST" "STKEY"
        "STKEY-INIT" "STKEY-FREE" "STKEY-REALLOC"
        "STKEY-PUSH" "STKEY-READ" "STKEY-WRITE" "STKEY-LOCATE"
/*
INCLUDE XXSTMN4C "STASUM" "STASUM-CONST" "STASUM"
        "STASUM-INIT" "STASUM-FREE" "STASUM-REALLOC"
        "STASUM-PUSH" "STASUM-READ" "STASUM-WRITE" "STASUM-LOCATE"
/*
INCLUDE XXSTMN4C "STARMK" "STARMK-CONST" "STARMK"
        "STARMK-INIT" "STARMK-FREE" "STARMK-REALLOC"
        "STARMK-PUSH" "STARMK-READ" "STARMK-WRITE" "STARMK-LOCATE"
/*
INCLUDE XXSTMN4C "STDOC" "STDOC-CONST" "STDOC"
        "STDOC-INIT" "STDOC-FREE" "STDOC-REALLOC"
        "STDOC-PUSH" "STDOC-READ" "STDOC-WRITE" "STDOC-LOCATE"
/*
INCLUDE XXERSY2C
END
