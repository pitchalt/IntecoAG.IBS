* >Natural Source Header 000000 /*<RO>>
* :NatName MBOTSO0S
* :UID Админист
* :Mode S
* :CP
* :Date 20000102
* :Time 0000000
* <Natural Source Header /*<<RO>
/* ГОЛОВНАЯ ПРОГРАММА УПРАВЛЕНИЯ СЖАТИЕМ
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING MBOTXX1A    /* ОБЛАСТЬ ПАРАМЕТРОВ
PARAMETER USING MBXXSS0A
PARAMETER USING MBXXOP0A
PARAMETER USING XXCTXX0A
PARAMETER USING XPMXXX1A
PARAMETER USING MBXXZP1A
/* СТЕКИ СФОРМИРОВАННЫЕ ПО ЗАПРОСАМ
LOCAL USING MBXXOP0L
LOCAL USING XXXXEC0L
LOCAL
1 #I        (I4)
1 #J        (I4)
1 #K        (I4)
1 #WAY      (A253)
1 #LEN      (I2)
1 #COMMAND  (A10)
1 #RETURN   (I4)
END-DEFINE
DEFINE SUBROUTINE MBOTSO0S
  /*
MOVE XXERX00A.RETURN-CODE TO #RETURN
RESET XXERX00A
MOVE #RETURN TO XXERX00A.RETURN-CODE
/*
IF MBOTXX1A.OT-LEVEL = 0
  MBOTXX1A.OT-LEVEL := 1
  FOR #I = 1 TO MBXXOP0L-CONST.OP-ARRAY-ELEM
     IF MBXXOP0A.OP-ATTR(#I) = "AN"
        MBOTXX1A.OT-CODE := MBXXOP0A.OP-CODE-AT(#I)
        ESCAPE BOTTOM
     END-IF
  END-FOR
  RESET #I
  REPEAT
     ADD 1 TO #I
     IF MBOTXX1A.OT-FIX-ANALITIK(#I) = 0 THEN
        MBOTXX1A.OT-FIX-ANALITIK(#I) := MBOTXX1A.OT-CODE
        ESCAPE BOTTOM
     END-IF
  END-REPEAT
  PERFORM OPER-STACK
END-IF
/* присваеваем код возврата дл  отображени
MOVE #RETURN TO XXERX00A.RETURN-CODE
REPEAT
  /* КАКУЮ ПРОГРАММУ ОБРАБОТКИ ВЫБРАТЬ
  /* НЕОБХОДИМО НАЙТИ ПОРЯДКОВЫЙ НОМЕР ЭЛЕМЕНТА В ОПИСАНИИ И ТИП СТЕКА
  FOR #I = 1 TO MBXXOP0L-CONST.OP-ARRAY-ELEM
     IF MBXXOP0A.OP-CODE-AT(#I) = 0
        *ERROR-NR := EC-CODE-NOT-FOUND-IN-DESCRIPTION
     END-IF
     IF MBXXOP0A.OP-CODE-AT(#I) = MBOTXX1A.OT-CODE AND MBXXOP0A.OP-ATTR(#I) = "AN"
        MBOTXX1A.OT-NUMBER-ELEMENT := MBXXOP0A.OP-POR-NUMBER(#I)
        MOVE MBXXOP0A.OP-TYPE-STEK(#I) TO MBOTXX1A.OP-TYPE-STEK
        ESCAPE BOTTOM
     END-IF
  END-FOR
  RESET MBXXOP0A.OP-ATTR-SHOW(*)
/*
  DECIDE ON FIRST VALUE MBOTXX1A.OT-CODE
     VALUE 10067  /* ПРИЗНАК БРАКА
        MBXXOP0A.OP-ATTR-SHOW(1) := 10105 /* "SUMMA"
        MBXXOP0A.OP-ATTR-SHOW(2) := 10103  /* "BASE"
        PERFORM MBOTDF1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 10009  /* Субсчета
        MBXXOP0A.OP-ATTR-SHOW(1) := 10105 /* "SUMMA"
        PERFORM MBOTBS1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 10003  /* МАТЕРИАЛЬНО ОТВЕТСТВЕННЫЙ
        MBXXOP0A.OP-ATTR-SHOW(1) := 10105 /* "SUMMA"
        PERFORM MBOTMO1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 10050  /* МАТЕРИАЛ
         MBXXOP0A.OP-ATTR-SHOW(1) := 10103  /* "BASE"
         /*MBXXOP0A.OP-ATTR-SHOW(1) := 10102  /* "PRIH"
         MBXXOP0A.OP-ATTR-SHOW(2) := 10105  /* "SUMMA"
         PERFORM MBOTMT1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 10061  /*
        MBXXOP0A.OP-ATTR-SHOW(1) := 10105  /* "SUMMA"
        PERFORM MBOTGM1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 50000  /* регистр
        MBXXOP0A.OP-ATTR-SHOW(1) := 10105  /* "SUMMA"
        PERFORM MBOTIT1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     VALUE 10060  /* партии
         MBXXOP0A.OP-ATTR-SHOW(1) := 10103  /* "BASE"
        /* MBXXOP0A.OP-ATTR-SHOW(2) := 10102  /* "PRIH"
         MBXXOP0A.OP-ATTR-SHOW(2) := 10105  /* "SUMMA"
        PERFORM MBOTPR1S XXERX00A MBXXZP1A MBOTXX1A MBXXSS0A
                          MBXXOP0A XXCTXX0A XPMXXX1A
        IF RETURN-CODE NE 0 THEN
           *ERROR-NR := EC-QUIT-STACK-TRACE
        END-IF
     NONE VALUE
        MOVE MBOTXX1A.OT-CODE TO ERROR-ADDITION(1)
        *ERROR-NR := EC-UNKNOW-COMMAND
  END-DECIDE
/* ОБРАБОТКА КОМАНД С НИЖНЕГО УРОВНЯ
  DECIDE ON FIRST VALUE MBOTXX1A.XX-COMMAND
     VALUE 'REFRESH'  /* ПЕРЕСОДРАТЬ НА ЭТОМ ЖЕ УРОВНЕ
        MBXXZP1A.C-STACK := MBXXZP1A.C-STACK - 1
        PERFORM OPER-STACK
        #J := MBOTXX1A.OT-LEVEL
        MBOTXX1A.OT-FIX-ANALITIK(#J) := MBOTXX1A.OT-CODE
     VALUE 'DOWN' /* ВНИЗ НА ОДНУ ПОЗИЦИЮ (РАСШИФРОВАТЬ ПОЗИЦИЮ)
        ADD 1 TO MBOTXX1A.OT-LEVEL
        #J := MBOTXX1A.OT-LEVEL
        MBOTXX1A.OT-FIX-ANALITIK(#J) := MBOTXX1A.OT-CODE
        PERFORM OPER-STACK
     VALUE 'TOP' /* ВВЕРХ НА ОДНУ ПОЗИЦИЮ
        FOR #J = 1 TO 20
           IF MBOTXX1A.OT-FIX-ANALITIK(#J) = MBOTXX1A.OT-CODE THEN
              RESET MBOTXX1A.OT-FIX-ANALITIK(#J)
              ESCAPE BOTTOM
           END-IF
        END-FOR
        /* ОЧИЩАЕМ СТЕКИ
        RESET MBXXZP1A.ZP-CODE MBXXZP1A.ZP-PD-CODE(*) MBXXZP1A.ZP-PD-VALUE(*)
              MBXXZP1A.ZP-ATTR-CRIT(*)
        MBOTXX1A.OT-LEVEL := MBOTXX1A.OT-LEVEL - 1
        #K := MBOTXX1A.OT-LEVEL
        MBOTXX1A.STACK-LEN := MBXXZP1A.STACK-LEN(#K)
        MBOTXX1A.STACK-OUT := MBXXZP1A.STACK-NUMBER(#K)
        MOVE MBXXZP1A.ST-PK-CODE(#K,*) TO MBXXZP1A.PK-CODE(*)
        MOVE MBXXZP1A.ST-PK-VALUE-ITOG(#K,*) TO MBXXZP1A.PK-VALUE-ITOG(*)
        MOVE MBXXZP1A.ST-OP-ATTR(#K,*) TO MBXXZP1A.OP-ATTR(*)
        #J := MBXXZP1A.C-STACK
        IF MBXXZP1A.STACK-NUMBER(#J) NE H'00000000' THEN
           CALL 'FRSX' MBXXZP1A.STACK-NUMBER(#J)
        END-IF
        /*
        MBXXZP1A.C-STACK := MBXXZP1A.C-STACK - 1
        RESET MBOTXX1A.OT-NUMBER-ELEMENT MBOTXX1A.OP-TYPE-STEK
        #J := MBXXZP1A.C-STACK
        MBOTXX1A.OT-CODE := MBXXZP1A.ST-CODE(#J)
        MBOTXX1A.OT-PD-CODE(*) := MBXXZP1A.ST-PD-CODE(#J,*)
        MBOTXX1A.OT-PD-VALUE(*) := MBXXZP1A.ST-PD-VALUE(#J,*)
        MBOTXX1A.OT-PD-ATTR(*) := MBXXZP1A.ST-PD-ATTR(#J,*)
        MBOTXX1A.STACK-OUT := MBXXZP1A.STACK-NUMBER(#J)
        MOVE MBXXZP1A.ST-ATTR-CRIT(#J,*) TO MBXXZP1A.ZP-ATTR-CRIT(*)
        MOVE MBXXZP1A.OT-OPER-CODE(#K,*) TO MBOTXX1A.OT-OPER-CODE(*)
        MOVE "TOP" TO MBOTXX1A.OT-COMMAND
        /*
     VALUE "FIND-OP"
        ESCAPE ROUTINE
     VALUE "EXIT" /* ВЫЙТИ ИЗ ПРОСМОТРА С ОЧИСТКОЙ ВСЕХ СТЕКОВ
        /* экранные стеки
        FOR #I = 1 TO MBXXZP1A.C-STACK
           IF MBXXZP1A.STACK-NUMBER(#I) NE H'00000000' THEN
              CALL 'FRSX' MBXXZP1A.STACK-NUMBER(#I)
           ELSE
              ESCAPE BOTTOM
           END-IF
        END-FOR
        /*
        FOR #I = 1 TO MBXXSS0A.C-STACK
           IF MBXXSS0A.STACK-NUMBER(#I) NE H'00000000' THEN
              CALL 'FRSX' MBXXSS0A.STACK-NUMBER(#I)
           ELSE
              ESCAPE BOTTOM
           END-IF
        END-FOR
        MOVE MBOTXX1A.OT-COMMAND TO #COMMAND
        RESET MBOTXX1A MBXXZP1A MBXXSS0A MBXXOP0A
        MOVE #COMMAND TO MBOTXX1A.XX-COMMAND
        RESET MBOTXX1A.OT-LEVEL
        ESCAPE ROUTINE
     NONE VALUE
        MOVE MBOTXX1A.XX-COMMAND TO ERROR-ADDITION(1)
        *ERROR-NR := EC-UNKNOW-COMMAND
  END-DECIDE
END-REPEAT
/*
DEFINE SUBROUTINE OPER-STACK
  MOVE MBOTXX1A.OT-CODE TO MBXXZP1A.ZP-CODE
  MOVE MBOTXX1A.OT-PD-CODE(*) TO MBXXZP1A.ZP-PD-CODE(*)
  MOVE MBOTXX1A.OT-PD-VALUE(*) TO MBXXZP1A.ZP-PD-VALUE(*)
  MOVE MBOTXX1A.OT-PD-ATTR(*) TO MBXXZP1A.ZP-PD-ATTR(*)
  MOVE MBOTXX1A.OT-VALUE-A TO MBXXZP1A.ZP-VALUE-A
  RESET MBXXZP1A.ZP-ATTR-CRIT(*) MBOTXX1A.OT-OPER(*)
  DECIDE ON FIRST VALUE MBXXZP1A.ZP-CODE
  /* по каким кодам сжимать
     VALUE 10050  /* материал
        MOVE 10050 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        MOVE 10103 TO MBXXZP1A.ZP-ATTR-CRIT(2)
        /* коды по которым сжимаем стек или ищем операции
        MOVE 10050 TO MBOTXX1A.OT-OPER-CODE(1)
        MOVE 10103 TO MBOTXX1A.OT-OPER-CODE(2)
     VALUE 10067  /*
        MOVE 10067 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        MOVE 10103 TO MBXXZP1A.ZP-ATTR-CRIT(2)
        /* коды по которым сжимаем стек или ищем операции
        MOVE 10067 TO MBOTXX1A.OT-OPER-CODE(1)
        MOVE 10103 TO MBOTXX1A.OT-OPER-CODE(2)
     VALUE 10003  /* МАТЕРИАЛЬНО ОТВЕТСТВЕННЫЙ
        MOVE 10003 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        /*
        MOVE 10003 TO MBOTXX1A.OT-OPER-CODE(1)
     VALUE 10009  /* СУБСЧЕТА
        MOVE 10009 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        /*
        MOVE 10009 TO MBOTXX1A.OT-OPER-CODE(1)
     VALUE 10061  /* группа МАТЕРИАЛОв
        MOVE 10061 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        /*
        MOVE 10061 TO MBOTXX1A.OT-OPER-CODE(1)
     VALUE 10060  /* парти
        MOVE 10050 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        MOVE 10060 TO MBXXZP1A.ZP-ATTR-CRIT(2)
        MOVE 10103 TO MBXXZP1A.ZP-ATTR-CRIT(3)
        /*
        MOVE 10050 TO MBOTXX1A.OT-OPER-CODE(1)
        MOVE 10060 TO MBOTXX1A.OT-OPER-CODE(2)
        MOVE 10103 TO MBOTXX1A.OT-OPER-CODE(3)
     VALUE 50000  /* регистр
        MOVE 50000 TO MBXXZP1A.ZP-ATTR-CRIT(1)
        /*
        MOVE 50000 TO MBOTXX1A.OT-OPER-CODE(1)
     NONE VALUE IGNORE
  END-DECIDE
  /* СЖИМАЕМ СТЕК
  PERFORM MBSOZP0S XXERX00A MBXXZP1A MBXXSS0A MBXXOP0A XXCTXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  MOVE MBXXZP1A.STACK-OUT TO MBOTXX1A.STACK-OUT
  #K := MBOTXX1A.OT-LEVEL
  MBOTXX1A.STACK-LEN := MBXXZP1A.STACK-LEN(#K)
  MBOTXX1A.STACK-ELEM-LEN := MBXXZP1A.STACK-ELEM-LEN(#K)
  MOVE MBXXZP1A.PK-CODE(*) TO MBXXZP1A.ST-PK-CODE(#K,*)
  MOVE MBXXZP1A.PK-VALUE-ITOG(*) TO MBXXZP1A.ST-PK-VALUE-ITOG(#K,*)
  MOVE MBXXZP1A.OP-ATTR(*) TO MBXXZP1A.ST-OP-ATTR(#K,*)
  MOVE MBXXZP1A.ZP-ATTR-CRIT(*) TO MBXXZP1A.ST-ATTR-CRIT(#K,*)
  MOVE MBOTXX1A.OT-OPER-CODE(*) TO MBXXZP1A.OT-OPER-CODE(#K,*)
END-SUBROUTINE
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END


