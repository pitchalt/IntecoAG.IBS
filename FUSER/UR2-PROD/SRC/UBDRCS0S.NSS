* >Natural Source Header 000000 /*<RO>>
* :NatName UBDRCS0S
* :UID PAUL
* :Mode S
* :CP
* :Date 20070219
* :Time 1559000
* <Natural Source Header /*<<RO>
/***********************************************************************
/*
/* —»—“≈Ã¿:
/* œ–Œ√–¿ÃÃ¿: XETXMN0S
/*
/* –¿«–¿¡Œ“◊» : ”«Œ–»Õ œ.¿.
/* ƒ¿“¿ ¬€œ”— ¿:
/*
/* Õ¿«¬¿Õ»≈: –¿—◊»“¿“‹ ≈ƒ»Õ»◊Õ”ﬁ «¿œ»—‹ ƒŒ ”Ã≈Õ“¿
/*  - CALC
/*
/* »—œ–¿¬À≈Õ»ﬂ:
/*
/***********************************************************************
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING UBDRCS0A
PARAMETER USING UBDRUP0A
PARAMETER USING UBODOC0A
PARAMETER USING UXCSXX0A
/*
LOCAL USING XXXXEC0L
LOCAL USING UXXXEC0L
LOCAL USING UBDRCC0A
LOCAL USING UBOPAD0A
LOCAL USING MBMOMN0A
LOCAL USING MBMTMN0A
LOCAL USING MBZKMN0A
LOCAL
1 #I             (I4)
1 #POS           (N4)
1 #J             (I4)
1 #K             (I4)
1 #STACK-POS     (I4)
1 #STACK-G       (1:10)
2 #STACK-VALUE-E (P1)
2 #STACK-VALUE   (P15)
1 #ARG-G         (1:2)
2 #ARG-VALUE-E   (P1)
2 #ARG-VALUE     (P15)
1 #ARG-ATTR      (P7)
1 #ARG-ATTR-NUM  (I2)
1 #RULE-CURRENT  (I2)
1 #RES-DC        (I2)
1 #RES-TYPE      (A1)
1 #IS-FOUND      (L)
1 #DATA-N        (N8)
1 REDEFINE #DATA-N
2 #DATA-A        (A8)
1 #DATA          (D)
END-DEFINE
DEFINE SUBROUTINE UBDRCS0S
/*
DECIDE ON FIRST VALUE UBDRCS0A.BL-COMMAND
VALUE 'CALC'
  PERFORM EVALUATE
NONE VALUE
  MOVE UBDRCS0A.BL-COMMAND TO ERROR-ADDITION(1)
  *ERROR-NR := EC-UNKNOW-COMMAND
END-DECIDE
/*
DEFINE SUBROUTINE EVALUATE
  PERFORM EVALUATE-RECORD
  MOVE UBDRCS0A.OD-ID TO UBDRCC0A.OD-ID
  MOVE UBDRCS0A.DR-ID TO UBDRCC0A.DR-UP-ID
  MOVE 'CALC' TO UBDRCC0A.BL-COMMAND
  FOR #I = 1 TO 5
     IF UBDRCS0A.DD-CONT-LIST(#I) EQ 0 THEN ESCAPE BOTTOM END-IF
     MOVE UBDRCS0A.DD-CONT-LIST(#I) TO UBDRCC0A.DD-ID
     PERFORM UBDRCC0S XXERX00A XXCTXX0A UBDRCC0A UBDRUP0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE EVALUATE-RECORD
  RESET #STACK-G(*)
  #STACK-POS := 1
  MOVE 1 TO #RULE-CURRENT
  MOVE OD-RULE-POS-LIST(#RULE-CURRENT) TO #I
/*  WRITE 'EVAL' UBDRCS0A.OD-ID UBDRCS0A.DD-LEVEL UBDRCS0A.DD-ID UBDRCS0A.DR-ID
  REPEAT
     WHILE #I LE OC-C AND #I GT 0
/*     WRITE 'MC:' OC-CODE(#I) OC-RES-TYPE(#I) OC-ARG-TYPE(#I)
     RESET #ARG-G(*)
     /* ◊»“¿≈Ã ¿–√”Ã≈Õ“€
     DECIDE ON EVERY VALUE OC-ARG-TYPE(#I)
        VALUE '--'
           IGNORE
        /* »ƒ≈Õ“»‘» ¿“Œ– ¬ œ≈–¬€… ¿–√”Ã≈Õ“
        VALUE 'I-'
           MOVE OC-ARG-ATTR(#I) TO #J
           MOVE UBDRUP0A.DR-ID(#J) TO #ARG-VALUE(1)
           RESET #ARG-VALUE-E(1)
        /*  ŒÕ—“¿Õ“¿ ¬ œ≈–¬€… ¿–√”Ã≈Õ“
        VALUE 'CS', 'CA', 'C-'
           MOVE OC-ARG-CONST(#I) TO #ARG-VALUE(1)
           MOVE OC-ARG-CONST-E(#I) TO #ARG-VALUE-E(1)
        /*  ŒÕ—“¿Õ“¿ ¬Œ —“Œ–Œ… ¿–√”Ã≈Õ“
        VALUE 'SC', 'AC'
           MOVE OC-ARG-CONST(#I) TO #ARG-VALUE(2)
           MOVE OC-ARG-CONST-E(#I) TO #ARG-VALUE-E(2)
        /* ¿“–»¡”“ ¬ œ≈–¬€… ¿–√”Ã≈Õ“
        VALUE 'AS', 'AC', 'A-', 'AA'
           MOVE OC-ARG-ATTR(#I) TO #ARG-ATTR
           MOVE 1 TO #ARG-ATTR-NUM
           PERFORM GET-ARG-ATTR
        /* ¿“–»¡”“ ¬Œ ¬“Œ–Œ… ¿–√”Ã≈Õ“
        VALUE 'SA', 'CA'
           MOVE OC-ARG-ATTR(#I) TO #ARG-ATTR
           MOVE 2 TO #ARG-ATTR-NUM
           PERFORM GET-ARG-ATTR
        /* ¿“–»¡”“ »«  ŒÕ—“¿Õ“€ ¬Œ ¬“Œ–Œ… ¿–√”Ã≈Õ“
        VALUE 'AA'
           MOVE OC-ARG-CONST(#I) TO #ARG-ATTR
           MOVE 2 TO #ARG-ATTR-NUM
           PERFORM GET-ARG-ATTR
        /* —“≈  ¬ œ≈–¬€… ¿–√”Ã≈Õ“
        VALUE 'SC', 'SA', 'SS', 'S-'
           SUBTRACT 1 FROM #STACK-POS
           MOVE #STACK-VALUE(#STACK-POS) TO #ARG-VALUE(1)
           MOVE #STACK-VALUE-E(#STACK-POS) TO #ARG-VALUE-E(1)
           RESET #STACK-G(#STACK-POS)
        /* —“≈  ¬Œ ¬“Œ–Œ… ¿–√”Ã≈Õ“
        VALUE 'CS', 'AS', 'SS'
           SUBTRACT 1 FROM #STACK-POS
           MOVE #STACK-VALUE(#STACK-POS) TO #ARG-VALUE(2)
           MOVE #STACK-VALUE-E(#STACK-POS) TO #ARG-VALUE-E(2)
           RESET #STACK-G(#STACK-POS)
     NONE VALUE
        *ERROR-NR := EC-ATTR-VALUE-UNKNOW
     END-DECIDE
     /*
     IF IS-OP-CALC-DEBUG THEN
        #POS := #I
        WRITE "  CALC" #POS OC-CODE(#I) OC-RES-TYPE(#I) OC-RES-ATTR(#I)
        OC-ARG-TYPE(#I) OC-ARG-ATTR(#I) #ARG-VALUE(1) #ARG-VALUE(2)
     END-IF
     /* ¬€œŒÀÕﬂ≈Ã Œœ≈–¿÷»ﬁ
     DECIDE ON FIRST VALUE OC-CODE(#I)
     /* —ÔÂˆË‡Î¸Ì˚Â ÍÓÏ‡Ì‰˚ ‚˚˜ËÒÎÂÌË  Ò˜ÂÚ‡
     VALUE "BSM"
        PERFORM READ-BS-MT
     VALUE "BSZ"
        PERFORM READ-BS-ZK
     /* —ÔÂˆË‡Î¸Ì˚Â ÍÓÏ‡Ì‰˚ ‰Î  ÔÓ‰‡Á‰ÂÎÂÌË
     VALUE "DPM"
        PERFORM READ-DP-MO
     VALUE "MUL"
         #STACK-VALUE(#STACK-POS) := #ARG-VALUE(1) * #ARG-VALUE(2)
     VALUE 'EQ'
        IF #ARG-VALUE(1) EQ #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'NE'
        IF #ARG-VALUE(1) NE #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'GE'
        IF #ARG-VALUE(1) GE #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'LE'
        IF #ARG-VALUE(1) LE #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'GT'
        IF #ARG-VALUE(1) GT #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'LT'
        IF #ARG-VALUE(1) LT #ARG-VALUE(2) THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'OR'
        IF #ARG-VALUE(1) NE 0 OR #ARG-VALUE(2) NE 0 THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'AND'
        IF #ARG-VALUE(1) NE 0 AND #ARG-VALUE(2) NE 0 THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE 'NOT'
        IF #ARG-VALUE(1) EQ 0 THEN
           MOVE 1 TO #STACK-VALUE(#STACK-POS)
        ELSE
           RESET #STACK-VALUE(#STACK-POS)
        END-IF
        RESET #STACK-VALUE-E(#STACK-POS)
     VALUE '-'
        #STACK-VALUE(#STACK-POS) := #ARG-VALUE(1) - #ARG-VALUE(2)
        #STACK-VALUE-E(#STACK-POS) := #ARG-VALUE-E(1)
     VALUE '+'
        #STACK-VALUE(#STACK-POS) := #ARG-VALUE(1) + #ARG-VALUE(2)
        #STACK-VALUE-E(#STACK-POS) := #ARG-VALUE-E(1)
     VALUE 'MOV'
        MOVE #ARG-VALUE(1) TO #STACK-VALUE(#STACK-POS)
        MOVE #ARG-VALUE-E(1) TO #STACK-VALUE-E(#STACK-POS)
     VALUE 'ACP', 'REJ'
        IF (OC-CODE(#I) EQ 'ACP' AND #ARG-VALUE(1) EQ 0) OR
           (OC-CODE(#I) EQ 'REJ' AND #ARG-VALUE(1) NE 0) THEN
           ADD 1 TO #RULE-CURRENT
           MOVE OD-RULE-POS-LIST(#RULE-CURRENT) TO #I
           RESET UBOPAD0A
           ESCAPE TOP
        END-IF
     VALUE 'MKP'
        MOVE OC-RES-ATTR(#I) TO UBOPAD0A.CL-ID
        MOVE 1 TO UBOPAD0A.OP-MODIF
        MOVE UBDRCS0A.OD-ID TO UBOPAD0A.OD-ID
        MOVE #RULE-CURRENT TO UBOPAD0A.OD-SEQ-NUM
        RESET UBOPAD0A.OP-DR-G(*)
        FOR #J = 1 TO UBDRCS0A.DD-LEVEL
           MOVE UBDRUP0A.DR-TYPE-ID(#J) TO UBOPAD0A.OP-DD-ID(#J)
           MOVE UBDRUP0A.DR-ID(#J) TO UBOPAD0A.OP-DR-ID(#J)
        END-FOR
/*        MOVE UBDRUP0A.DR-TYPE-ID(#J) TO UBOPAD0A.SRC-DD-ID
/*        MOVE UBDRUP0A.DR-ID(#J) TO UBOPAD0A.SRC-DR-ID
/*        MOVE UBDRUP0A.DR-TYPE-ID(1) TO UBOPAD0A.DC-DD-ID
/*        MOVE UBDRUP0A.DR-ID(1) TO UBOPAD0A.DC-DR-ID
        MOVE OC-ARG-ATTR(#I) TO UBOPAD0A.IT-ID(1)
        MOVE OC-ARG-CONST(#I) TO UBOPAD0A.IT-ID(2)
        PERFORM UBOPAD0S XXERX00A XXCTXX0A UBOPAD0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        ADD 1 TO #RULE-CURRENT
        MOVE OD-RULE-POS-LIST(#RULE-CURRENT) TO #I
        RESET UBOPAD0A
        ESCAPE TOP
     NONE VALUE
        *ERROR-NR := EC-ATTR-VALUE-UNKNOW
     END-DECIDE
     /* –¿«Ã≈Ÿ¿≈Ã –≈«”À‹“¿“
     DECIDE ON EVERY VALUE OC-RES-TYPE(#I)
     VALUE '-'
        IGNORE
     VALUE 'S'
        ADD 1 TO #STACK-POS
        RESET #STACK-G(#STACK-POS)
     VALUE 'D'
        PERFORM SET-RES-DATA
     VALUE 'VD', 'VA'
        #RES-DC := 1
        #RES-TYPE := 'V'
        PERFORM SET-RES-ATTR
     VALUE 'VC', 'VA'
        #RES-DC := 2
        #RES-TYPE := 'V'
        PERFORM SET-RES-ATTR
     VALUE 'MD', 'MA'
        #RES-DC := 1
        #RES-TYPE := 'M'
        PERFORM SET-RES-ATTR
     VALUE 'MC', 'MA'
        #RES-DC := 2
        #RES-TYPE := 'M'
        PERFORM SET-RES-ATTR
     NONE VALUE
        *ERROR-NR := EC-ATTR-VALUE-UNKNOW
     END-DECIDE
     ADD 1 TO #I
  END-REPEAT
END-SUBROUTINE
/*
DEFINE SUBROUTINE GET-ARG-ATTR
  FOR #J = UBDRCS0A.DD-LEVEL TO 1 STEP -1
     FOR #K = 1 TO UBDRUP0A.DR-AP-C(#J)
/*        IF UBDRUP0A.DR-AP-ATTR-ID(#J, #K) EQ 0 THEN ESCAPE BOTTOM END-IF
        IF UBDRUP0A.DR-AP-ATTR-ID(#J, #K) EQ #ARG-ATTR THEN
           MOVE UBDRUP0A.DR-AP-VALUE(#J, #K) TO #ARG-VALUE(#ARG-ATTR-NUM)
           MOVE UBDRUP0A.DR-AP-VALUE-E(#J, #K) TO #ARG-VALUE-E(#ARG-ATTR-NUM)
           ESCAPE ROUTINE
        END-IF
     END-FOR
  END-FOR
  MOVE #ARG-ATTR TO ERROR-ADDITION(1)
  *ERROR-NR := EC-ATTR-REQUIRED
END-SUBROUTINE
/*
DEFINE SUBROUTINE SET-RES-DATA
  FOR #J = 1 TO 5
     IF UBOPAD0A.AD-ATTR-ID(#J) EQ 0 OR
        UBOPAD0A.AD-ATTR-ID(#J) EQ OC-RES-ATTR(#I) THEN
        ESCAPE BOTTOM
     END-IF
  END-FOR
  MOVE #STACK-VALUE(#STACK-POS) TO #DATA-N
  IF #DATA-A EQ MASK(YYYYMMDD) THEN
     MOVE EDITED #DATA-A TO #DATA (EM=YYYYMMDD)
  ELSE
     MOVE OC-RES-ATTR(#I) TO ERROR-ADDITION(1)
     MOVE #DATA-A TO ERROR-ADDITION(2)
     *ERROR-NR := EC-ATTR-VALUE-UNKNOW
  END-IF
  MOVE OC-RES-ATTR(#I) TO UBOPAD0A.AD-ATTR-ID(#J)
  MOVE #DATA TO UBOPAD0A.AD-VALUE(#J)
END-SUBROUTINE
/*
DEFINE SUBROUTINE SET-RES-ATTR
  FOR #J = 1 TO 30
     IF UBOPAD0A.AT-ATTR-ID(#RES-DC, #J) EQ 0 OR EQ OC-RES-ATTR(#I) THEN
        ESCAPE BOTTOM
     END-IF
  END-FOR
  IF UBOPAD0A.AT-ATTR-ID(#RES-DC, #J) NE OC-RES-ATTR(#I) THEN
     ADD 1 TO UBOPAD0A.AT-MD-C(#RES-DC)
     MOVE UBOPAD0A.AT-MD-C(#RES-DC) TO #J
  END-IF
  MOVE OC-RES-ATTR(#I) TO UBOPAD0A.AT-ATTR-ID(#RES-DC, #J)
  IF #RES-TYPE EQ 'V' THEN
     MOVE #STACK-VALUE(#STACK-POS) TO UBOPAD0A.AT-VALUE(#RES-DC, #J)
     MOVE #STACK-VALUE-E(#STACK-POS) TO UBOPAD0A.AT-VALUE-E(#RES-DC, #J)
  ELSE IF #RES-TYPE EQ 'M'
     MOVE #STACK-VALUE(#STACK-POS) TO UBOPAD0A.AT-EDIZ-ID(#RES-DC, #J)
  END-IF END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE READ-BS-MT
  MOVE #ARG-VALUE(1) TO MBMTMN0A.MT-ID
  MOVE "READ" TO MBMTMN0A.BL-COMMAND
  PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  MOVE #ARG-VALUE(2) TO MBMOMN0A.MO-ID
  MOVE "READ" TO MBMOMN0A.BL-COMMAND
  PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  MOVE MBMTMN0A.BS-ID TO #STACK-VALUE(#STACK-POS)
END-SUBROUTINE
/*
DEFINE SUBROUTINE READ-BS-ZK
  MOVE #ARG-VALUE(1) TO MBZKMN0A.ZK-ID
  MOVE "READ" TO MBZKMN0A.BL-COMMAND
  PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  MOVE MBZKMN0A.BS-ID TO #STACK-VALUE(#STACK-POS)
END-SUBROUTINE
/*
DEFINE SUBROUTINE READ-DP-MO
  MOVE #ARG-VALUE(1) TO MBMOMN0A.MO-ID
  MOVE "READ" TO MBMOMN0A.BL-COMMAND
  PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  MOVE MBMOMN0A.DP-ID TO #STACK-VALUE(#STACK-POS)
END-SUBROUTINE
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END

