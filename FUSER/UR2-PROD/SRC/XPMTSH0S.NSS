* >Natural Source Header 000000 /*<RO>>
* :NatName XPMTSH0S
* :UID PAUL
* :Mode S
* :CP
* :Date 20070821
* :Time 1837000
* <Natural Source Header /*<<RO>
/***********************************************************************
/*
/* СИСТЕМА: ARM-K
/* ПРОГРАММА: ПОИСК В СПРАВОЧНИКЕ
/*
/* РАЗРАБОТЧИК:
/* ДАТА ВЫПУСКА:
/*
/* НАЗВАНИЕ: ПОИСК В СПРАВОЧНИКЕ МАТЕРИАЛОВ
/* КОМАНДЫ:
/*  - LOCATE
/*  - SELECT
/*
/* ИСПРАВЛЕНИЯ:
/*
/***********************************************************************
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING XPMTSH0A
PARAMETER USING MBMTMN0A
/*
LOCAL USING XXXXEC0L
LOCAL USING XPMTSC0L
LOCAL USING XPMTSR0L
LOCAL USING MBEIMN0A
LOCAL USING STEKL
LOCAL USING KDFL
LOCAL
1 #KEY        (I4)
1 #COUNT      (I4)
1 #FLAG       (L)
1 #POSITION   (I4)
1 #SELECTED   (A30)
1 #MT-CODE    (A22)
/*
1 CNTST       (N5) INIT < 200 >
1 LEN-ST-MT   (B4) CONST < 308 >
1 LEN-ST-MT-I (I4) CONST < 308 >
1 STEK-B      (B1/1:LEN-ST-MT-I)
1 REDEFINE STEK-B
2 STEKMT
3 MT-CODE   (A22)
3 MT-ID     (P15)
3 GM-ID     (P15)
3 PROF      (A50)
3 GOSTS     (A50)
3 VPR       (A10)
3 GOST      (A50)
3 OBOZ      (A50/1:2)
3 NAME-TYPE (A1)
3 EI-CODE   (N5)
1 KEYMT(A27)
1 REDEFINE KEYMT
  2 KEYMTOG(N5)  2 KEYMTMT(A22)
1 KEYGR(A10)
1 REDEFINE KEYGR
  2 KEYGROG(N5)  2 KEYGRGR(N5)
1 C-Z(C/7)
1 #KEYMT (1:3)
2 #KEYMTS (A30)
2 REDEFINE #KEYMTS
3 #KEYMTSA(A1/1:30)
2 #KEYMTE (A30)
2 REDEFINE #KEYMTE
3 #KEYMTEA(A1/1:30)
1 #KEYLEN (I4)
1 #NUMBER (P10)
END-DEFINE
DEFINE SUBROUTINE XPMTSH0S
/*
DEFINE WINDOW WINDOW-RESULT
  SIZE 20*80
  BASE 5/1
  TITLE 'Найденные материалы'
  FRAMED ON
/*
DEFINE WINDOW WINDOW-CRITERY
  SIZE 18*80
  BASE 7/1
  TITLE 'Параметры отбора материалов'
  FRAMED ON
/*
SET KEY ALL
SET CONTROL 'MT'
RESET RETURN-CODE XPMTSH0A.MT-GR MBMTMN0A
MOVE MT-SEARCH TO XPMTSC0L.MT-NAME
/*
DECIDE ON FIRST VALUE SH-COMMAND
  VALUE 'LOCATE'
     PERFORM MT-LOCATE
  VALUE 'SELECT'
     PERFORM MT-SELECT
  NONE VALUE
     INCLUDE XXERUS1C '2201'
END-DECIDE
IF RETURN-CODE EQ 0 AND MBMTMN0A.MT-ID NE 0 THEN
  MOVE "READ" TO MBMTMN0A.BL-COMMAND
  PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
END-IF
/*
SET WINDOW OFF
/*
DEFINE SUBROUTINE MT-LOCATE
  EXAMINE MT-SEARCH FOR " " GIVING LENGTH #NUMBER
  IF #NUMBER < 3 THEN
    INCLUDE XXERUS1C '2413'
  END-IF
  PERFORM MT-SEARCH
  IF #COUNT EQ 0 THEN
     INCLUDE XXERUS1C '2402'
  ELSE
     IF #COUNT EQ 1 THEN
        MOVE BY NAME STEKMT TO MBMTMN0A
        ESCAPE ROUTINE
     END-IF
     PERFORM MT-SHOW
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT-SELECT
  PERFORM MT-CRITERY
  IF *PF-KEY NE 'PF3' THEN
     PERFORM MT-SHOW
  END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT-SHOW
  SET WINDOW 'WINDOW-RESULT'
  SET KEY NAMED OFF
  SET KEY ENTR NAMED 'Bыбрт'
  SET KEY PF3 NAMED 'Bыход'
  SET KEY PF7 NAMED 'Hазад'
  SET KEY PF8 NAMED 'Bперед'
  SET KEY PF6 NAMED 'Парам'
  RESET #SELECTED
  #N := 1
  REPEAT
    PERFORM MT-LIST
     INPUT USING MAP 'XPMTSR0M'
     IF *PF-KEY EQ 'PF6' THEN
        PERFORM MT-CRITERY
        SET WINDOW 'WINDOW-RESULT'
        SET KEY NAMED OFF
        SET KEY ENTR NAMED 'Bыбрт'
        SET KEY PF3 NAMED 'Bыход'
        SET KEY PF7 NAMED 'Bверх'
        SET KEY PF8 NAMED 'Bниз'
        SET KEY PF6 NAMED 'Парам'
        RESET #SELECTED
     END-IF
     IF *PF-KEY EQ 'PF3' THEN
        RESET #SELECTED
        ESCAPE BOTTOM
     END-IF
     IF *PF-KEY EQ 'PF7' AND #N > 7
        ADD -7 TO #N
     END-IF
     IF *PF-KEY EQ 'PF8' AND #K < #COUNT
        ADD 7 TO #N
     END-IF
     IF *PF-KEY EQ 'ENTR' THEN
        FOR #I = 1 TO 7
           IF *CURS-FIELD EQ POS(CP-CMD(#I)) THEN
              #SELECTED := XPMTSR0L.MT-CODE(#I)
/*              XPMTSH0A.MT-CODE := XPMTSR0L.MT-CODE(#I)
              XI := #N + #I - 1  CALL 'RWSX' XI STEK-B.MT-CODE XR XN1
        MOVE BY NAME STEKMT TO MBMTMN0A
              ESCAPE ROUTINE
           END-IF
        END-FOR
     END-IF
  END-REPEAT
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT-CRITERY
  SET WINDOW 'WINDOW-CRITERY'
  SET KEY NAMED OFF
  SET KEY ENTR NAMED 'Искат'
  SET KEY PF3 NAMED 'Выход'
  REPEAT
     INPUT USING MAP 'XPMTSC0M'
     IF *PF-KEY EQ 'PF3' THEN
        RESET #SELECTED
        ESCAPE BOTTOM
     END-IF
     IF *PF-KEY EQ 'ENTR'
        IF XPMTSC0L.MT-NAME EQ " " AND XPMTSC0L.MT-CODE EQ " " AND
           XPMTSC0L.MT-GR EQ 0 THEN
           REINPUT WITH TEXT 'Укажите хоть что нибуть'
        END-IF
        PERFORM MT-SEARCH
        ESCAPE ROUTINE
     END-IF
  END-REPEAT
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT-LIST
  RESET XPMTSR0L.MT-LIST(*)
  #K := #N + 6  #L := 0  C-Z(*) := (AD=PN)
  FOR #I #N #K
    IF #I <= #COUNT  XI := #I  CALL 'RWSX' XI STEK-B.MT-CODE XR XN1
      #SELECTED := STEK-B.MT-CODE
      ADD 1 TO #L  RESET C-Z(#L)
      MOVE STEK-B.MT-ID TO XPMTSR0L.MT-ID(#L)
      MOVE STEK-B.MT-CODE TO XPMTSR0L.MT-CODE(#L)
      RESET XPMTSR0L.MT-OBOZ(#L,*) XPMTSR0L.MT-VPR(#L)
      MOVE STEK-B.EI-CODE TO MBEIMN0A.EI-CODE
      MOVE "LOCATE" TO MBEIMN0A.BL-COMMAND
      PERFORM MBEIMN0S XXERX00A XXCTXX0A MBEIMN0A
      RESET RETURN-CODE
      MOVE BY NAME MBEIMN0A TO XPMTSR0L.MT-LIST(#L)
      IF STEK-B.NAME-TYPE EQ "L" THEN
        MOVE STEK-B.OBOZ(1) TO XPMTSR0L.MT-NAME(#L)
        COMPRESS STEK-B.OBOZ(2) STEK-B.GOSTS STEK-B.GOST STEK-B.PROF
              INTO XPMTSR0L.MT-NAME-EXT(#L)
        MOVE STEK-B.VPR TO XPMTSR0L.MT-VPR(#L)
      ELSE IF STEK-B.NAME-TYPE EQ "S" THEN
        MOVE STEK-B.OBOZ(1:2) TO XPMTSR0L.MT-OBOZ(#L,1:2)
/*        XPMTSR0L.MT-NAME(#L) := STEKMT.MT-NAME
      END-IF END-IF
    END-IF
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT-SEARCH
  XI := CNTST  CALL 'GTSX' LEN-ST-MT XI XN1
  XW := #N := 1  KEYMTOG := KEYGROG := XXCTXX0A.MT-OG-ID
  RESET #COUNT
  RESET #KEYMTS(*) #KEYMTE(*)
  SEPARATE XPMTSC0L.MT-NAME INTO #KEYMTS(*) IGNORE WITH DELIMITER ' '
/*MOVE XPMTSC0L.MT-NAME TO #KEYMTS
  FOR #KEY = 1 TO 3
    IF #KEYMTS(#KEY) EQ ' ' THEN ESCAPE TOP END-IF
    EXAMINE #KEYMTS(#KEY) FOR ' ' GIVING LENGTH #KEYLEN
    IF #KEYLEN LT 30 THEN ADD 1 TO #KEYLEN END-IF
    #KEYMTE(#KEY) := #KEYMTS(#KEY)
    #KEYMTSA(#KEY,#KEYLEN) := H'00'
    #KEYMTEA(#KEY,#KEYLEN) := H'FF'
  END-FOR
  IF MT-SEARCH NE " " THEN
     KEYMTMT := MT-SEARCH
     FIND ASUM-KODIF-FILE OK-F = KEYMT
       PERFORM MT2STEK
     END-FIND
  END-IF
  DECIDE FOR FIRST CONDITION
    WHEN XPMTSC0L.MT-CODE NE ' '
     KEYMTMT := XPMTSC0L.MT-CODE
     FIND ASUM-KODIF-FILE OK-F = KEYMT
        ACCEPT ASUM-KODIF-FILE.OG-F = XXCTXX0A.MT-OG-ID
       PERFORM MT2STEK
     END-FIND
    WHEN XPMTSC0L.MT-GR NE 0 AND XPMTSC0L.MT-NAME = ' '
     KEYGRGR := XPMTSC0L.MT-GR
     FIND ASUM-KODIF-FILE SGR-F = KEYGR
       ACCEPT IF ASUM-KODIF-FILE.OG-F = XXCTXX0A.MT-OG-ID  AND
           (XPMTSC0L.MT-CODE = ' ' OR = KM-F)
       PERFORM MT2STEK
     END-FIND
    WHEN  XPMTSC0L.MT-NAME NE ' '
/*   WRITE #KEYMTS(1) #KEYMTE(1)
/*   WRITE #KEYMTS(2) #KEYMTE(2)
/*   WRITE #KEYMTS(3) #KEYMTE(3)
     IF #KEYMTS(1) NE ' ' AND #KEYMTS(2) NE ' ' AND #KEYMTS(3) NE ' '
     FIND ASUM-KODIF-FILE NM-SHORT = #KEYMTS(1) THRU #KEYMTE(1) AND
                          NM-SHORT = #KEYMTS(2) THRU #KEYMTE(2) AND
                          NM-SHORT = #KEYMTS(3) THRU #KEYMTE(3)
       ACCEPT IF ASUM-KODIF-FILE.OG-F = XXCTXX0A.MT-OG-ID  AND
        (XPMTSC0L.MT-CODE = ' ' OR = KM-F) AND
        (XPMTSC0L.MT-GR = 0 OR = GR-F)
       PERFORM MT2STEK
     END-FIND
  ELSE
     IF #KEYMTS(1) NE ' ' AND #KEYMTS(2) NE ' '
     FIND ASUM-KODIF-FILE NM-SHORT = #KEYMTS(1) THRU #KEYMTE(1) AND
                          NM-SHORT = #KEYMTS(2) THRU #KEYMTE(2)
       ACCEPT IF ASUM-KODIF-FILE.OG-F = XXCTXX0A.MT-OG-ID  AND
        (XPMTSC0L.MT-CODE = ' ' OR = KM-F) AND
        (XPMTSC0L.MT-GR = 0 OR = GR-F)
       PERFORM MT2STEK
     END-FIND
  ELSE
     FIND ASUM-KODIF-FILE NM-SHORT = #KEYMTS(1) THRU #KEYMTE(1)
       ACCEPT IF ASUM-KODIF-FILE.OG-F = XXCTXX0A.MT-OG-ID  AND
        (XPMTSC0L.MT-CODE = ' ' OR = KM-F) AND
        (XPMTSC0L.MT-GR = 0 OR = GR-F)
       PERFORM MT2STEK
     END-FIND
  END-IF END-IF
    WHEN NONE
       IGNORE
/*     FIND ASUM-KODIF-FILE OG-F = XXCTXX0A.MT-OG-ID
/*       PERFORM MT2STEK
/*     END-FIND
   END-DECIDE
   RESET #J
   FOR #I 1 #COUNT
     XI := #I  CALL 'RWSX' XI STEK-B.MT-CODE XR XN1
   END-ALL
   SORT STEK-B.GM-ID STEK-B.OBOZ(1) STEK-B.OBOZ(2) STEK-B.GOSTS USING STEK-B(*)
     ADD 1 TO #J
     MOVE #J TO XI
     CALL 'RWSX' XI STEK-B.MT-CODE XW XN1
   END-SORT
END-SUBROUTINE
/*
DEFINE SUBROUTINE MT2STEK
  RESET STEKMT
  MOVE ASUM-KODIF-FILE.KM-F TO STEK-B.MT-CODE
  MOVE ASUM-KODIF-FILE.INT-NUM-KM TO STEK-B.MT-ID
  IF ASUM-KODIF-FILE.OBOZ(1) NE " " OR
     ASUM-KODIF-FILE.OBOZ(2) NE " " THEN
     MOVE "L" TO STEK-B.NAME-TYPE
     MOVE BY NAME ASUM-KODIF-FILE TO STEKMT
     MOVE ASUM-KODIF-FILE.OBOZ(2) TO STEK-B.OBOZ(1)
     MOVE ASUM-KODIF-FILE.OBOZ(1) TO STEK-B.OBOZ(2)
  ELSE
     MOVE "S" TO STEK-B.NAME-TYPE
     MOVE ASUM-KODIF-FILE.NM-F(1:2) TO STEK-B.OBOZ(1:2)
  END-IF
  MOVE ASUM-KODIF-FILE.EI-F TO STEK-B.EI-CODE
  MOVE ASUM-KODIF-FILE.GR-F TO STEK-B.GM-ID
  ADD 1 TO #COUNT
  IF #COUNT > CNTST  #K := XI := CNTST  CALL 'GTSX' LEN-ST-MT XI XN2
    FOR #I 1 CNTST  XI := #I  CALL 'RWSX' XI STEK-B.MT-CODE XR XN1
      CALL 'RWSX' XI STEK-B.MT-CODE XW XN2
    END-FOR
    CALL 'FRSX' XN1
    ADD 200 TO CNTST  XI := CNTST  CALL 'GTSX' LEN-ST-MT XI XN1
    FOR #I 1 #K  XI := #I  CALL 'RWSX' XI STEK-B.MT-CODE XR XN2
      CALL 'RWSX' XI STEK-B.MT-CODE XW XN1
    END-FOR
    CALL 'FRSX' XN2
  END-IF
  XI := #COUNT  CALL 'RWSX' XI STEK-B.MT-CODE XW XN1
END-SUBROUTINE
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END
