* >Natural Source Header 000000 /*<RO>>
* :NatName MPOSLS0S
* :UID PAUL
* :Mode S
* :CP
* :Date 20070430
* :Time 1727000
* <Natural Source Header /*<<RO>
/* опнцпюллю нрнапюфемхъ яохяйю мюидеммшу днйслемрнб
/*
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING MPXXLS0A
PARAMETER USING XPMXXX0A
PARAMETER USING XXCTXX0A
PARAMETER USING UXCSXX0A
/* ярюмдюпрмше йндш ньханй
LOCAL USING XXXXEC0L
LOCAL USING XPXXEC0L
/*
LOCAL USING STEKL
/* накюярэ щйпюмю
LOCAL USING MPOSLS0L
LOCAL USING XPMXSM0L
/* напюанрйю йнлюмд
LOCAL USING XPCPXX0L
/* ярей
LOCAL USING MPOSST0L
/*
LOCAL USING MBMOMN0A
LOCAL USING MBVOMN0A
LOCAL USING MBZKMN0A
LOCAL USING UBODMN0A
LOCAL USING UBDDMN0A
LOCAL
1 #COUNTER  (I4)
1 #STR-POS  (B4/1:2)
1 #STR-LEN  (B4/1:2)
END-DEFINE
DEFINE SUBROUTINE MPOSLS0S
/*пюяьхтпнбюрэ ярей
/*
MX-EDITOR-NAME := 'яОХЯНЙ МЮИДЕММШУ ДНЙСЛЕМРНБ'
/*
INCLUDE MBMFMN1C '"""MPOSLS0M"""'
/* STANDART COMMANDS
INCLUDE XPLSMP0C '8'
/*
DEFINE SUBROUTINE SCREEN-PREPARE
  LS-COUNTER := #COUNTER := MPXXLS0A.STACK-LEN
  #N := CUR-POS
  IF #N EQ 0 THEN
     #N := 1
     /* янпрхпнбйю ярейю
     MOVE 15 TO #STR-POS(1)
     MOVE 8 TO #STR-LEN(1)
     MOVE 1 TO #STR-POS(2)
     MOVE 8 TO #STR-LEN(2)
     /*
     CALL 'SRTX' #STR-POS(1) #STR-LEN(1) #STR-POS(2) #STR-LEN(2) MPXXLS0A.STACK-NUMBER
  END-IF
/*  #N := 1
  IF MX-COMMAND EQ 'VIEW-STEK' THEN
     PERFORM STAK-LIST
  END-IF
  RESET MX-COMMAND
END-SUBROUTINE
/***********************************************************************
/*
DEFINE SUBROUTINE STAK-LIST
  RESET MPOSLS0L.LIST(*)
  #K := #N + 7 #L := 0 C-Z(*) := (AD=PN)
  FOR #I = #N TO #K
     IF #I <= MPXXLS0A.STACK-LEN
        XI := #I  CALL 'RWSX' XI MPOSST0L.STACK-REC-B(1) XR MPXXLS0A.STACK-NUMBER
        IF MPOSST0L.LS-UNPACK = FALSE
           PERFORM UNPACK-RECORD
        END-IF

        ADD 1 TO #L  RESET C-Z(#L)
        MOVE BY NAME MPOSST0L TO LIST(#L)

        IF MPOSST0L.LS-SUPPLIER-MO NE ' ' THEN
           COMPRESS MPOSST0L.LS-SUPPLIER-MO-CODE MPOSST0L.LS-SUPPLIER-MO
              INTO MPOSLS0L.LS-SUPPLIER(#L)
/*           MOVE MPOSST0L.LS-SUPPLIER-MO TO
        END-IF
        IF MPOSST0L.LS-CUSTOMER-MO NE ' ' THEN
           COMPRESS MPOSST0L.LS-CUSTOMER-MO-CODE MPOSST0L.LS-CUSTOMER-MO
              INTO MPOSLS0L.LS-CUSTOMER(#L)
/*           MOVE MPOSST0L.LS-CUSTOMER-MO TO MPOSLS0L.LS-CUSTOMER(#L)
        END-IF
        IF MPOSST0L.LS-VO NE ' ' THEN
           COMPRESS MPOSST0L.LS-VO-CODE MPOSST0L.LS-VO
              INTO MPOSLS0L.LS-SUPPLIER(#L)
/*           MOVE MPOSST0L.LS-VO TO MPOSLS0L.LS-SUPPLIER(#L)
        END-IF
/*        IF MPOSST0L.LS-ZAKAZ NE ' ' THEN
/*           MOVE MPOSST0L.LS-ZAKAZ TO MPOSLS0L.LS-CUSTOMER(#L)
/*        END-IF
    END-IF
  END-FOR
  CUR-POS := #N
END-SUBROUTINE
/*
DEFINE SUBROUTINE OBJECT-SELECT
  FOR #I = 1 TO 8
     IF *CURS-FIELD EQ POS(CP-CMD(#I)) THEN
        MOVE MPOSLS0L.LS-DOC-ID(#I) TO MPXXLS0A.LS-DOC-ID
        MOVE MPOSLS0L.LS-TYPE-ID(#I) TO MPXXLS0A.LS-TYPE-ID
        ESCAPE BOTTOM
     END-IF
  END-FOR
END-SUBROUTINE
/*
 INCLUDE XXERSY1C
/*
DEFINE SUBROUTINE UNPACK-RECORD
/*  FOR #I = 1 TO #COUNTER
/*     MOVE #I TO XI
/*    CALL 'RWSX' XI MPOSST0L.STACK-REC-B(1) XR MPXXLS0A.STACK-NUMBER
     /*
     IF MPOSST0L.LS-SUPPLIER-MO-ID NE 0 THEN
        MOVE MPOSST0L.LS-SUPPLIER-MO-ID TO MBMOMN0A.MO-ID
        MOVE 'READ' TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBMOMN0A.MO-CODE TO MPOSST0L.LS-SUPPLIER-MO-CODE
        MOVE MBMOMN0A.MO-NAME TO MPOSST0L.LS-SUPPLIER-MO
     END-IF
/*
     IF MPOSST0L.LS-CUSTOMER-MO-ID NE 0 THEN
        MOVE MPOSST0L.LS-CUSTOMER-MO-ID TO MBMOMN0A.MO-ID
        MOVE 'READ' TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBMOMN0A.MO-CODE TO LS-CUSTOMER-MO-CODE
        MOVE MO-NAME TO LS-CUSTOMER-MO
     END-IF
/*
     IF MPOSST0L.LS-VO-ID NE 0 THEN
        MOVE MPOSST0L.LS-VO-ID TO MBVOMN0A.VO-ID
        MOVE 'READ' TO MBVOMN0A.BL-COMMAND
        PERFORM MBVOMN0S XXERX00A XXCTXX0A MBVOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBVOMN0A.VO-CODE TO LS-VO-CODE
        COMPRESS  VO-NAME '; ' VO-ADDRESS  TO LS-VO LEAVING NO SPACE
     END-IF
/*
     IF MPOSST0L.LS-ZAKAZ-ID NE 0 THEN
        MOVE MPOSST0L.LS-ZAKAZ-ID TO MBZKMN0A.ZK-ID
        MOVE 'READ' TO MBZKMN0A.BL-COMMAND
        PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBZKMN0A.ZK-CODE TO LS-ZAKAZ-CODE
        MOVE MBZKMN0A.ZK-NAME TO LS-ZAKAZ
     END-IF
/*
     IF MPOSST0L.LS-OPERATION-ID NE 0 THEN
        MOVE MPOSST0L.LS-OPERATION-ID TO UBODMN0A.OD-ID
        MOVE 'READ' TO UBODMN0A.BL-COMMAND
        PERFORM UBODMN0S XXERX00A XXCTXX0A UBODMN0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE UBODMN0A.OD-NAME TO MPOSST0L.LS-OPERATION
        RESET XXERX00A
     END-IF
/*
     IF MPOSST0L.LS-TYPE-ID NE 0 THEN
        MOVE MPOSST0L.LS-TYPE-ID TO UBDDMN0A.DD-ID
        MOVE 'READ' TO UBDDMN0A.BL-COMMAND
        PERFORM UBDDMN0S XXERX00A UBDDMN0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE UBDDMN0A.DD-CODE TO MPOSST0L.LS-TYPE-DOC
        RESET XXERX00A
     END-IF
/*
     MOVE TRUE TO MPOSST0L.LS-UNPACK
     CALL 'RWSX' XI MPOSST0L.STACK-REC-B(1) XW MPXXLS0A.STACK-NUMBER
/*  end-for
END-SUBROUTINE
END-SUBROUTINE
END


