* >Natural Source Header 000000 /*<RO>>
* :NatName MERXPL0S
* :UID PAUL
* :Mode S
* :CP
* :Date 20070612
* :Time 1554000
* <Natural Source Header /*<<RO>
/***********************************************************************
/*
/* СИСТЕМА:
/* ПРОГРАММА:
/*
/* РАЗРАБОТЧИК:
/* ДАТА ВЫПУСКА:
/*
/* НАЗВАНИЕ:
/* КОМАНДЫ:
/*
/* ИСПРАВЛЕНИЯ:
/*
/***********************************************************************
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING MERXPLSA
PARAMETER USING MERXPL0A
PARAMETER USING UXCSXX0A
/*
LOCAL USING XXXXEC0L
/* Основной стек
LOCAL USING MERXPLSL
/* Стек сальдо
LOCAL USING MBMTSA1A
LOCAL USING MBSAST0A
LOCAL USING MBSAST0L
/* Доступ к документу
/*LOCAL USING MBRLHM0A
LOCAL USING MBRXPM0A
LOCAL USING MBDRXL0A
/* ЛЗК
LOCAL USING MBLKHM0A
/*
LOCAL USING MBMOMN0A
/*
LOCAL USING UBODMN0A
LOCAL USING MDMZMN0L
LOCAL USING MBMTMN0A
LOCAL USING MBGMMN0A
LOCAL USING MXRXXODL
LOCAL USING XBSOMN0A
LOCAL USING XXSOXX0L
LOCAL
1 #I       (I4)
1 #J       (I4)
1 #K       (I4)
/*1 rx-OD-TYPE       (N7)
/*1 REDEFINE rx-OD-TYPE
/*2 SKIP           (N4)
/*2 ZK-USE-OST     (N1)
/*2 ZK-REQUIRED    (N1)
/*2 UNCOMPRESS     (N1)
END-DEFINE
DEFINE SUBROUTINE MERXPL0S
RESET XXERX00A
/*
DECIDE ON FIRST VALUE MERXPL0A.ME-COMMAND
VALUE "LOAD"
  PERFORM STACK-LOAD
VALUE "FREE"
  PERFORM STACK-FREE
NONE VALUE
  MOVE MBMTSA1A.BL-COMMAND TO ERROR-ADDITION(1)
  *ERROR-NR := EC-UNKNOW-COMMAND
END-DECIDE
/*
DEFINE SUBROUTINE STACK-LOAD
  IF MERXPLSA.STACK-COUNT EQ 0 THEN
     PERFORM STACK-INIT
  END-IF
  /* читаем операцию
  MOVE XXCTXX0A.OD-ID TO UBODMN0A.OD-ID
  IF XXCTXX0A.OD-ID NE 0 THEN
    MOVE "READ" TO UBODMN0A.BL-COMMAND
    PERFORM UBODMN0S XXERX00A XXCTXX0A UBODMN0A UXCSXX0A
    IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
    MOVE UBODMN0A.OD-IT-ID(1) TO RX-OD-TYPE
  END-IF
  /* читаем материал
  MOVE MERXPL0A.MT-ID TO MBMTMN0A.MT-ID
  MOVE "READ" TO MBMTMN0A.BL-COMMAND
  PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  /* читаем группу
  MOVE MBMTMN0A.GM-ID TO MBGMMN0A.GM-ID
  MOVE "READ" TO MBGMMN0A.BL-COMMAND
  PERFORM MBGMMN0S XXERX00A XXCTXX0A MBGMMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  /* читаем заголовок
/*  MOVE MERXPL0A.RL-ID TO MBRxHM0A.RL-ID
/*  MOVE "READ" TO MBRLHM0A.BL-COMMAND
/*  PERFORM MBRLHM0S XXERX00A XXCTXX0A MBRLHM0A UXCSXX0A
/*  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  /* читаем ЛЗК
/*  MOVE MERXPL0A.LK-ID TO MBLKHM0A.LK-ID
/*  MOVE "READ" TO MBLKHM0A.BL-COMMAND
/*  PERFORM MBLKHM0S XXERX00A XXCTXX0A MBLKHM0A UXCSXX0A
/*  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
  /* Найдем уже задействованные позиции
  MOVE MERXPL0A.RXP-DD-ID TO MBDRXL0A.DD-ID
  MOVE MERXPL0A.RXM-ID TO MBDRXL0A.DR-UP-ID
  MOVE "TOP" TO MBDRXL0A.BL-COMMAND
  MOVE 20 TO MBDRXL0A.DR-LIST-READ
  REPEAT
     PERFORM MBDRXL0S XXERX00A XXCTXX0A MBDRXL0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE "NEXT" TO MBDRXL0A.BL-COMMAND
     FOR #I = 1 TO MBDRXL0A.DR-LIST-C
        MOVE MBDRXL0A.DD-ID TO MBRXPM0A.DD-ID
        MOVE MBDRXL0A.DR-ID(#I) TO MBRXPM0A.DR-ID
        MOVE "READ" TO MBRXPM0A.BL-COMMAND
        PERFORM MBRXPM0S XXERX00A XXCTXX0A MBRXPM0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        RESET MERXPLSL.STACK-REC-G MERXPLSL.STACK-KEY-G
        MOVE BY NAME MBRXPM0A TO MERXPLSL
        MOVE MBRXPM0A.BASE-COL TO MERXPLSL.BASE-COL-LIMIT
        MOVE MBRXPM0A.PRIH-COL TO MERXPLSL.PRIH-COL-LIMIT
        MOVE MBRXPM0A.PLAN-COL TO MERXPLSL.PLAN-COL-LIMIT
        MOVE MBRXPM0A.BALC-SUMMA TO MERXPLSL.BALC-SUMMA-LIMIT
/*        WRITE "LOCATE" MBLKHM0A.LK-ID MBRxpM0A.MT-ID MERxpLSL.STACK-KEY-B(*)
        PERFORM STACK-PUSH
     END-FOR
     UNTIL MBDRXL0A.IS-TOP
  END-REPEAT
  IF XXCTXX0A.OD-ID NE 0 THEN
/* Считываем сальдо
  PERFORM SALDO-STACK-INIT
  /* читаем лимит остатков
  RESET MBMTSA1A
  MOVE UBODMN0A.OD-IT-ID(2) TO MBMTSA1A.IT-ID(1)
/*  IF MERXPL0A.LK-ID NE 0 THEN
/*     MOVE MERXPL0A.LK-ID TO MBMTSA1A.DR-EXCLUDE
/*  ELSE
/*     MOVE MERXPL0A.RXM-ID TO MBMTSA1A.DR-EXCLUDE
/*  END-IF
  MOVE MERXPL0A.IN-MO-ID TO MBMTSA1A.MO-ID
  MOVE MERXPL0A.MT-ID  TO MBMTSA1A.MT-ID
  IF ZK-USE-OST NE 0 THEN
     MOVE MERXPL0A.ZK-ID TO MBMTSA1A.ZK-ID
  END-IF
  IF KOR-USE-OST EQ 2 THEN
     MOVE MERXPL0A.OUT-MO-ID TO MBMTSA1A.KOR-MO-ID
     MOVE MERXPL0A.VO-ID TO MBMTSA1A.KOR-VO-ID
/*     MOVE MERXPL0A.zk-ID TO MBMTSA1A.KOR-zk-ID
  END-IF
  IF KOR-USE-OST EQ 3 THEN
     MOVE MERXPL0A.OUT-MO-ID TO MBMOMN0A.MO-ID
     MOVE "READ" TO MBMOMN0A.BL-COMMAND
     PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE MBMOMN0A.DP-ID TO MBMTSA1A.KOR-DP-ID
  END-IF
/*  MOVE MERLMM0A.EI-ID TO MBMTSA1A.PRIH-EI-ID
/*  MOVE MERLMM0A.BASE-EI-ID TO MBMTSA1A.BASE-EI-ID
  DECIDE ON FIRST VALUE MBGMMN0A.GM-METHOD
     VALUE "LF", "LT"
        MOVE "LIFO" TO MBMTSA1A.BL-COMMAND
     VALUE "FF", "FT"
        MOVE "FIFO" TO MBMTSA1A.BL-COMMAND
     NONE VALUE
        MOVE "FIFO" TO MBMTSA1A.BL-COMMAND
  END-DECIDE
  PERFORM MBMTSA1S XXERX00A XXCTXX0A MBSAST0A MBMTSA1A UXCSXX0A
/*  WRITE 'limit' RETURN-CODE MBMTSA1A.PR-ID MBMTSA1A.PRIH-COL MBMTSA1A.PRIH-EI-ID MBMTSA1A.BASE-COL MBMTSA1A.BASE-EI-ID MBMTSA1A.BALC-SUMMA
  IF RETURN-CODE NE 0 THEN
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        RESET RETURN-CODE
     ELSE
        *ERROR-NR := EC-QUIT-STACK-TRACE
     END-IF
  END-IF
  IF MXRXXODL.DF-CODE NE 0 THEN
     MOVE MXRXXODL.DF-CODE TO XBSOMN0A.SO-CODE
     MOVE SO-TYPE-DF TO XBSOMN0A.SO-TYPE
     MOVE "LOCATE" TO XBSOMN0A.BL-COMMAND
     PERFORM XBSOMN0S XXERX00A XXCTXX0A XBSOMN0A
     IF RETURN-CODE LT 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE XBSOMN0A.SO-ID TO MBMTSA1A.DF-ID
  ELSE
     RESET MBMTSA1A.DF-ID
  END-IF
  FOR #J = 1 TO MBSAST0A.STACK-LEN
     MOVE #J TO MBSAST0L.STACK-POS PERFORM SALDO-READ
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     IF MBSAST0L.BALC-SUMMA = 0 AND MBSAST0L.BASE-COL = 0 AND
        MBSAST0L.PRIH-COL = 0 THEN
        ESCAPE TOP
     END-IF
     /* Жесткий хак дл  возвратов с участка
     IF KOR-USE-OST EQ 3 THEN
        MBSAST0L.BALC-SUMMA := MBSAST0L.BALC-SUMMA * -1
        MBSAST0L.BASE-COL := MBSAST0L.BASE-COL * -1
        MBSAST0L.PRIH-COL := MBSAST0L.PRIH-COL * -1
     END-IF
     IF MBMTSA1A.DF-ID NE 0 THEN
        IF MBSAST0L.DF-ID NE MBMTSA1A.DF-ID THEN
           ESCAPE TOP
        END-IF
     END-IF
/*     WRITE MBSAST0L.PR-ID MBSAST0L.BASE-COL MBSAST0L.PRIH-COL
     MOVE  MBSAST0L.IX-ID TO MERXPLSL.IX-ID
     PERFORM STACK-LOCATE
     IF RETURN-CODE NE 0 THEN
        IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
           RESET RETURN-CODE MERXPLSL.STACK-REC-G MERXPLSL.STACK-KEY-G
           MOVE MBSAST0L.IX-ID TO MERXPLSL.IX-ID
           MOVE MBSAST0L.DT-ID TO MERXPLSL.DT-ID
           MOVE MBSAST0L.IT-ID TO MERXPLSL.IT-ID
           MOVE MBSAST0L.MO-ID TO MERXPLSL.MO-ID
           MOVE MBSAST0L.GM-ID TO MERXPLSL.GM-ID
           MOVE MBSAST0L.PR-ID TO MERXPLSL.PR-ID
           MOVE MBSAST0L.BASE-MT-ID TO MERXPLSL.BASE-MT-ID
/*           MOVE MBSAST0L.LK-ID TO MERXPLSL.LK-ID
           MOVE MBSAST0L.ZK-ID TO MERXPLSL.ZK-ID
           MOVE MBSAST0L.BS-ID TO MERXPLSL.BS-ID
           MOVE MBSAST0L.BASE-EI-ID TO MERXPLSL.BASE-EI-ID
           MOVE MBSAST0L.PRIH-EI-ID TO MERXPLSL.PRIH-EI-ID
           MOVE MBSAST0L.PLAN-EI-ID TO MERXPLSL.PLAN-EI-ID
           PERFORM STACK-PUSH
        END-IF
     END-IF
     PERFORM STACK-READ
/*     IF MBSAST0L.BASE-COL LE 0 THEN ESCAPE TOP END-IF
     ADD MBSAST0L.BASE-COL TO MERXPLSL.BASE-COL-LIMIT
     ADD MBSAST0L.PRIH-COL TO MERXPLSL.PRIH-COL-LIMIT
     ADD MBSAST0L.PLAN-COL TO MERXPLSL.PLAN-COL-LIMIT
     ADD MBSAST0L.BALC-SUMMA TO MERXPLSL.BALC-SUMMA-LIMIT
     PERFORM STACK-WRITE
/*     ADD MBSAST0L.BALC-SUMMA TO MERLMM0A.CENA-SUMMA-LIMIT
  END-FOR
  PERFORM SALDO-STACK-FREE
/* Чтение остатков дл  определени  резервов расхода
  IF UBODMN0A.OD-IT-ID(4) <= 0 THEN ESCAPE ROUTINE END-IF
  MOVE UBODMN0A.OD-IT-ID(4) TO MBMTSA1A.IT-ID(1)
  RESET MBMTSA1A.DF-ID
  MOVE MERXPL0A.OUT-MO-ID TO MBMTSA1A.MO-ID
  PERFORM MBMTSA1S XXERX00A XXCTXX0A MBSAST0A MBMTSA1A UXCSXX0A
/*  WRITE 'limit' RETURN-CODE MBMTSA1A.IT-ID(1) MBMTSA1A.MO-ID MBMTSA1A.MT-ID MBMTSA1A.DR-EXCLUDE
  IF RETURN-CODE NE 0 THEN
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        PERFORM SALDO-STACK-FREE
        RESET RETURN-CODE
        ESCAPE ROUTINE
     ELSE
        *ERROR-NR := EC-QUIT-STACK-TRACE
     END-IF
  END-IF
  FOR #J = 1 TO MBSAST0A.STACK-LEN
     MOVE #J TO MBSAST0L.STACK-POS PERFORM SALDO-READ
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*     WRITE *PROGRAM MBSAST0L.MO-ID MBSAST0L.MT-ID MBSAST0L.BASE-COL MBSAST0L.PRIH-COL MBSAST0L.BALC-SUMMA
     IF MBSAST0L.BALC-SUMMA = 0 AND MBSAST0L.BASE-COL = 0 AND
        MBSAST0L.PRIH-COL = 0 THEN
        ESCAPE TOP
     END-IF
     IF MBMTSA1A.DF-ID NE 0 THEN
        IF MBSAST0L.DF-ID NE MBMTSA1A.DF-ID THEN
           ESCAPE TOP
        END-IF
     END-IF
/*     WRITE MBSAST0L.IX-ID MBSAST0L.PR-ID MBSAST0L.BASE-COL MBSAST0L.PRIH-COL
     FOR #K = 1 TO MERXPLSA.STACK-LEN
        MOVE #K TO MERXPLSL.STACK-POS
        PERFORM STACK-READ
        IF MERXPLSL.PR-ID NE MBSAST0L.PR-ID THEN ESCAPE TOP END-IF
        IF MBSAST0L.BASE-MT-ID NE 0 THEN
           IF MERXPLSL.BASE-MT-ID EQ 0 THEN
              IF MERXPL0A.MT-ID NE MBSAST0L.BASE-MT-ID THEN
                    ESCAPE TOP END-IF
           ELSE
              IF MERXPLSL.BASE-MT-ID NE MBSAST0L.BASE-MT-ID THEN
                    ESCAPE TOP END-IF
           END-IF
        END-IF
        ADD MBSAST0L.BASE-COL TO MERXPLSL.BASE-COL-MIN
        ADD MBSAST0L.PRIH-COL TO MERXPLSL.PRIH-COL-MIN
        ADD MBSAST0L.PLAN-COL TO MERXPLSL.PLAN-COL-MIN
        ADD MBSAST0L.BALC-SUMMA TO MERXPLSL.BALC-SUMMA-MIN
        PERFORM STACK-WRITE
     END-FOR
  END-FOR
  PERFORM SALDO-STACK-FREE
  FOR #K = 1 TO MERXPLSA.STACK-LEN
     MOVE #K TO MERXPLSL.STACK-POS
     PERFORM STACK-READ
     IF MERXPLSL.PRIH-COL > MERXPLSL.PRIH-COL-MIN THEN
        MERXPLSL.PRIH-COL-MIN := MERXPLSL.PRIH-COL - MERXPLSL.PRIH-COL-MIN
     ELSE
        RESET MERXPLSL.PRIH-COL-MIN
     END-IF
     IF MERXPLSL.BASE-COL > MERXPLSL.BASE-COL-MIN THEN
        MERXPLSL.BASE-COL-MIN := MERXPLSL.BASE-COL - MERXPLSL.BASE-COL-MIN
     ELSE
        RESET MERXPLSL.BASE-COL-MIN
     END-IF
     IF MERXPLSL.PLAN-COL > MERXPLSL.PLAN-COL-MIN THEN
        MERXPLSL.PLAN-COL-MIN := MERXPLSL.PLAN-COL - MERXPLSL.PLAN-COL-MIN
     ELSE
        RESET MERXPLSL.PLAN-COL-MIN
     END-IF
     PERFORM STACK-WRITE
  END-FOR
  END-IF
/*
END-SUBROUTINE
/*
/* Управление стеком сальдо
INCLUDE XXSTMN4C "MBSAST0A" "MBSAST0L-CONST" "MBSAST0L"
        "SALDO-STACK-INIT" "SALDO-STACK-FREE" "SALDO-STACK-REALLOC"
        "SALDO-PUSH" "SALDO-READ" "SALDO-WRITE" "SALDO-LOCATE"
/* Управление основным стеком
INCLUDE XXSTMN4C "MERXPLSA" "MERXPLSL-CONST" "MERXPLSL"
        "STACK-INIT" "STACK-FREE" "STACK-REALLOC"
        "STACK-PUSH" "STACK-READ" "STACK-WRITE" "STACK-LOCATE"
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END
