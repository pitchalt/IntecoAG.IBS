* >Natural Source Header 000000 /*<RO>>
* :NatName MSOBXS0S
* :UID ARMK01
* :Mode S
* :CP
* :Date 20071211
* :Time 2028000
* <Natural Source Header /*<<RO>
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING UXCSXX0A
PARAMETER USING MSOXXS0A
PARAMETER USING MSOXCM0A
/*
LOCAL USING XXXXEC0L
LOCAL USING UXXXEC0L
LOCAL USING MXITAT0L
/*
LOCAL USING UBITMN0A
LOCAL USING UDSASH0A
/*LOCAL USING UDOPMN0A
LOCAL USING UDOPMN0L
/*
LOCAL USING MSOXSS0L
LOCAL USING MSOXOS0L
/*
LOCAL USING XPPBXX0A
/*
LOCAL USING UBODMN0A
LOCAL USING UBDDMN0A
LOCAL USING MBDCHM0A
LOCAL USING MBMTMN0A
LOCAL USING MBPRMN0A
LOCAL USING MBMOMN0A
LOCAL USING MBVOMN0A
LOCAL USING MBZKMN0A
LOCAL USING MBPHMN0A
LOCAL USING MBTTMN0A
LOCAL USING MBSFMN0A
LOCAL USING XBDPMN0A
/*
LOCAL
1 #DATA-A     (A8)
1 REDEFINE #DATA-A
2 #DATA-N     (N8)
1 #COUNT      (I4)
1 #ITEM       (I4)
/*
1 #FOUND      (L)
1 #ATTR       (I4)
1 #OP         (I4)
1 #MDOS       (I4)
1 #MDKS       (I4)
/*
1 EXPORT-RECORD
/*2 DT-REAL     (D)
2 MO-COD            (N5)
2 ZAKAZ             (A9)
2 NOMEN             (A22)
2 NAIM              (A50)
2 OBOZN             (A50)
/*2 MT-GOST           (A50)
/*2 MT-PROF           (A50)
2 VIDPR             (A10)
2 CENA              (N13.2)
2 KOL-NACH          (P8.7)
2 SUM-NACH          (P13.2)
2 KOL-PRIX          (P8.7)
2 SUM-PRIX          (P13.2)
2 KOL-VOZ           (P8.7)
2 SUM-VOZ           (P13.2)
2 KOL-END           (P8.7)
2 SUM-END           (P13.2)
2 KOL-RASX          (P8.7)
2 SUM-RASX          (P13.2)
/*2 IN-PLAN-COL       (P8.7)
/*2 DEBET-PLAN-COL    (P8.7)
/*2 CREDIT-PLAN-COL   (P8.7)
/*2 OUT-PLAN-COL      (P8.7)
2 PARTII            (A9)
2 NOM_OSN           (A22)
2 NAIM_OSN          (A150)
1 #DT         (D)
1 #SRT1       (B4)
1 #SRT2       (B4)
1 #SRT3       (B4)
1 #SRT4       (B4)
/*
1 #COUNT-MAX (I4)
1 #COUNT-NEW (I4)
1 #COUNT-DEL (I4)
1 #COUNT-REUSE (I4)
END-DEFINE
DEFINE SUBROUTINE MSOBXS0S
  IF MSOXCM0A.BL-COMMAND EQ "EXPORT" THEN
     PERFORM EXPORT-STACK
     ESCAPE ROUTINE
  END-IF
  IF MSOXCM0A.SA-DT-ATTR-ID EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
  IF MSOXCM0A.SA-DT-START EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
  IF MSOXCM0A.SA-DT-STOP EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
/* читаем определение регистра что-бы определить cl-id (по идее нужно
/* просматривать все регистры и использовать множество cl-id)
  MOVE MSOXCM0A.IT-ID(1) TO UBITMN0A.IT-ID
  MOVE "READ" TO UBITMN0A.BL-COMMAND
  PERFORM UBITMN0S XXERX00A XXCTXX0A UBITMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  PERFORM SLD-INIT
  RESET MSOXSS0A.STACK-FIRST-FREE
/*  PERFORM OP-INIT
/*
/* готовим параметры запроса
  MOVE MSOXCM0A.IT-ID(*) TO UDSASH0A.SH-IT-ID(*)
  IF MSOXCM0A.MO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MSOXCM0A.MO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MSOXCM0A.MT-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MT-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MSOXCM0A.MT-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MSOXCM0A.BASE-MT-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MT-BASE-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MSOXCM0A.BASE-MT-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MSOXCM0A.ZK-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE ZK-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MSOXCM0A.ZK-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MSOXCM0A.PR-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE PR-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MSOXCM0A.PR-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  UDSASH0A.SH-OP-CL-ID := UBITMN0A.CL-ID * 10 + 2
  MOVE MSOXCM0A.SA-DT-ATTR-ID TO UDSASH0A.SH-DT-ATTR-ID
  /*
/*  MOVE EDITED SA-DT-START (EM=YYYYMMDD) TO #DATA-A
/*  MOVE #DATA-N TO UDSASH0A.SH-DT-START
  RESET UDSASH0A.SH-DT-START
  MOVE EDITED SA-DT-STOP (EM=YYYYMMDD) TO #DATA-A
  MOVE #DATA-N TO UDSASH0A.SH-DT-STOP
  /* Запускаем поиск
  MOVE "SEARCH" TO UDSASH0A.DL-COMMAND
  PERFORM UDSASH0S XXERX00A UDSASH0A
  IF RETURN-CODE NE 0 THEN
     IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        ESCAPE ROUTINE
     END-IF
  END-IF
  INCLUDE XPPBIN0C "SH-NUMBER" '"Загрузка операций"'
  PERFORM PROCESS-QUERY
/*
DEFINE SUBROUTINE PROCESS-QUERY
  FIND UR-ACC-OP-VIEW WITH UDSASH0A.SH-RETAIN
     ADD 1 TO #COUNT
     INCLUDE XPPBST0C "#COUNT"
     ACCEPT UR-ACC-OP-VIEW.OP-STATE EQ "N" AND UR-ACC-OP-VIEW.TX-STATUS EQ "N"
     FOR #OP = 1 TO C*OP-G
/*        WRITE UR-ACC-OP-VIEW.OP-DC-DD-ID(#OP) UR-ACC-OP-VIEW.OP-DC-DR-ID(#OP)
        FOR #MDOS = 1 TO C*MD-G
           IF MD-OP-INT-NUM(#MDOS) NE UR-ACC-OP-VIEW.OP-INT-NUM(#OP) OR
              MD-IT-ID(#MDOS) EQ 0 THEN
              ESCAPE TOP
           END-IF
           IF MD-IT-ID(#MDOS) EQ MSOXCM0A.IT-ID(*) THEN
              #FOUND := FALSE
              FOR #MDKS = 1 TO C*MD-G
                 IF #MDOS EQ #MDKS THEN ESCAPE TOP END-IF
                 IF MD-OP-INT-NUM(#MDKS) EQ UR-ACC-OP-VIEW.OP-INT-NUM(#OP) THEN
                    #FOUND := TRUE
                    ESCAPE BOTTOM
                 END-IF
              END-FOR
              IF NOT #FOUND THEN RESET #MDKS END-IF
              PERFORM PROCESS-OPERATION
           END-IF
        END-FOR
     END-FOR
  END-FIND
  MOVE 13 TO #SRT1
  MOVE 40 TO #SRT2
  CALL "SRTX" #SRT1 #SRT2 MSOXSS0A.STACK-NUMBER
/*MOVE 5 TO #SRT1
/*MOVE 9 TO #SRT2
/*CALL "SRTX" #SRT1 #SRT2 MSOXOS0A.STACK-NUMBER
/*WRITE MSOXSS0A.STACK-NUMBER MSOXSS0A.STACK-COUNT MSOXSS0A.STACK-LEN
/*      #COUNT-NEW #COUNT-DEL #COUNT-REUSE
END-SUBROUTINE
/*
DEFINE SUBROUTINE PROCESS-OPERATION
  RESET MSOXSS0L.STACK-REC-G MSOXSS0L.STACK-KEY-G
        MSOXOS0L.STACK-REC-G MSOXOS0L.STACK-KEY-G
  MOVE UR-ACC-OP-VIEW.MD-MODIF(#MDOS) TO MSOXOS0L.MD-MODIF
  MOVE UR-ACC-OP-VIEW.OP-OD-ID(#OP) TO MSOXOS0L.OD-ID
  MOVE UR-ACC-OP-VIEW.OP-DC-DD-ID(#OP) TO MSOXOS0L.DD-ID
  MOVE UR-ACC-OP-VIEW.OP-DC-DR-ID(#OP) TO MSOXOS0L.DR-ID
  FOR #ATTR = 1 TO C*AD-G
     IF AD-INT-NUM(#ATTR) EQ MD-AD-INT-NUM(#MDOS,*) THEN
        DECIDE ON EVERY VALUE AD-ATTR-ID(#ATTR)
        VALUE MSOXCM0A.SA-DT-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO #DT
        VALUE DT-REAL-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MSOXOS0L.DT-REAL
        VALUE DT-REFL-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MSOXOS0L.DT-REFL
        VALUE DT-MAKE-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MSOXOS0L.DT-MAKE
        NONE VALUE
           IGNORE
        END-DECIDE
     END-IF
  END-FOR
  MOVE UR-ACC-OP-VIEW.MD-IX-ID(#MDOS) TO MSOXSS0L.IX-ID
  IF MSOXSS0L.IX-ID EQ 0 THEN ESCAPE ROUTINE END-IF
/*IF MSOXSS0L.IX-ID EQ 0 THEN
/*   WRITE "ZERO" #MDOS UR-ACC-OP-VIEW.MD-IX-ID(#MDOS)
/*END-IF
  PERFORM SLD-LOCATE
/*IF MSOXSS0L.STACK-POS EQ H'0000001B' OR
/*   (MSOXSS0L.IX-ID EQ 114463951412 OR EQ 124339053455) THEN
/*   WRITE "LOC " MSOXSS0L.IX-ID MSOXSS0L.STACK-POS RETURN-CODE
/*END-IF
  IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
     PERFORM SLD-READ
/*IF MSOXSS0L.STACK-POS EQ H'0000001B' OR
/*   (MSOXSS0L.IX-ID EQ 114463951412 OR EQ 124339053455) THEN
/*   WRITE "READ" MSOXSS0L.IX-ID MSOXSS0L.STACK-POS
/*END-IF
  END-IF
  FOR #ATTR = 1 TO C*AT-G
     IF AT-MD-INT-NUM(#ATTR,*) EQ UR-ACC-OP-VIEW.MD-INT-NUM(#MDOS) THEN
        IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
           DECIDE ON FIRST VALUE UR-ACC-OP-VIEW.AT-ATTR-ID(#ATTR)
           VALUE MO-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXSS0L.MO-ID
           VALUE MT-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXSS0L.MT-ID
           VALUE MT-BASE-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXSS0L.BASE-MT-ID
           VALUE PR-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXSS0L.PR-ID
           VALUE ZK-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXSS0L.ZK-ID
           NONE VALUE
              IGNORE
           END-DECIDE
        END-IF
        DECIDE ON FIRST VALUE UR-ACC-OP-VIEW.AT-ATTR-ID(#ATTR)
        VALUE BALC-SUM-ATTR-ID
           MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXOS0L.BALC-SUMMA-P
        VALUE BASE-COL-ATTR-ID
           MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXOS0L.BASE-COL-P
        VALUE PRIH-COL-ATTR-ID
           MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXOS0L.PRIH-COL-P
        VALUE PLAN-COL-ATTR-ID
           MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MSOXOS0L.PLAN-COL-P
        NONE VALUE
           IGNORE
        END-DECIDE
     END-IF
  END-FOR
/*  WRITE RETURN-CODE MSOXSS0L.MT-ID MSOXOS0L.BASE-COL-P
  IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
     PERFORM SLD-NEW
  END-IF
  MOVE UR-ACC-OP-VIEW.MD-MODIF(#MDOS) TO MSOXOS0L.MD-MODIF
  IF #DT >= MSOXCM0A.SA-DT-START AND #DT <= MSOXCM0A.SA-DT-STOP THEN
     MOVE UR-ACC-OP-VIEW.MD-IX-ID(#MDOS) TO MSOXOS0L.IX-ID
     MOVE UR-ACC-OP-VIEW.OP-OD-ID(#OP) TO MSOXOS0L.OD-ID
     MOVE UR-ACC-OP-VIEW.OP-DC-DD-ID(#OP) TO MSOXOS0L.DD-ID
     MOVE UR-ACC-OP-VIEW.OP-DC-DR-ID(#OP) TO MSOXOS0L.DR-ID
/*     PERFORM OP-PUSH
  END-IF
  IF MSOXOS0L.MD-MODIF EQ 2 THEN
     MULTIPLY MSOXOS0L.BALC-SUMMA            BY -1
     MULTIPLY MSOXOS0L.BASE-COL              BY -1
     MULTIPLY MSOXOS0L.PRIH-COL              BY -1
     MULTIPLY MSOXOS0L.PLAN-COL              BY -1
  END-IF
  IF #DT < MSOXCM0A.SA-DT-START THEN
     ADD MSOXOS0L.BALC-SUMMA            TO MSOXSS0L.IN-BALC-SUMMA
     ADD MSOXOS0L.BASE-COL              TO MSOXSS0L.IN-BASE-COL
     ADD MSOXOS0L.PRIH-COL              TO MSOXSS0L.IN-PRIH-COL
     ADD MSOXOS0L.PLAN-COL              TO MSOXSS0L.IN-PLAN-COL
  END-IF
  IF #DT <= MSOXCM0A.SA-DT-STOP  THEN
     ADD MSOXOS0L.BALC-SUMMA            TO MSOXSS0L.OUT-BALC-SUMMA
     ADD MSOXOS0L.BASE-COL              TO MSOXSS0L.OUT-BASE-COL
     ADD MSOXOS0L.PRIH-COL              TO MSOXSS0L.OUT-PRIH-COL
     ADD MSOXOS0L.PLAN-COL              TO MSOXSS0L.OUT-PLAN-COL
  END-IF
  IF #DT >= MSOXCM0A.SA-DT-START AND #DT <= MSOXCM0A.SA-DT-STOP THEN
     IF MSOXOS0L.MD-MODIF EQ 1 THEN
        IF MSOXOS0L.BASE-COL >= 0 THEN
           ADD MSOXOS0L.BALC-SUMMA            TO MSOXSS0L.DEBET-BALC-SUMMA
           ADD MSOXOS0L.BASE-COL              TO MSOXSS0L.DEBET-BASE-COL
           ADD MSOXOS0L.PRIH-COL              TO MSOXSS0L.DEBET-PRIH-COL
           ADD MSOXOS0L.PLAN-COL              TO MSOXSS0L.DEBET-PLAN-COL
        ELSE
           SUBTRACT MSOXOS0L.BALC-SUMMA     FROM MSOXSS0L.VOZ-BALC-SUMMA
           SUBTRACT MSOXOS0L.BASE-COL       FROM MSOXSS0L.VOZ-BASE-COL
           SUBTRACT MSOXOS0L.PRIH-COL       FROM MSOXSS0L.VOZ-PRIH-COL
           SUBTRACT MSOXOS0L.PLAN-COL       FROM MSOXSS0L.VOZ-PLAN-COL
        END-IF
     ELSE
        IF MD-IT-ID(#MDKS) EQ 121 THRU 125 THEN
           ADD MSOXOS0L.BALC-SUMMA            TO MSOXSS0L.VOZ-BALC-SUMMA
           ADD MSOXOS0L.BASE-COL              TO MSOXSS0L.VOZ-BASE-COL
           ADD MSOXOS0L.PRIH-COL              TO MSOXSS0L.VOZ-PRIH-COL
           ADD MSOXOS0L.PLAN-COL              TO MSOXSS0L.VOZ-PLAN-COL
        ELSE
           ADD MSOXOS0L.BALC-SUMMA            TO MSOXSS0L.CREDIT-BALC-SUMMA
           ADD MSOXOS0L.BASE-COL              TO MSOXSS0L.CREDIT-BASE-COL
           ADD MSOXOS0L.PRIH-COL              TO MSOXSS0L.CREDIT-PRIH-COL
           ADD MSOXOS0L.PLAN-COL              TO MSOXSS0L.CREDIT-PLAN-COL
        END-IF
     END-IF
  END-IF
  PERFORM SLD-WRITE
/*  IF MSOXSS0L.MT-ID EQ 56406 AND MSOXSS0L.PR-ID EQ 142830 AND
/*     MSOXSS0L.ZK-ID EQ 2721 THEN
/*WRITE MSOXSS0L.IX-ID MSOXCM0A.SA-DT-START
/*      MSOXOS0L.BALC-SUMMA MSOXOS0L.BASE-COL /
/*     MSOXSS0L.IN-BALC-SUMMA       MSOXSS0L.IN-BASE-COL
/*     MSOXSS0L.OUT-BALC-SUMMA       MSOXSS0L.OUT-BASE-COL /
/*     MSOXSS0L.DEBET-BALC-SUMMA    MSOXSS0L.DEBET-BASE-COL
/*     MSOXSS0L.VOZ-BALC-SUMMA      MSOXSS0L.VOZ-BASE-COL
/*     MSOXSS0L.CREDIT-BALC-SUMMA   MSOXSS0L.CREDIT-BASE-COL
/*  END-IF
  IF MSOXSS0L.IN-BALC-SUMMA EQ 0 AND MSOXSS0L.IN-BASE-COL EQ 0 AND
     MSOXSS0L.IN-PRIH-COL EQ 0 AND MSOXSS0L.IN-PLAN-COL EQ 0 AND
     MSOXSS0L.DEBET-BALC-SUMMA EQ 0 AND MSOXSS0L.DEBET-BASE-COL EQ 0 AND
     MSOXSS0L.DEBET-PRIH-COL EQ 0 AND MSOXSS0L.DEBET-PLAN-COL EQ 0 AND
     MSOXSS0L.VOZ-BALC-SUMMA EQ 0 AND MSOXSS0L.VOZ-BASE-COL EQ 0 AND
     MSOXSS0L.VOZ-PRIH-COL EQ 0 AND MSOXSS0L.VOZ-PLAN-COL EQ 0 AND
     MSOXSS0L.CREDIT-BALC-SUMMA EQ 0 AND MSOXSS0L.CREDIT-BASE-COL EQ 0 AND
     MSOXSS0L.CREDIT-PRIH-COL EQ 0 AND MSOXSS0L.CREDIT-PLAN-COL EQ 0 THEN
     PERFORM SLD-DEL
  END-IF
  RESET RETURN-CODE
END-SUBROUTINE
/*
DEFINE SUBROUTINE SLD-DEL
/*WRITE 'DEL' MSOXSS0L.STACK-POS
/*IF MSOXSS0L.STACK-POS EQ H'0000001B' OR
/*   (MSOXSS0L.IX-ID EQ 114463951412 OR EQ 124339053455) THEN
/*   WRITE "DEL " MSOXSS0L.IX-ID MSOXSS0L.STACK-POS
/*END-IF
  ADD 1 TO #COUNT-DEL
  RESET MSOXSS0L.STACK-KEY-G
  MOVE MSOXSS0A.STACK-FIRST-FREE TO MSOXSS0L.SA-NEXT-FREE
  MOVE MSOXSS0L.STACK-POS TO MSOXSS0A.STACK-FIRST-FREE
  PERFORM SLD-WRITE
END-SUBROUTINE
/*
DEFINE SUBROUTINE SLD-NEW
  IF MSOXSS0A.STACK-FIRST-FREE EQ 0 THEN
/*   WRITE 'NEW'
     ADD 1 TO #COUNT-NEW
     PERFORM SLD-PUSH
  ELSE
/*   WRITE 'REUSE' MSOXSS0A.STACK-FIRST-FREE
     ADD 1 TO #COUNT-REUSE
     MOVE MSOXSS0A.STACK-FIRST-FREE TO MSOXSS1L.STACK-POS
     PERFORM SLD-T-READ
     MOVE MSOXSS1L.STACK-POS TO MSOXSS0L.STACK-POS
     MOVE MSOXSS1L.SA-NEXT-FREE TO MSOXSS0A.STACK-FIRST-FREE
     RESET MSOXSS0L.SA-NEXT-FREE
     PERFORM SLD-WRITE
  END-IF
/*IF MSOXSS0L.STACK-POS EQ H'0000001B' OR
/*(MSOXSS0L.IX-ID EQ 114463951412 OR EQ 124339053455) THEN
/*   WRITE "NEW " MSOXSS0L.IX-ID MSOXSS0L.STACK-POS
/*END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE EXPORT-STACK
  RESET XPPBXX0A
  INCLUDE XPPBIN0C "MSOXSS0A.STACK-LEN" '"Выгрузка операций"'
  FOR #ITEM = 1 TO MSOXSS0A.STACK-LEN
     INCLUDE XPPBST0C "#ITEM"
     MOVE #ITEM TO MSOXSS0L.STACK-POS
     PERFORM SLD-READ
/*   IF #ITEM > 5000 THEN WRITE #ITEM END-IF
     IF MSOXSS0L.IX-ID EQ 0 THEN ESCAPE TOP END-IF
     RESET EXPORT-RECORD
     IF MSOXSS0L.IN-BASE-COL EQ 0 AND MSOXSS0L.DEBET-BASE-COL EQ 0 AND
        MSOXSS0L.CREDIT-BASE-COL EQ 0 THEN
        ESCAPE TOP
     END-IF
     MOVE MSOXSS0L.IN-BASE-COL TO EXPORT-RECORD.KOL-NACH
     MOVE MSOXSS0L.IN-BALC-SUMMA TO EXPORT-RECORD.SUM-NACH
     MOVE MSOXSS0L.DEBET-BASE-COL TO EXPORT-RECORD.KOL-PRIX
     MOVE MSOXSS0L.DEBET-BALC-SUMMA TO EXPORT-RECORD.SUM-PRIX
     MOVE MSOXSS0L.VOZ-BASE-COL TO EXPORT-RECORD.KOL-VOZ
     MOVE MSOXSS0L.VOZ-BALC-SUMMA TO EXPORT-RECORD.SUM-VOZ
     MOVE MSOXSS0L.CREDIT-BASE-COL TO EXPORT-RECORD.KOL-RASX
     MOVE MSOXSS0L.CREDIT-BALC-SUMMA TO EXPORT-RECORD.SUM-RASX
     MOVE MSOXSS0L.OUT-BASE-COL TO EXPORT-RECORD.KOL-END
     MOVE MSOXSS0L.OUT-BALC-SUMMA TO EXPORT-RECORD.SUM-END
     IF MSOXSS0L.IN-BASE-COL NE 0 THEN
        COMPUTE ROUNDED EXPORT-RECORD.CENA =
              MSOXSS0L.IN-BALC-SUMMA / MSOXSS0L.IN-BASE-COL
     ELSE IF MSOXSS0L.DEBET-BASE-COL NE 0 THEN
        COMPUTE ROUNDED EXPORT-RECORD.CENA =
              MSOXSS0L.DEBET-BALC-SUMMA / MSOXSS0L.DEBET-BASE-COL
     ELSE IF MSOXSS0L.CREDIT-BASE-COL NE 0 THEN
        COMPUTE ROUNDED EXPORT-RECORD.CENA =
              MSOXSS0L.CREDIT-BALC-SUMMA / MSOXSS0L.CREDIT-BASE-COL
     END-IF END-IF END-IF
     EXPORT-RECORD.KOL-RASX := EXPORT-RECORD.KOL-RASX * -1
     EXPORT-RECORD.SUM-RASX := EXPORT-RECORD.SUM-RASX * -1
     /*
     IF MSOXSS0L.MO-ID NE MBMOMN0A.MO-ID THEN
        MOVE MSOXSS0L.MO-ID TO MBMOMN0A.MO-ID
        MOVE "READ" TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     END-IF
     MOVE MBMOMN0A.MO-CODE TO EXPORT-RECORD.MO-COD
     /*
     IF MSOXSS0L.ZK-ID NE MBZKMN0A.ZK-ID THEN
        MOVE MSOXSS0L.ZK-ID TO MBZKMN0A.ZK-ID
        MOVE "READ" TO MBZKMN0A.BL-COMMAND
        PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     END-IF
     MOVE MBZKMN0A.ZK-CODE TO EXPORT-RECORD.ZAKAZ
     /*
     IF MSOXSS0L.MT-ID NE MBMTMN0A.MT-ID THEN
        MOVE MSOXSS0L.MT-ID TO MBMTMN0A.MT-ID
        MOVE "READ" TO MBMTMN0A.BL-COMMAND
        PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     END-IF
/*     MOVE MBMTMN0A.MT-CODE TO EXPORT-RECORD.MT-CODE
     MOVE MBMTMN0A.MT-CODE TO EXPORT-RECORD.NOMEN
     MOVE MBMTMN0A.MT-SHORT-NAME TO EXPORT-RECORD.NAIM
     MOVE MBMTMN0A.MT-OBOZ TO EXPORT-RECORD.OBOZN
     MOVE MBMTMN0A.MT-VPR TO EXPORT-RECORD.VIDPR
     /*
     IF MSOXSS0L.PR-ID NE MBPRMN0A.PR-ID THEN
        MOVE MSOXSS0L.PR-ID TO MBPRMN0A.PR-ID
        MOVE "READ" TO MBPRMN0A.BL-COMMAND
        PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     END-IF
     MOVE MBPRMN0A.PR-CODE TO EXPORT-RECORD.PARTII
     /*
     IF MSOXSS0L.BASE-MT-ID NE MBMTMN0A.MT-ID THEN
        MOVE MSOXSS0L.BASE-MT-ID TO MBMTMN0A.MT-ID
        MOVE "READ" TO MBMTMN0A.BL-COMMAND
        PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     END-IF
     MOVE MBMTMN0A.MT-CODE TO EXPORT-RECORD.NOM_OSN
     MOVE MBMTMN0A.MT-NAME TO EXPORT-RECORD.NAIM_OSN
     /*
     WRITE WORK FILE 7 EXPORT-RECORD
     /*
/*     MOVE MSOXSS0L.IX-ID TO MSOXOS0L.IX-ID
/*     PERFORM OP-LOCATE
/*     IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
/*        MOVE MSOXOS0L.STACK-POS TO MSOXOS0L.STACK-POS-I
/*        FOR MSOXOS0L.STACK-POS-I = MSOXOS0L.STACK-POS-I TO
/*                     MSOXOS0A.STACK-LEN
/*           MOVE MSOXOS0L.STACK-POS-I TO MSOXOS0L.STACK-POS
/*           PERFORM OP-READ
/*           RESET EXPORT-RECORD
/*           IF MSOXSS0L.IX-ID NE MSOXOS0L.IX-ID THEN
/*              ESCAPE BOTTOM
/*           END-IF
/*           MOVE MSOXOS0L.DD-ID TO MBDCHM0A.DD-ID
/*           MOVE MSOXOS0L.DR-ID TO MBDCHM0A.DR-ID
/*           MOVE "READ" TO MBDCHM0A.BL-COMMAND
/*           PERFORM MBDCHM0S XXERX00A XXCTXX0A MBDCHM0A UXCSXX0A
/*           IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*           MOVE MBDCHM0A.DC-NUMBER TO EXPORT-RECORD.DC-NUMBER
/*           MOVE MBDCHM0A.DC-DATE TO EXPORT-RECORD.DC-DATE
/*         WRITE EXPORT-RECORD.DC-NUMBER EXPORT-RECORD.DC-DATE
/*           RESET EXPORT-RECORD.BALC-SUMMA EXPORT-RECORD.CENA-SUMMA
/*                 EXPORT-RECORD.BASE-COL-IN EXPORT-RECORD.BASE-COL-OUT
/*                 EXPORT-RECORD.BASE-COL-DEBET EXPORT-RECORD.BASE-COL-CREDIT
/*           IF MSOXOS0L.MD-MODIF EQ 1 THEN
/*              MOVE MSOXOS0L.BASE-COL TO EXPORT-RECORD.BASE-COL-DEBET
/*           ELSE
/*              MOVE MSOXOS0L.BASE-COL TO EXPORT-RECORD.BASE-COL-CREDIT
/*           END-IF
/*           MOVE MSOXOS0L.BALC-SUMMA TO EXPORT-RECORD.BALC-SUMMA
/*           COMPUTE ROUNDED EXPORT-RECORD.CENA-SUMMA = EXPORT-RECORD.BALC-SUMMA /
/*                       MSOXOS0L.BASE-COL
/*           WRITE WORK FILE 7 EXPORT-RECORD
/*        END-FOR
/*     END-IF
/*     RESET EXPORT-RECORD.BALC-SUMMA EXPORT-RECORD.CENA-SUMMA
/*           EXPORT-RECORD.BASE-COL-IN EXPORT-RECORD.BASE-COL-OUT
/*           EXPORT-RECORD.BASE-COL-DEBET EXPORT-RECORD.BASE-COL-CREDIT
  END-FOR
  CLOSE WORK FILE 7
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "MSOXSS0A" "MSOXSS0L-CONST" "MSOXSS0L"
        "SLD-INIT" "SLD-FREE" "SLD-REALLOC"
        "SLD-PUSH" "SLD-READ" "SLD-WRITE" "SLD-LOCATE"
INCLUDE XXSTMN4C "MSOXSS0A" "MSOXSS0L-CONST" "MSOXSS1L"
        "SLD-T-INIT" "SLD-T-FREE" "SLD-T-REALLOC"
        "SLD-T-PUSH" "SLD-T-READ" "SLD-T-WRITE" "SLD-T-LOCATE"
/*
/*INCLUDE XXSTMN4C "MSOXOS0A" "MSOXOS0L-CONST" "MSOXOS0L"
/*        "OP-INIT" "OP-FREE" "OP-REALLOC"
/*        "OP-PUSH" "OP-READ" "OP-WRITE" "OP-LOCATE"
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END
