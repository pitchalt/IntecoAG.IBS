* >Natural Source Header 000000 /*<RO>>
* :NatName CVTPO00P
* :UID ARMK523
* :Mode S
* :CP
* :Date 20070226
* :Time 1145000
* <Natural Source Header /*<<RO>
DEFINE DATA
LOCAL USING XXERX00A
/*LOCAL USING CXUSCT0A
/*LOCAL USING CXCLCT0A
LOCAL USING XXCTXX0A
LOCAL USING UDDRLS0L
/*LOCAL USING UDDRMN0L
LOCAL USING UXCSXX0A
/*
LOCAL USING MBPHMN0A
LOCAL USING MBPMMN0A
LOCAL USING MBPRMN0A
/*
LOCAL USING UETXMN0A
LOCAL USING MBMZMN0A
LOCAL USING XXXXEC0L
LOCAL USING XPPBXX0A
LOCAL USING DOCUMENT
LOCAL USING UDDRSH0A
/*
LOCAL USING KDFL
LOCAL USING LCLZKL
/*
LOCAL
1 #IS-ERROR      (L)
1 #NOT-NUMBER    (L)
1 #I       (I4)
1 #J       (I4)
1 #OK-F    (A27)
1 REDEFINE #OK-F
2 OK-OG    (N5)
2 OK-KM    (A22)
1 #CENA    (P13.2)
/*
1 STPO-CONST
 2 STPO-REC-LEN (I4) CONST <86>
 2 REDEFINE STPO-REC-LEN
 3 STACK-REC-LEN (I4)
 2 STACK-ALLOC-COUNT (I4) CONST <10000>
 2 STACK-KEY-START (I4) CONST <1>
 2 STPO-KEY-LEN (I4) CONST <24>
 2 REDEFINE STPO-KEY-LEN
 3 STACK-KEY-LEN (I4)
/*
1 STPO
 2 STACK-NUMBER (B4)
 2 STACK-COUNT (I4)
 2 STACK-LEN (I4)
 2 STACK-ID (I4)
 2 STACK-POS (B4)
 2 STACK-POS-I (I4)
 2 STACK-TMP-B1 (B4)
 2 STACK-TMP-B2 (B4)
 2 STACK-FIELD-POS (B4)
 2 STACK-FIELD-LEN (B4)
 2 STACK-REC-B (B1/1:STPO-REC-LEN)
 2 REDEFINE STACK-REC-B
 3 STACK-REC-G
 4 STACK-KEY-B (B1/1:STPO-KEY-LEN)
 4 REDEFINE STACK-KEY-B
 5 STACK-KEY-G
 6 MO-ID (P15)
 6 MT-ID (P15)
 6 KP-ND  (P11)
 6 KP-STR (P3)
 4 PR-ID (P15)
 4 COL   (P8.7)
 4 VO-ID (P15)
 4 ZK-ID (P15)
 4 SUMMA (P13.2)
 4 PH-ID (P15)
 4 PM-ID (P15)
 4 PO-NUMBER (N6)
1 #KP-F (A8)
1 REDEFINE #KP-F
2 KP-ND  (P11)
2 KP-STR (P3)
1 #DR-CONT (1:2)
2 DR-CONT-B (B16)
2 REDEFINE DR-CONT-B
3 DR-UP-ID (P15)
3 DR-TYPE-ID (P7)
3 DR-SORT (P7)
/*
1 #ERROR
2 ERR       (A3)
2 PO-NUMBER (A10)
2 PO-DATE   (D)
2 OBJ-ID    (P15)
2 MT-ID     (P15)
2 VO-ID     (P15)
2 ZK-ID     (P15)
2 ASUM-COL  (P8.7)
2 ARMK-COL  (P8.7)
2 ASUM-SUM  (P13.2)
2 ARMK-SUM  (P13.2)
END-DEFINE
CALL "FRS"
PERFORM STPO-INIT
FIND DOCUMENT WITH DT-F EQ 20070101 THRU 20070131
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"ÇAÃPÓÇKA ASUM PO"'
  END-START
  IF NOT ((TY-F EQ "PO" OR EQ "VZ") AND OG-F EQ 1000) THEN
     ESCAPE TOP
  END-IF
  INCLUDE XPPBST0C "*COUNTER"
  FOR #I = 1 TO C*ST-F
     RESET STPO.STACK-REC-G STPO.STACK-KEY-G
     STPO.MO-ID := OG-F * 100000 + OP-F
     MOVE 1000 TO #OK-F.OK-OG
     MOVE KM-F(#I) TO #OK-F.OK-KM
     FIND ASUM-KODIF-FILE WITH OK-F EQ #OK-F
        MOVE INT-NUM-KM TO STPO.MT-ID
     END-FIND
     MOVE KP-F(#I) TO #KP-F
     MOVE #KP-F.KP-ND TO STPO.KP-ND
     MOVE #KP-F.KP-STR TO STPO.KP-STR
     IF NUM_ZAP NE #KP-F.KP-ND THEN ESCAPE TOP END-IF
     PERFORM STPO-LOCATE
     IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
        MOVE KL-F(#I) TO STPO.COL
        IF TY-F EQ "PO" THEN
           STPO.VO-ID := OG-F * 100000 + PL-F
        END-IF
        IF TY-F EQ "VZ" THEN
           FIND ZAKAZ WITH ZK-F EQ NZ-F OR ZZ-F EQ NZ-F
              STPO.ZK-ID := ZAKAZ.INT-NUM-ZK
           END-FIND
        END-IF
        MOVE ND-F TO STPO.PO-NUMBER
        MOVE KL-F(#I) TO STPO.COL
        MOVE SUMM_OST(#I) TO STPO.SUMMA
        PERFORM STPO-PUSH
/*      WRITE TY-F ND-F DT-F #I KM-F(#I) STPO.VO-ID
     ELSE
     WRITE "DUPLICATE" STPO.MO-ID STPO.MT-ID STPO.KP-ND STPO.KP-STR
           TY-F ND-F DT-F #I KM-F(#I)
     END-IF
  END-FOR
END-FIND
/*ESCAPE ROUTINE
/*
MOVE 1001 TO UDDRSH0A.DD-ID
MOVE 10001 TO UDDRSH0A.SH-AT-ID(1,1)
MOVE *PROGRAM TO UDDRSH0A.SH-RETAIN
MOVE "TH" TO UDDRSH0A.SH-OPER(1)
MOVE 20070101 TO UDDRSH0A.SH-VALUE-P(1,1)
MOVE 20070131 TO UDDRSH0A.SH-VALUE-P(1,2)
MOVE "QUERY" TO UDDRSH0A.DL-COMMAND
PERFORM UDDRSH0S XXERX00A UDDRSH0A
IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
FIND UR-DOC-DATA-LIST WITH UDDRSH0A.SH-RETAIN
/*  WRITE UR-DOC-DATA-LIST.OD-ID UR-DOC-DATA-LIST.DR-TYPE-ID
/*        UR-DOC-DATA-LIST.DR-ID
  AT START OF DATA
    INCLUDE XPPBIN0C "*NUMBER" '"ÇAÃPÓÇKA ARMK PO"'
  END-START
  INCLUDE XPPBST0C "*COUNTER"
/*
  MOVE UR-DOC-DATA-LIST.DR-ID TO MBPHMN0A.PO-ID
  MOVE "READ" TO MBPHMN0A.BL-COMMAND
  PERFORM MBPHMN0S XXERX00A XXCTXX0A MBPHMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(1)
  MOVE 1002 TO #DR-CONT.DR-TYPE-ID(1)
  MOVE 0 TO #DR-CONT.DR-SORT(1)
  MOVE UR-DOC-DATA-LIST.DR-ID TO #DR-CONT.DR-UP-ID(2)
  MOVE 1002 TO #DR-CONT.DR-TYPE-ID(2)
  MOVE 9999999 TO #DR-CONT.DR-SORT(2)
  FIND UR-DOC-DATA-LIST WITH
           DR-CONT-SUPER EQ DR-CONT-B(1) THRU DR-CONT-B(2)
/*     WRITE UR-DOC-DATA-LIST.DR-UP-ID UR-DOC-DATA-LIST.DR-ID
     MOVE UR-DOC-DATA-LIST.DR-ID TO MBPMMN0A.PM-ID
     MOVE "READ" TO MBPMMN0A.BL-COMMAND
     PERFORM MBPMMN0S XXERX00A XXCTXX0A MBPMMN0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
     MOVE MBPMMN0A.PR-ID TO MBPRMN0A.PR-ID
     MOVE "READ" TO MBPRMN0A.BL-COMMAND
     PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
     PERFORM PROCESS-ITEM
  END-FIND
END-FIND
/*
READ WORK FILE 1 MBPHMN0A.PO-ID MBPMMN0A.PM-ID
/*
  MOVE "READ" TO MBPHMN0A.BL-COMMAND
  PERFORM MBPHMN0S XXERX00A XXCTXX0A MBPHMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  MOVE "READ" TO MBPMMN0A.BL-COMMAND
  PERFORM MBPMMN0S XXERX00A XXCTXX0A MBPMMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  MOVE MBPMMN0A.PR-ID TO MBPRMN0A.PR-ID
  MOVE "READ" TO MBPRMN0A.BL-COMMAND
  PERFORM MBPRMN0S XXERX00A XXCTXX0A MBPRMN0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  #NOT-NUMBER := TRUE
  PERFORM PROCESS-ITEM
END-WORK
/*
CLOSE WORK FILE 7
PERFORM STPO-FREE
/*
DEFINE SUBROUTINE PROCESS-ITEM
     IF PR-ASUM-INT-NUM NE 0 THEN
        RESET STPO.STACK-REC-G STPO.STACK-KEY-G
        MOVE MBPHMN0A.MO-ID TO STPO.MO-ID
        MOVE MBPMMN0A.MT-ID TO STPO.MT-ID
        MOVE PR-ASUM-INT-NUM TO STPO.KP-ND
        MOVE PR-ASUM-LINE TO STPO.KP-STR
        PERFORM STPO-LOCATE
        IF RETURN-CODE EQ EC-OBJECT-NOT-FOUND THEN
           RESET STPO.STACK-POS
        END-IF
     ELSE
        MOVE MBPHMN0A.MO-ID TO STPO.MO-ID
        MOVE MBPMMN0A.MT-ID TO STPO.MT-ID
        MOVE 1 TO STPO.STACK-FIELD-POS
        MOVE 16 TO STPO.STACK-FIELD-LEN
        CALL "CMPXF" STPO.STACK-KEY-B(1) STPO.STACK-FIELD-POS
              STPO.STACK-FIELD-LEN STPO.STACK-NUMBER
/*      WRITE "CMPXF" STPO.STACK-FIELD-POS
        REPEAT
           WHILE STPO.STACK-FIELD-POS NE H'00000000'
           MOVE STPO.STACK-FIELD-POS TO STPO.STACK-POS
           PERFORM STPO-READ
/*         WRITE STPO.STACK-FIELD-POS STPO.PO-NUMBER MBPHMN0A.PO-NUMBER
           IF (#NOT-NUMBER OR STPO.PO-NUMBER EQ
                    VAL(MBPHMN0A.PO-NUMBER)) AND
              STPO.COL EQ MBPMMN0A.BASE-COL AND
              STPO.PM-ID EQ 0
              ESCAPE BOTTOM
           END-IF
           MOVE STPO.STACK-FIELD-POS TO STPO.STACK-TMP-B1
           MOVE 1 TO STPO.STACK-FIELD-POS
           MOVE 16 TO STPO.STACK-FIELD-LEN
           CALL "CMPX" STPO.STACK-KEY-B(1) STPO.STACK-FIELD-POS
                 STPO.STACK-FIELD-LEN STPO.STACK-NUMBER
                 STPO.STACK-TMP-B1
/*         WRITE "CMPX" STPO.STACK-FIELD-POS
        END-REPEAT
        IF STPO.STACK-FIELD-POS EQ H'00000000' THEN
           RESET STPO.STACK-POS
        END-IF
     END-IF
     RESET #IS-ERROR
     IF STPO.STACK-POS NE H'00000000' THEN
        PERFORM STPO-READ
/***
     IF STPO.VO-ID NE MBPHMN0A.VO-ID THEN
        MOVE "VO" TO ERR
        MOVE STPO.VO-ID TO #ERROR.OBJ-ID
        PERFORM ERROR-LOG
     END-IF
     IF STPO.ZK-ID NE MBPHMN0A.ZK-ID THEN
        MOVE "VO" TO ERR
        MOVE STPO.ZK-ID TO #ERROR.OBJ-ID
        PERFORM ERROR-LOG
     END-IF
     IF STPO.COL NE MBPMMN0A.BASE-COL THEN
        MOVE "COL" TO ERR
        RESET #ERROR.OBJ-ID
        PERFORM ERROR-LOG
     END-IF
     IF STPO.SUMMA NE MBPMMN0A.DR-CENA-SUMMA THEN
        COMPUTE ROUNDED #CENA = STPO.SUMMA / STPO.COL
        COMPUTE ROUNDED MBPMMN0A.DR-CENA = MBPMMN0A.DR-CENA-SUMMA /
                                           MBPMMN0A.BASE-COL
        IF #CENA NE MBPMMN0A.DR-CENA THEN
           MOVE "SUM" TO ERR
           RESET #ERROR.OBJ-ID
           PERFORM ERROR-LOG
/*      WRITE "NOT SUM" MBPHMN0A.PO-NUMBER MBPHMN0A.PO-DATE
/*               STPO.SUMMA MBPMMN0A.DR-CENA-SUMMA
        END-IF
     END-IF
/***
     ELSE
        IF #NOT-NUMBER THEN
           MOVE "KP" TO ERR
           RESET #ERROR.OBJ-ID
           PERFORM ERROR-LOG
        ELSE
           #IS-ERROR := TRUE
           WRITE WORK FILE 1 MBPHMN0A.PO-ID MBPMMN0A.PM-ID
        END-IF
     END-IF
     IF NOT #IS-ERROR THEN
        MOVE MBPHMN0A.PO-ID TO STPO.PH-ID
        MOVE MBPMMN0A.PM-ID TO STPO.PM-ID
        PERFORM STPO-WRITE
     END-IF
END-SUBROUTINE
/*
DEFINE SUBROUTINE ERROR-LOG
        MOVE TRUE TO #IS-ERROR
        MOVE MBPHMN0A.PO-NUMBER  TO #ERROR.PO-NUMBER
        MOVE MBPHMN0A.PO-DATE TO #ERROR.PO-DATE
        MOVE MBPHMN0A.VO-ID TO #ERROR.VO-ID
        MOVE MBPHMN0A.ZK-ID TO #ERROR.ZK-ID
        MOVE MBPMMN0A.MT-ID TO #ERROR.MT-ID
        MOVE STPO.COL TO #ERROR.ASUM-COL
        MOVE MBPMMN0A.BASE-COL TO #ERROR.ARMK-COL
        MOVE STPO.SUMMA TO #ERROR.ASUM-SUM
        MOVE MBPMMN0A.DR-CENA-SUMMA TO #ERROR.ARMK-SUM
        WRITE WORK FILE 7 #ERROR
END-SUBROUTINE
/*
DEFINE SUBROUTINE ERROR-RECOVER
  PERFORM XPERVW0S XXERX00A
  PERFORM STPO-FREE
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "STPO" "STPO-CONST" "STPO"
        "STPO-INIT" "STPO-FREE" "STPO-REALLOC"
        "STPO-PUSH" "STPO-READ" "STPO-WRITE" "STPO-LOCATE"
/*
INCLUDE XXERSY2C
END
