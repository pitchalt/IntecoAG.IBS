* >Natural Source Header 000000 /*<RO>>
* :NatName MOPBXS0S
* :UID PAUL
* :Mode S
* :CP
* :Date 20071030
* :Time 1803000
* <Natural Source Header /*<<RO>
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING UXCSXX0A
PARAMETER USING MOPXCS0A
/*
LOCAL USING XXXXEC0L
LOCAL USING UXXXEC0L
LOCAL USING MXITAT0L
/*
LOCAL USING UBITMN0A
LOCAL USING UDSASH0A
/*LOCAL USING UDOPMN0A
LOCAL USING UDOPMN0L
/*
LOCAL USING MOPXMS0L
/*
LOCAL USING XPPBXX0A
/*
LOCAL USING UBODMN0A
LOCAL USING UBDDMN0A
LOCAL USING MBDCHM0A
LOCAL USING MBMTMN0A
LOCAL USING MBMOMN0A
LOCAL USING MBVOMN0A
LOCAL USING MBZKMN0A
LOCAL USING MBPHMN0A
LOCAL USING MBTTMN0A
LOCAL USING MBSFMN0A
LOCAL USING XBDPMN0A
/*
LOCAL
1 #DATA-A     (A8)
1 REDEFINE #DATA-A
2 #DATA-N     (N8)
1 #COUNT      (I4)
1 #ITEM       (I4)
/*
1 #FOUND      (L)
1 #ATTR       (I4)
1 #OP         (I4)
1 #MDOS       (I4)
1 #MDKS       (I4)
/*
1 EXPORT-RECORD
/*2 DT-REAL     (D)
2 DC-NUMBER   (A10)
2 DC-DATE     (D)
2 DD-CODE     (A10)
2 OD-CODE     (A10)
2 MO-CODE     (N5)
2 MT-CODE     (A22)
2 ZK-CODE     (A9)
2 VO-CODE     (A9)
2 KOR-MO-CODE (N5)
2 KOR-DP-CODE (N5)
2 KOR-ZK-CODE (A9)
2 BASE-DEBET  (P8.7)
2 BASE-CREDIT (P8.7)
2 BALC-CENA   (P13.2)
2 BALC-SUMMA  (P13.2)
2 KOR-DP-NAME (A20)
2 KOR-NAME    (A100)
2 MT-NAME     (A150)
2 TT-NUMBER   (A30)
2 TT-DATE     (D)
2 SF-NUMBER   (A30)
2 SF-DATE     (D)
2 DT-REAL     (D)
2 DT-REFL     (D)
2 DT-MAKE     (D)
/*
END-DEFINE
DEFINE SUBROUTINE MOPBXS0S
  IF MOPXCS0A.BL-COMMAND EQ "EXPORT" THEN
     PERFORM EXPORT-STACK
  END-IF
  IF MOPXCS0A.DT-ATTR-ID EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
  IF MOPXCS0A.DT-START EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
  IF MOPXCS0A.DT-STOP EQ 0 THEN *ERROR-NR := EC-ATTR-REQUIRED END-IF
/* читаем определение регистра что-бы определить cl-id (по идее нужно
/* просматривать все регистры и использовать множество cl-id)
  MOVE MOPXCS0A.IT-ID(1) TO UBITMN0A.IT-ID
  MOVE "READ" TO UBITMN0A.BL-COMMAND
  PERFORM UBITMN0S XXERX00A XXCTXX0A UBITMN0A UXCSXX0A
  IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
/*
  PERFORM STACK-INIT
/*
/* готовим параметры запроса
  MOVE MOPXCS0A.IT-ID(1) TO UDSASH0A.SH-IT-ID(*)
  IF MOPXCS0A.MO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MOPXCS0A.MO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MOPXCS0A.MT-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MT-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MOPXCS0A.MT-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MOPXCS0A.KOR-ZK-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE ZK-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MOPXCS0A.KOR-ZK-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MOPXCS0A.KOR-MO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE MO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MOPXCS0A.KOR-MO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  IF MOPXCS0A.KOR-VO-ID NE 0 THEN
     ADD 1 TO SH-AT-C
     MOVE VO-ATTR-ID TO UDSASH0A.SH-AT-ATTR-ID(SH-AT-C)
     MOVE MOPXCS0A.KOR-VO-ID TO UDSASH0A.SH-AT-VALUE(SH-AT-C)
  END-IF
  UDSASH0A.SH-OP-CL-ID := UBITMN0A.CL-ID * 10 + 2
  MOVE MOPXCS0A.DT-ATTR-ID TO UDSASH0A.SH-DT-ATTR-ID
  /*
  MOVE EDITED DT-START (EM=YYYYMMDD) TO #DATA-A
  MOVE #DATA-N TO UDSASH0A.SH-DT-START
  MOVE EDITED DT-STOP (EM=YYYYMMDD) TO #DATA-A
  MOVE #DATA-N TO UDSASH0A.SH-DT-STOP
  /* Запускаем поиск
  MOVE "SEARCH" TO UDSASH0A.DL-COMMAND
  PERFORM UDSASH0S XXERX00A UDSASH0A
  IF RETURN-CODE NE 0 THEN
     IF RETURN-CODE NE EC-OBJECT-NOT-FOUND THEN
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     ELSE
        ESCAPE ROUTINE
     END-IF
  END-IF
  INCLUDE XPPBIN0C "SH-NUMBER" '"Загрузка операций"'
  PERFORM PROCESS-QUERY
/*
DEFINE SUBROUTINE PROCESS-OPERATION
  RESET MOPXMS0L.STACK-REC-G MOPXMS0L.STACK-KEY-G
  MOVE UR-ACC-OP-VIEW.MD-MODIF(#MDOS) TO MOPXMS0L.MD-MODIF
  MOVE UR-ACC-OP-VIEW.OP-OD-ID(#OP) TO MOPXMS0L.OD-ID
  MOVE UR-ACC-OP-VIEW.OP-DC-DD-ID(#OP) TO MOPXMS0L.DD-ID
  MOVE UR-ACC-OP-VIEW.OP-DC-DR-ID(#OP) TO MOPXMS0L.DR-ID
  FOR #ATTR = 1 TO C*AD-G
     IF AD-INT-NUM(#ATTR) EQ MD-AD-INT-NUM(#MDOS,*) THEN
        DECIDE ON FIRST VALUE AD-ATTR-ID(#ATTR)
        VALUE DT-REAL-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MOPXMS0L.DT-REAL
        VALUE DT-REFL-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MOPXMS0L.DT-REFL
        VALUE DT-MAKE-ATTR-ID
           MOVE AD-VALUE(#ATTR) TO MOPXMS0L.DT-MAKE
        NONE VALUE
           IGNORE
        END-DECIDE
     END-IF
  END-FOR
  FOR #ATTR = 1 TO C*AT-G
     IF AT-MD-INT-NUM(#ATTR,*) EQ UR-ACC-OP-VIEW.MD-INT-NUM(#MDOS) THEN
        DECIDE ON FIRST VALUE UR-ACC-OP-VIEW.AT-ATTR-ID(#ATTR)
           VALUE MO-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.MO-ID
           VALUE MT-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.MT-ID
           VALUE ZK-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.ZK-ID
           VALUE BALC-SUM-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.BALC-SUMMA-P
           VALUE BASE-COL-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.BASE-COL-P
           VALUE PRIH-COL-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.PRIH-COL-P
           VALUE PLAN-COL-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.PLAN-COL-P
           NONE VALUE
              IGNORE
        END-DECIDE
     END-IF
  END-FOR
  IF #MDKS NE 0 THEN
     FOR #ATTR = 1 TO C*AT-G
        IF AT-MD-INT-NUM(#ATTR,*) EQ UR-ACC-OP-VIEW.MD-INT-NUM(#MDKS) THEN
           DECIDE ON FIRST VALUE UR-ACC-OP-VIEW.AT-ATTR-ID(#ATTR)
           VALUE MO-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.KOR-MO-ID
           VALUE VO-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.KOR-VO-ID
           VALUE ZK-ATTR-ID
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#ATTR) TO MOPXMS0L.KOR-ZK-ID
           NONE VALUE
              IGNORE
           END-DECIDE
        END-IF
     END-FOR
  END-IF
  PERFORM STACK-PUSH
END-SUBROUTINE
/*
DEFINE SUBROUTINE PROCESS-QUERY
  FIND UR-ACC-OP-VIEW WITH UDSASH0A.SH-RETAIN
     ACCEPT UR-ACC-OP-VIEW.OP-STATE EQ "N" AND UR-ACC-OP-VIEW.TX-STATUS EQ "N"
     ADD 1 TO #COUNT
     INCLUDE XPPBST0C "#COUNT"
     FOR #OP = 1 TO C*OP-G
/*        WRITE UR-ACC-OP-VIEW.OP-DC-DD-ID(#OP) UR-ACC-OP-VIEW.OP-DC-DR-ID(#OP)
        FOR #MDOS = 1 TO C*MD-G
           IF MD-OP-INT-NUM(#MDOS) NE UR-ACC-OP-VIEW.OP-INT-NUM(#OP) THEN
              ESCAPE TOP
           END-IF
           IF MD-IT-ID(#MDOS) EQ MOPXCS0A.IT-ID(*) THEN
              #FOUND := FALSE
              FOR #MDKS = 1 TO C*MD-G
                 IF #MDOS EQ #MDKS THEN ESCAPE TOP END-IF
                 IF MD-OP-INT-NUM(#MDKS) EQ UR-ACC-OP-VIEW.OP-INT-NUM(#OP) THEN
                    #FOUND := TRUE
                    ESCAPE BOTTOM
                 END-IF
              END-FOR
              IF NOT #FOUND THEN RESET #MDKS END-IF
              PERFORM PROCESS-OPERATION
           END-IF
        END-FOR
     END-FOR
  END-FIND
END-SUBROUTINE
/*
DEFINE SUBROUTINE EXPORT-STACK
  RESET XPPBXX0A
  INCLUDE XPPBIN0C "MOPXCS0A.STACK-LEN" '"Загрузка операций"'
  FOR #ITEM = 1 TO MOPXCS0A.STACK-LEN
     MOVE #ITEM TO MOPXMS0L.STACK-POS
     PERFORM STACK-READ
  END-ALL
  SORT MOPXMS0L.DT-REAL USING MOPXMS0L.STACK-REC-B(*)
     INCLUDE XPPBST0C "#ITEM"
     RESET EXPORT-RECORD
     MOVE MOPXMS0L.DD-ID TO UBDDMN0A.DD-ID
     MOVE "READ" TO UBDDMN0A.BL-COMMAND
     PERFORM UBDDMN0S XXERX00A UBDDMN0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE UBDDMN0A.DD-CODE TO EXPORT-RECORD.DD-CODE
     /*
     MOVE MOPXMS0L.OD-ID TO UBODMN0A.OD-ID
     MOVE "READ" TO UBODMN0A.BL-COMMAND
     PERFORM UBODMN0S XXERX00A XXCTXX0A UBODMN0A UXCSXX0A
     IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
     MOVE UBODMN0A.OD-CODE TO EXPORT-RECORD.OD-CODE
     /*
     IF MOPXMS0L.DD-ID NE 1001 THEN
        MOVE MOPXMS0L.DD-ID TO MBDCHM0A.DD-ID
        MOVE MOPXMS0L.DR-ID TO MBDCHM0A.DR-ID
        MOVE "READ" TO MBDCHM0A.BL-COMMAND
        PERFORM MBDCHM0S XXERX00A XXCTXX0A MBDCHM0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBDCHM0A.DC-NUMBER TO EXPORT-RECORD.DC-NUMBER
        MOVE MBDCHM0A.DC-DATE TO EXPORT-RECORD.DC-DATE
     ELSE
        MOVE MOPXMS0L.DR-ID TO MBPHMN0A.PO-ID
        MOVE "READ" TO MBPHMN0A.BL-COMMAND
        PERFORM MBPHMN0S XXERX00A XXCTXX0A MBPHMN0A UXCSXX0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBPHMN0A.PO-NUMBER TO EXPORT-RECORD.DC-NUMBER
        MOVE MBPHMN0A.PO-DATE TO EXPORT-RECORD.DC-DATE
        /*
        IF MBPHMN0A.TT-ID NE 0 THEN
           MOVE MBPHMN0A.TT-ID TO MBTTMN0A.TT-ID
           MOVE "READ" TO MBTTMN0A.BL-COMMAND
           PERFORM MBTTMN0S XXERX00A XXCTXX0A MBTTMN0A UXCSXX0A
           IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
           MOVE MBTTMN0A.TT-NUMBER TO EXPORT-RECORD.TT-NUMBER
           MOVE MBTTMN0A.TT-DATE TO EXPORT-RECORD.TT-DATE
        ELSE
           RESET EXPORT-RECORD.TT-NUMBER EXPORT-RECORD.TT-DATE
        END-IF
        /*
        IF MBPHMN0A.SF-ID NE 0 THEN
           MOVE MBPHMN0A.SF-ID TO MBSFMN0A.SF-ID
           MOVE "READ" TO MBSFMN0A.BL-COMMAND
           PERFORM MBSFMN0S XXERX00A XXCTXX0A MBSFMN0A UXCSXX0A
           IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
           MOVE MBSFMN0A.SF-NUMBER TO EXPORT-RECORD.SF-NUMBER
           MOVE MBSFMN0A.SF-DATE TO EXPORT-RECORD.SF-DATE
        ELSE
           RESET EXPORT-RECORD.SF-NUMBER EXPORT-RECORD.SF-DATE
        END-IF
     END-IF
     /*
     IF MOPXMS0L.MO-ID NE 0 THEN
        MOVE MOPXMS0L.MO-ID TO MBMOMN0A.MO-ID
        MOVE "READ" TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBMOMN0A.MO-CODE TO EXPORT-RECORD.MO-CODE
     END-IF
     /*
     IF MOPXMS0L.MT-ID NE 0 THEN
        MOVE MOPXMS0L.MT-ID TO MBMTMN0A.MT-ID
        MOVE "READ" TO MBMTMN0A.BL-COMMAND
        PERFORM MBMTMN0S XXERX00A XXCTXX0A MBMTMN0A
/*      IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBMTMN0A.MT-CODE TO EXPORT-RECORD.MT-CODE
        MOVE MBMTMN0A.MT-NAME TO EXPORT-RECORD.MT-NAME
     END-IF
     /*
     IF MOPXMS0L.ZK-ID NE 0 THEN
        MOVE MOPXMS0L.ZK-ID TO MBZKMN0A.ZK-ID
        MOVE "READ" TO MBZKMN0A.BL-COMMAND
        PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBZKMN0A.ZK-CODE TO EXPORT-RECORD.ZK-CODE
     END-IF
     /*
     IF MOPXMS0L.KOR-ZK-ID NE 0 THEN
        MOVE MOPXMS0L.KOR-ZK-ID TO MBZKMN0A.ZK-ID
        MOVE "READ" TO MBZKMN0A.BL-COMMAND
        PERFORM MBZKMN0S XXERX00A XXCTXX0A MBZKMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBZKMN0A.ZK-CODE TO EXPORT-RECORD.KOR-ZK-CODE
     END-IF
     /*
     IF MOPXMS0L.KOR-MO-ID NE 0 THEN
        MOVE MOPXMS0L.KOR-MO-ID TO MBMOMN0A.MO-ID
        MOVE "READ" TO MBMOMN0A.BL-COMMAND
        PERFORM MBMOMN0S XXERX00A XXCTXX0A MBMOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBMOMN0A.MO-CODE TO EXPORT-RECORD.KOR-MO-CODE
        MOVE MBMOMN0A.MO-NAME TO EXPORT-RECORD.KOR-NAME
        /*
        IF MBMOMN0A.DP-ID NE XBDPMN0A.DP-ID THEN
           MOVE MBMOMN0A.DP-ID TO XBDPMN0A.DP-ID
           MOVE "READ" TO XBDPMN0A.BL-COMMAND
           PERFORM XBDPMN0S XXERX00A XXCTXX0A XBDPMN0A
           IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        END-IF
        MOVE XBDPMN0A.DP-CODE TO EXPORT-RECORD.KOR-DP-CODE
        MOVE XBDPMN0A.DP-NAME TO EXPORT-RECORD.KOR-DP-NAME
     ELSE
        RESET EXPORT-RECORD.KOR-MO-CODE EXPORT-RECORD.KOR-NAME
              EXPORT-RECORD.KOR-DP-CODE EXPORT-RECORD.KOR-DP-NAME
     END-IF
     /*
     IF MOPXMS0L.KOR-VO-ID NE 0 THEN
        MOVE MOPXMS0L.KOR-VO-ID TO MBVOMN0A.VO-ID
        MOVE "READ" TO MBVOMN0A.BL-COMMAND
        PERFORM MBVOMN0S XXERX00A XXCTXX0A MBVOMN0A
        IF RETURN-CODE NE 0 THEN *ERROR-NR := EC-QUIT-STACK-TRACE END-IF
        MOVE MBVOMN0A.VO-CODE TO EXPORT-RECORD.VO-CODE
        COMPRESS MBVOMN0A.VO-INN  MBVOMN0A.VO-NAME MBVOMN0A.VO-ADDRESS
              INTO EXPORT-RECORD.KOR-NAME
     END-IF
     /*
     IF MOPXMS0L.BASE-COL NE 0 THEN
        IF MOPXMS0L.MD-MODIF EQ 1 THEN
           MOVE MOPXMS0L.BASE-COL TO BASE-DEBET
        ELSE IF MOPXMS0L.MD-MODIF EQ 2 THEN
           MOVE MOPXMS0L.BASE-COL TO BASE-CREDIT
        END-IF END-IF
        COMPUTE ROUNDED EXPORT-RECORD.BALC-CENA =
              MOPXMS0L.BALC-SUMMA / MOPXMS0L.BASE-COL
     END-IF
     MOVE MOPXMS0L.BALC-SUMMA TO EXPORT-RECORD.BALC-SUMMA
     MOVE MOPXMS0L.DT-REAL TO EXPORT-RECORD.DT-REAL
     MOVE MOPXMS0L.DT-REFL TO EXPORT-RECORD.DT-REFL
     MOVE MOPXMS0L.DT-MAKE TO EXPORT-RECORD.DT-MAKE
     WRITE WORK FILE 7 EXPORT-RECORD
  END-SORT
  CLOSE WORK FILE 7
END-SUBROUTINE
/*
INCLUDE XXSTMN4C "MOPXCS0A" "MOPXMS0L-CONST" "MOPXMS0L"
        "STACK-INIT" "STACK-FREE" "STACK-REALLOC"
        "STACK-PUSH" "STACK-READ" "STACK-WRITE" "STACK-LOCATE"
/*
INCLUDE XXERSY1C
END-SUBROUTINE
END
