* >Natural Source Header 000000 /*<RO>>
* :NatName MBSKFN0S
* :UID ARMK01
* :Mode S
* :CP
* :Date 20101214
* :Time 1109000
* <Natural Source Header /*<<RO>
/* œ–Œ√–¿ÃÃ¿ œŒ»— ¿ ƒ¿ÕÕ€’ œŒ  –»“≈–»ﬁ
/*
DEFINE DATA
PARAMETER USING XXERX00A
PARAMETER USING XXCTXX0A
PARAMETER USING MPSKFN0A
PARAMETER USING XPMXXX0A
PARAMETER USING UXCSXX0A
LOCAL USING STEKL
/* —“≈ 
LOCAL USING XXXXEC0L
LOCAL USING MPSKST0L
LOCAL USING UDOPMN0L
LOCAL USING MXITAT0L
LOCAL USING MBRLPM0A
LOCAL USING MBRLMM0A
LOCAL USING XPPBXX0A
LOCAL
1 #COUNT    (I4)
1 #DATA-A   (A8)
1 REDEFINE #DATA-A
  2 #DATA-N   (N8)
1 #LEN-ELEMENT   (B4)
1 #ALLOC-COUNTER (B4)
1 #CUR-SUPER (I4)
1 SUPER    (1:20)
  2 SUPER-SB (B23)
  2 REDEFINE SUPER-SB
     3 #OP-CL-ID    (P7)
     3 #AT-IS-INDEX (L)
     3 #AT-ATTR-ID  (P7)
     3 #AT-VALUE    (P15)
     3 #DT-INDEX    (P11)
1 #NUMBER2  (I4)
1 #NUMBER3  (I4)
1 #I1 (I2)
1 #I2 (I2)
1 #I3 (I2)
1 #I4 (I2)
1 #TASK (I2)
1 #STR-TEMP
 2 ATTR-CODE  (P7)
 2 ATTR-NAME  (A10)
 2 ATTR-VALUE (P15)
1 #COUNTER  (I4)
1 #INDEX-DAT (I2)
1 #MD (I2)
1 #AD (I2)
1 #INDEX-KOL (I2)
1 #INDEX-SUMMA (I2)
1 #QUERY-MT   (P15)
1 #QUERY-MO   (P15)
1 #QUERY-PR   (P15)
1 #QUERY-MT-BASE (P15)
1 #QUERY-ZK   (P15)
1 #QUERY-DF   (P15)
1 #QUERY-FAIL (L)
1 #STR-POS  (B4/1:2)
1 #STR-LEN  (B4/1:2)
1 #SALDO      (P15)
1 #IS-EMPTY   (L)
END-DEFINE
DEFINE SUBROUTINE MBSKFN0S
/*MOVE 0 TO LS-VO-ID LS-SUPPLIER-MO-ID LS-CUSTOMER-MO-ID LS-ZAKAZ-ID
IF MPSKFN0A.STACK-NUMBER EQ 0 THEN
   CALL 'GTNX' MPSKFN0A.STACK-NUMBER
END-IF
MOVE MPSKST0LS.LEN-ELEMENT TO #LEN-ELEMENT
/*MOVE MPSKST0LS.STACK-ALLOC-COUNT TO #ALLOC-COUNTER
MOVE 5000 TO #ALLOC-COUNTER  /* ¡€ÀO 2500 »«MEHEHO 14.12.2010
CALL 'GTSX' #LEN-ELEMENT #ALLOC-COUNTER MPSKFN0A.STACK-NUMBER
RESET ST-STEK /* Œ¡Õ”À≈Õ»≈ ¬—≈’ œ≈–≈Ã≈ÕÕ€’
/*
  INCLUDE MBSKFN0C '''PR''' /* PR
  IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
     EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "PR" GIVING INDEX #I
     MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-PR
  END-IF
  INCLUDE MBSKFN0C '''MT''' /* MT
  IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
     EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "MT" GIVING INDEX #I
     MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-MT
  END-IF
  INCLUDE MBSKFN0C '''BASE-MT''' /* MT
  IF #I NE 0 THEN
     IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
        EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "BASE-MT" GIVING INDEX #I
        MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-MT-BASE
     END-IF
  END-IF
  INCLUDE MBSKFN0C '''MO''' /* MO
  IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
     EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "MO" GIVING INDEX #I
     MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-MO
  END-IF
  INCLUDE MBSKFN0C '''ZK''' /* ZK
  IF #I NE 0 THEN
     IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
        EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "ZK" GIVING INDEX #I
        MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-ZK
     END-IF
  END-IF
  INCLUDE MBSKFN0C '''DF''' /* ZK
  IF #I NE 0 THEN
     IF MPSKFN0A.ATTR-CODE(#I) NE 0 AND MPSKFN0A.ATTR-VALUE(#I) NE 0
        EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "DF" GIVING INDEX #I
        MOVE MPSKFN0A.ATTR-VALUE(#I) TO #QUERY-DF
     END-IF
  END-IF
/* WRITE #QUERY-ZK #QUERY-MT #QUERY-MT-BASE
/* œŒ»—  Õ¿ “–≈“‹≈Ã ”–Œ¬Õ≈
/* ‘Œ–Ã»–Œ¬¿Õ»≈ —”œ≈–Œ¬
RESET #CUR-SUPER #OP-CL-ID(*)
FOR #K = 1 TO 10
  IF MPSKFN0A.ATTR-CODE(#K) = 0 ESCAPE BOTTOM END-IF
  IF MPSKFN0A.ATTR-VALUE(#K) = 0 THEN ESCAPE TOP END-IF
  ADD 1 TO #CUR-SUPER
  MOVE #CUR-SUPER TO #I
  #OP-CL-ID(#I) := MPSKFN0A.CL-ID * 10 + 3 /* 3 - LEVEL
  #OP-CL-ID(#I + 1) := #OP-CL-ID(#I)
  MOVE TRUE TO #AT-IS-INDEX(#I)  #AT-IS-INDEX(#I + 1)
  MOVE MPSKFN0A.ATTR-CODE(#K) TO #AT-ATTR-ID(#I) #AT-ATTR-ID(#I + 1)
  MOVE MPSKFN0A.ATTR-VALUE(#K) TO #AT-VALUE(#I) #AT-VALUE(#I + 1)
  MOVE '00000000' TO #DATA-A
  MOVE #DATA-N TO #DT-INDEX(#I)
  MOVE '90000000' TO #DATA-A
  MOVE #DATA-N TO #DT-INDEX(#I + 1)
  ADD 1 TO #CUR-SUPER
END-FOR
MOVE #CUR-SUPER TO #K
INCLUDE MBSKFN1C 'F1.' 'F2.' '#NUMBER3' '''MBSKFN3S'''
/* œŒ»—  Õ¿ ¬“Œ–ŒÃ ”–Œ¬Õ≈
  /* ‘Œ–Ã»–Œ¬¿Õ»≈ —”œ≈–¿
FOR #I = 1 TO 9
  IF  #OP-CL-ID(#I) = 0
     ESCAPE BOTTOM
  END-IF
  #OP-CL-ID(#I) := MPSKFN0A.CL-ID * 10 + 2 /* 2 - LEVEL
END-FOR
INCLUDE MBSKFN1C 'F3.' 'F4.' '#NUMBER2' '''MBSKFN2S'''
/* Œ¡‹≈ƒ»Õ≈Õ»≈ —œ»— Œ¬
#IS-EMPTY := TRUE
DECIDE FOR EVERY CONDITION
  WHEN #NUMBER2 NE 0
     INCLUDE XPPBIN0C "#NUMBER2" '"«‡„ÛÁÍ‡ ÓÔÂ‡ˆËÈ"'
     FIND UR-ACC-OP-VIEW WITH 'MBSKFN2S'
        DECIDE FOR FIRST CONDITION
           WHEN OP-STATE = 'N' AND TX-STATUS = 'N'
              PERFORM STRING
           WHEN OP-STATE = 'S' AND TX-STATUS = 'P'
              EXAMINE MPSKFN0A.ATTR-NAME(*) FOR 'KOL-EU'
                 GIVING INDEX #INDEX-KOL
              EXAMINE MPSKFN0A.ATTR-NAME(*) FOR "SUMMA-EU"
                 GIVING INDEX #INDEX-SUMMA
              FOR #I = 1 TO 50
                 IF UR-ACC-OP-VIEW.AT-ATTR-ID(#I) = 0
                    ESCAPE BOTTOM
                 END-IF
                 IF UR-ACC-OP-VIEW.AT-ATTR-ID(#I) = MPSKFN0A.ATTR-CODE(#INDEX-KOL)
                    UR-ACC-OP-VIEW.AT-VALUE(#I) := UR-ACC-OP-VIEW.AT-VALUE(#I) * -1
                 END-IF
                 IF UR-ACC-OP-VIEW.AT-ATTR-ID(#I) = MPSKFN0A.ATTR-CODE(#INDEX-SUMMA)
                    UR-ACC-OP-VIEW.AT-VALUE(#I) := UR-ACC-OP-VIEW.AT-VALUE(#I) * -1
                 END-IF
              END-FOR
              PERFORM STRING
          WHEN NONE
              IGNORE
        END-DECIDE
     END-FIND
     RELEASE SET 'MBSKFN2S'
  WHEN #NUMBER3 NE 0
     INCLUDE XPPBIN0C "#NUMBER3" '"«‡„ÛÁÍ‡ ÓÔÂ‡ˆËÈ"'
     FIND UR-ACC-OP-VIEW WITH 'MBSKFN3S'
        PERFORM STRING
     END-FIND
     RELEASE SET 'MBSKFN3S'
  WHEN #NUMBER2 = 0 AND #NUMBER3 = 0
     XXERX00A.RETURN-CODE := 2501
     ESCAPE ROUTINE
  WHEN NONE IGNORE
END-DECIDE
/*
IF #IS-EMPTY THEN
  XXERX00A.RETURN-CODE := 2501
  ESCAPE ROUTINE
END-IF
/* œŒ»—  «¿œ»—≈…, «¿œŒÀÕ≈Õ»≈ —“≈ ¿
/* œ¿–¿Ã≈“–€ —“≈ ¿
  MOVE MPSKST0LS.STACK-ALLOC-COUNT TO STACK-COUNT
  MOVE #COUNTER TO STACK-LEN
/*
  MOVE 1 TO #STR-POS(1)
  MOVE 9 TO #STR-LEN(1)
/*
  RESET #SALDO
  CALL 'SRTX' #STR-POS(1) #STR-LEN(1) MPSKFN0A.STACK-NUMBER
  FOR #I = #COUNTER TO 1 STEP -1
     MOVE #I TO XI
     CALL 'RWSX' XI MPSKST0L.STRING(1) XR MPSKFN0A.STACK-NUMBER
     MOVE #SALDO TO MPSKST0L.OP-SALDO-IN
     IF MPSKST0L.MD-IT-SALDO-TYPE EQ 1 THEN
        MPSKST0L.OP-SALDO-OUT := #SALDO + MPSKST0L.MT-QUANTITY-EU
     ELSE
        MPSKST0L.OP-SALDO-OUT := #SALDO - MPSKST0L.MT-QUANTITY-EU
     END-IF
     MOVE MPSKST0L.OP-SALDO-OUT TO #SALDO
     CALL 'RWSX' XI MPSKST0L.STRING(1) XW MPSKFN0A.STACK-NUMBER
/*   IF *USER EQ "ARMK01" THEN WRITE MPSKST0L.MO-ID
/*      MPSKST0L.OP-SALDO-IN MPSKST0L.OP-SALDO-OUT
/*   END-IF
  END-FOR
/*
DEFINE SUBROUTINE CREATE-REC-STEK
/*  WRITE '-'
  FOR #I = 1 TO 15
     IF MPSKFN0A.ATTR-CODE(#I) = 0 AND MPSKFN0A.ATTR-NAME(#I) = ' '
        ESCAPE BOTTOM
     END-IF
/*     WRITE #I #I3 AT-ATTR-ID(#I3) ZK-ATTR-ID
/*     IF UR-ACC-OP-VIEW.OP-SRC-DD-ID(1) EQ 1703 THEN
/*        MOVE UR-ACC-OP-VIEW.OP-SRC-DR-ID(1) TO MBRLPM0A.RLP-ID
/*        MOVE "READ" TO MBRLPM0A.BL-COMMAND
/*        PERFORM MBRLPM0S XXERX00A XXCTXX0A MBRLPM0A UXCSXX0A
/*        IF RETURN-CODE EQ 0 THEN
/*           MOVE MBRLPM0A.RLM-ID TO MBRLMM0A.RLM-ID
/*           MOVE "READ" TO MBRLMM0A.BL-COMMAND
/*           PERFORM MBRLMM0S XXERX00A XXCTXX0A MBRLMM0A UXCSXX0A
/*        IF RETURN-CODE EQ 0 THEN
/*           MOVE MBRLMM0A.LK-ID TO MPSKST0L.SK-LZK-ID
/*           MOVE MBRLMM0A.ZK-ID TO MPSKST0L.ZK-ID
/*        END-IF
/*        END-IF
/*     END-IF
     IF MPSKFN0A.ATTR-CODE(#I) = AT-ATTR-ID(#I3)
        DECIDE ON FIRST VALUE MPSKFN0A.ATTR-NAME(#I)
           VALUE 'MO'
              IF #QUERY-MO NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE #QUERY-MO THEN
                 #QUERY-FAIL := TRUE
              END-IF
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
              TO MPSKST0L.MO-ID
           VALUE 'MT'
              IF #QUERY-MT NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE #QUERY-MT THEN
                 #QUERY-FAIL := TRUE
              END-IF
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
              TO MPSKST0L.MT-ID
           VALUE 'PR'
              IF #QUERY-PR NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE #QUERY-PR THEN
                 #QUERY-FAIL := TRUE
              END-IF
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
              TO MPSKST0L.PR-ID
           VALUE "ZK"
              IF #QUERY-ZK NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE #QUERY-ZK THEN
                 #QUERY-FAIL := TRUE
              ELSE
                 MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
                    TO MPSKST0L.ZK-ID
              END-IF
           VALUE "DF"
              IF #QUERY-DF NE 0 AND
                 UR-ACC-OP-VIEW.AT-VALUE(#I3) NE #QUERY-DF THEN
                 #QUERY-FAIL := TRUE
              ELSE
                 MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
                    TO MPSKST0L.DF-ID
              END-IF
           VALUE 'KOL-EP'
              IGNORE
           VALUE 'KOL-EU'
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
              TO MPSKST0L.MT-QUANTITY-EU
              MOVE UR-ACC-OP-VIEW.AT-EDIZ-ID(#I3)
              TO MPSKST0L.EI-ID
           VALUE 'SUMMA-EU'
              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
              TO MPSKST0L.MT-SUMMA
/*           VALUE 'LZK'
/*              MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3)
/*              TO MPSKST0L.SK-LZK-ID
           ANY VALUE
              ESCAPE BOTTOM
           NONE VALUE
              IGNORE
        END-DECIDE
     END-IF
   END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE CREATE-TARGET
  FOR #I4 = 1 TO C*MD-G
     IF UR-ACC-OP-VIEW.MD-OP-INT-NUM(#I4) NE UR-ACC-OP-VIEW.OP-INT-NUM(#I1) OR
        #I4 EQ #I2 THEN
        ESCAPE TOP
     END-IF
     FOR #I3 = 1 TO C*AT-G
        IF MD-INT-NUM(#I4) = AT-MD-INT-NUM(#I3,*)
           FOR #I = 1 TO 15
              IF MPSKFN0A.ATTR-CODE(#I) NE AT-ATTR-ID(#I3) THEN
                 ESCAPE TOP
              END-IF
              DECIDE ON FIRST VALUE MPSKFN0A.ATTR-NAME(#I)
              VALUE "ZK"
                 MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3) TO MPSKST0L.ZK-ID
              VALUE "MO"
                 MOVE FALSE TO MPSKST0L.IS-TARGET-VO
                 MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3) TO MPSKST0L.OUT-MO-ID
              VALUE "VO"
                 MOVE TRUE TO MPSKST0L.IS-TARGET-VO
                 MOVE UR-ACC-OP-VIEW.AT-VALUE(#I3) TO MPSKST0L.VO-ID
              NONE VALUE
                 IGNORE
              END-DECIDE
           END-FOR
        END-IF
     END-FOR
  END-FOR
END-SUBROUTINE
/*
DEFINE SUBROUTINE STRING
  ADD 1 TO #COUNT
  INCLUDE XPPBST0C "#COUNT"
  FOR #I1 = 1 TO 1
/*        WRITE UR-ACC-OP-VIEW.OP-OD-ID(#I1) UR-ACC-OP-VIEW.MD-IT-ID(1)
/*              UR-ACC-OP-VIEW.MD-IT-ID(2)
MDF.     FOR #I2 = 1 TO 2
        IF UR-ACC-OP-VIEW.MD-IX-ID(#I2) EQ 0 THEN ESCAPE TOP END-IF
        IF UR-ACC-OP-VIEW.MD-OP-INT-NUM(#I2) =
           UR-ACC-OP-VIEW.OP-INT-NUM(#I1)
           AND MPSKFN0A.MD-IT-ID(*) = UR-ACC-OP-VIEW.MD-IT-ID(#I2)
                         /* œŒÀ”◊≈Õ»≈ ƒ¿“‘ Œ“–¿∆≈Õ»ﬂ
           RESET ST-STEK
           EXAMINE MPSKFN0A.ATTR-NAME(*) FOR 'DATA-OT'
                 GIVING INDEX #INDEX-DAT
           FOR #MD = 1 TO 5
              IF MD-AD-INT-NUM(#I2,#MD) = 0
                 ESCAPE BOTTOM
              END-IF
              FOR #AD = 1 TO 5
                 IF AD-INT-NUM(#AD) = 0 OR MPSKST0L.DR-DATA-OT NE ' '
                    ESCAPE BOTTOM
                 END-IF
                 IF MD-AD-INT-NUM(#I2,#MD) = AD-INT-NUM(#AD)
                    IF MPSKFN0A.ATTR-CODE(#INDEX-DAT) =
                             AD-ATTR-ID(#AD)
                       MOVE EDITED AD-VALUE(#AD) (EM=YYYYMMDD)
                          TO MPSKST0L.DR-DATA-OT
                       MPSKST0L.DR-DATA-SORT :=
                           99999999 - MPSKST0L.DR-DATA-OT-N
                       ESCAPE BOTTOM
                    END-IF
                 END-IF
              END-FOR
           END-FOR
           /*
           #QUERY-FAIL := FALSE
           FOR #I3 = 1 TO C*AT-G
              IF MD-INT-NUM(#I2) = AT-MD-INT-NUM(#I3,*)
                 #QUERY-FAIL := FALSE
                 PERFORM CREATE-REC-STEK
                 IF #QUERY-FAIL THEN
                    ESCAPE BOTTOM
                 END-IF
              END-IF
           END-FOR
           IF #QUERY-FAIL THEN
              ESCAPE TOP
           END-IF
/*           WRITE UR-ACC-OP-VIEW.UD-ID UR-ACC-OP-VIEW.OP-OD-ID(#I1)
/*        UR-ACC-OP-VIEW.MD-IT-ID(#I2) UR-ACC-OP-VIEW.OP-DC-DD-ID(#I1)
           PERFORM CREATE-TARGET
              MOVE UR-ACC-OP-VIEW.OP-OD-ID(#I1) TO MPSKST0L.OP-OD-ID
              MOVE UR-ACC-OP-VIEW.OP-DC-DD-ID(#I1) TO MPSKST0L.OP-DC-DD-ID
              MOVE UR-ACC-OP-VIEW.OP-DC-DR-ID(#I1) TO
                   MPSKST0L.OP-DC-DR-ID
              MOVE UR-ACC-OP-VIEW.OP-SRC-DD-ID(#I1) TO MPSKST0L.OP-SRC-DD-ID
              MOVE UR-ACC-OP-VIEW.OP-SRC-DR-ID(#I1) TO MPSKST0L.OP-SRC-DR-ID
/*         WRITE 'DD' UR-ACC-OP-VIEW.OP-DC-DD-ID(#I1)
/*              MOVE UR-ACC-OP-VIEW.MD-IT-SALDO-TYPE(#I2) TO
/*              MPSKST0L.MD-IT-SALDO-TYPE
              MOVE UR-ACC-OP-VIEW.MD-MODIF(#I2) TO
                   MPSKST0L.MD-IT-SALDO-TYPE
              MPSKST0L.DR-OP-TYPE-SORT := 3 - MPSKST0L.MD-IT-SALDO-TYPE
/*              MOVE UR-ACC-OP-VIEW.MD-IT-SALDO-TYPE(#I2) TO MPSKST0L.MD-IT-SALDO-TYPE
              MOVE UR-ACC-OP-VIEW.MD-IT-ID(#I2) TO MPSKST0L.MD-IT-ID
              MOVE UR-ACC-OP-VIEW.MD-IX-ID(#I2) TO MPSKST0L.MD-IX-ID
              ADD 1 TO #COUNTER
              MOVE #COUNTER TO XI
           /* «¿œ»—‹ ¬ —“≈ 
              CALL 'RWSX' XI MPSKST0L.STRING(1) XW MPSKFN0A.STACK-NUMBER
              #IS-EMPTY := FALSE
        END-IF
     END-FOR
  END-FOR
END-SUBROUTINE
INCLUDE XXERSY1C
END-SUBROUTINE
END
